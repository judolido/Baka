
SAIv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e550  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001aa4  0800e750  0800e750  0000f750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080101f4  080101f4  000121c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080101f4  080101f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080101fc  080101fc  000121c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080101fc  080101fc  000111fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010200  08010200  00011200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08010204  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000084  08010288  00012084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000124  08010328  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00009580  200001c4  080103c8  000121c4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20009744  080103c8  00012744  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000121c4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c185  00000000  00000000  000121f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004fb9  00000000  00000000  0002e377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001518  00000000  00000000  00033330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001037  00000000  00000000  00034848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003337f  00000000  00000000  0003587f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002327e  00000000  00000000  00068bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0010b885  00000000  00000000  0008be7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00197701  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005dcc  00000000  00000000  00197744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004d  00000000  00000000  0019d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c4 	.word	0x200001c4
 800021c:	00000000 	.word	0x00000000
 8000220:	0800e738 	.word	0x0800e738

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001c8 	.word	0x200001c8
 800023c:	0800e738 	.word	0x0800e738

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fefa 	bl	800140a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f81f 	bl	8000658 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Delay(10);
 800061a:	200a      	movs	r0, #10
 800061c:	f000 ff52 	bl	80014c4 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000620:	f000 f942 	bl	80008a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000624:	f000 f90e 	bl	8000844 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000628:	f000 f8dc 	bl	80007e4 <MX_USART3_UART_Init>
  MX_SAI2_Init();
 800062c:	f000 f882 	bl	8000734 <MX_SAI2_Init>
  MX_LWIP_Init();
 8000630:	f006 f83a 	bl	80066a8 <MX_LWIP_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(100);
 8000634:	2064      	movs	r0, #100	@ 0x64
 8000636:	f000 ff45 	bl	80014c4 <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pAudBuf, AUDIO_BUFF_SIZE);
 800063a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800063e:	4904      	ldr	r1, [pc, #16]	@ (8000650 <main+0x44>)
 8000640:	4804      	ldr	r0, [pc, #16]	@ (8000654 <main+0x48>)
 8000642:	f004 fb6f 	bl	8004d24 <HAL_SAI_Receive_DMA>
  uint32_t last_uart_tx_time = HAL_GetTick();
 8000646:	f000 ff31 	bl	80014ac <HAL_GetTick>
 800064a:	6078      	str	r0, [r7, #4]

  //HAL_SAI_Receive(&hsai_BlockB2, (uint16_t*)i2s_rx_buffer, 2, 100);
  // Set guard value after audio buffer
  while (1)
 800064c:	bf00      	nop
 800064e:	e7fd      	b.n	800064c <main+0x40>
 8000650:	200003ac 	.word	0x200003ac
 8000654:	200001e0 	.word	0x200001e0

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b094      	sub	sp, #80	@ 0x50
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 031c 	add.w	r3, r7, #28
 8000662:	2234      	movs	r2, #52	@ 0x34
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00d f9c3 	bl	800d9f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	f107 0308 	add.w	r3, r7, #8
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	605a      	str	r2, [r3, #4]
 8000676:	609a      	str	r2, [r3, #8]
 8000678:	60da      	str	r2, [r3, #12]
 800067a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800067c:	4b2b      	ldr	r3, [pc, #172]	@ (800072c <SystemClock_Config+0xd4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a2a      	ldr	r2, [pc, #168]	@ (800072c <SystemClock_Config+0xd4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b28      	ldr	r3, [pc, #160]	@ (800072c <SystemClock_Config+0xd4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	4b26      	ldr	r3, [pc, #152]	@ (8000730 <SystemClock_Config+0xd8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a25      	ldr	r2, [pc, #148]	@ (8000730 <SystemClock_Config+0xd8>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b23      	ldr	r3, [pc, #140]	@ (8000730 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006c4:	23d8      	movs	r3, #216	@ 0xd8
 80006c6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c8:	2302      	movs	r3, #2
 80006ca:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006cc:	2302      	movs	r3, #2
 80006ce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 031c 	add.w	r3, r7, #28
 80006d8:	4618      	mov	r0, r3
 80006da:	f002 febb 	bl	8003454 <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006e4:	f000 fa96 	bl	8000c14 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006e8:	f002 fe64 	bl	80033b4 <HAL_PWREx_EnableOverDrive>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f2:	f000 fa8f 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f6:	230f      	movs	r3, #15
 80006f8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fa:	2302      	movs	r3, #2
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000702:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000708:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800070c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800070e:	f107 0308 	add.w	r3, r7, #8
 8000712:	2107      	movs	r1, #7
 8000714:	4618      	mov	r0, r3
 8000716:	f003 f94b 	bl	80039b0 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000720:	f000 fa78 	bl	8000c14 <Error_Handler>
  }
}
 8000724:	bf00      	nop
 8000726:	3750      	adds	r7, #80	@ 0x50
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000738:	4b28      	ldr	r3, [pc, #160]	@ (80007dc <MX_SAI2_Init+0xa8>)
 800073a:	4a29      	ldr	r2, [pc, #164]	@ (80007e0 <MX_SAI2_Init+0xac>)
 800073c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800073e:	4b27      	ldr	r3, [pc, #156]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000740:	2200      	movs	r2, #0
 8000742:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000744:	4b25      	ldr	r3, [pc, #148]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000746:	2201      	movs	r2, #1
 8000748:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 800074a:	4b24      	ldr	r3, [pc, #144]	@ (80007dc <MX_SAI2_Init+0xa8>)
 800074c:	22c0      	movs	r2, #192	@ 0xc0
 800074e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000752:	2200      	movs	r2, #0
 8000754:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000756:	4b21      	ldr	r3, [pc, #132]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800075c:	4b1f      	ldr	r3, [pc, #124]	@ (80007dc <MX_SAI2_Init+0xa8>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000762:	4b1e      	ldr	r3, [pc, #120]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000764:	2200      	movs	r2, #0
 8000766:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000768:	4b1c      	ldr	r3, [pc, #112]	@ (80007dc <MX_SAI2_Init+0xa8>)
 800076a:	2200      	movs	r2, #0
 800076c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800076e:	4b1b      	ldr	r3, [pc, #108]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000770:	2200      	movs	r2, #0
 8000772:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
 8000774:	4b19      	ldr	r3, [pc, #100]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000776:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800077a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800077c:	4b17      	ldr	r3, [pc, #92]	@ (80007dc <MX_SAI2_Init+0xa8>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000782:	4b16      	ldr	r3, [pc, #88]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000788:	4b14      	ldr	r3, [pc, #80]	@ (80007dc <MX_SAI2_Init+0xa8>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.FrameInit.FrameLength = 64;
 800078e:	4b13      	ldr	r3, [pc, #76]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000790:	2240      	movs	r2, #64	@ 0x40
 8000792:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8000794:	4b11      	ldr	r3, [pc, #68]	@ (80007dc <MX_SAI2_Init+0xa8>)
 8000796:	2220      	movs	r2, #32
 8000798:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800079a:	4b10      	ldr	r3, [pc, #64]	@ (80007dc <MX_SAI2_Init+0xa8>)
 800079c:	2200      	movs	r2, #0
 800079e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80007a0:	4b0e      	ldr	r3, [pc, #56]	@ (80007dc <MX_SAI2_Init+0xa8>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <MX_SAI2_Init+0xa8>)
 80007a8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007ac:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 1;
 80007ae:	4b0b      	ldr	r3, [pc, #44]	@ (80007dc <MX_SAI2_Init+0xa8>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80007b4:	4b09      	ldr	r3, [pc, #36]	@ (80007dc <MX_SAI2_Init+0xa8>)
 80007b6:	2280      	movs	r2, #128	@ 0x80
 80007b8:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 80007ba:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <MX_SAI2_Init+0xa8>)
 80007bc:	2202      	movs	r2, #2
 80007be:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000001;
 80007c0:	4b06      	ldr	r3, [pc, #24]	@ (80007dc <MX_SAI2_Init+0xa8>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80007c6:	4805      	ldr	r0, [pc, #20]	@ (80007dc <MX_SAI2_Init+0xa8>)
 80007c8:	f004 f8aa 	bl	8004920 <HAL_SAI_Init>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <MX_SAI2_Init+0xa2>
  {
    Error_Handler();
 80007d2:	f000 fa1f 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	200001e0 	.word	0x200001e0
 80007e0:	40015c24 	.word	0x40015c24

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b13      	ldr	r3, [pc, #76]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 80007ea:	4a14      	ldr	r2, [pc, #80]	@ (800083c <MX_USART3_UART_Init+0x58>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1500000;
 80007ee:	4b12      	ldr	r3, [pc, #72]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 80007f0:	4a13      	ldr	r2, [pc, #76]	@ (8000840 <MX_USART3_UART_Init+0x5c>)
 80007f2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f4:	4b10      	ldr	r3, [pc, #64]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000800:	4b0d      	ldr	r3, [pc, #52]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 8000802:	2200      	movs	r2, #0
 8000804:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8000806:	4b0c      	ldr	r3, [pc, #48]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 8000808:	2208      	movs	r2, #8
 800080a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080c:	4b0a      	ldr	r3, [pc, #40]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000812:	4b09      	ldr	r3, [pc, #36]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 8000814:	2200      	movs	r2, #0
 8000816:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000818:	4b07      	ldr	r3, [pc, #28]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 800081a:	2200      	movs	r2, #0
 800081c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800081e:	4b06      	ldr	r3, [pc, #24]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 8000820:	2200      	movs	r2, #0
 8000822:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000824:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_USART3_UART_Init+0x54>)
 8000826:	f004 fdcf 	bl	80053c8 <HAL_UART_Init>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8000830:	f000 f9f0 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000834:	bf00      	nop
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200002c4 	.word	0x200002c4
 800083c:	40004800 	.word	0x40004800
 8000840:	0016e360 	.word	0x0016e360

08000844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800084a:	4b16      	ldr	r3, [pc, #88]	@ (80008a4 <MX_DMA_Init+0x60>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a15      	ldr	r2, [pc, #84]	@ (80008a4 <MX_DMA_Init+0x60>)
 8000850:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b13      	ldr	r3, [pc, #76]	@ (80008a4 <MX_DMA_Init+0x60>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000862:	4b10      	ldr	r3, [pc, #64]	@ (80008a4 <MX_DMA_Init+0x60>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a0f      	ldr	r2, [pc, #60]	@ (80008a4 <MX_DMA_Init+0x60>)
 8000868:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <MX_DMA_Init+0x60>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	200e      	movs	r0, #14
 8000880:	f000 ff1f 	bl	80016c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000884:	200e      	movs	r0, #14
 8000886:	f000 ff38 	bl	80016fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2039      	movs	r0, #57	@ 0x39
 8000890:	f000 ff17 	bl	80016c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000894:	2039      	movs	r0, #57	@ 0x39
 8000896:	f000 ff30 	bl	80016fa <HAL_NVIC_EnableIRQ>

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b5c      	ldr	r3, [pc, #368]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a5b      	ldr	r2, [pc, #364]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b59      	ldr	r3, [pc, #356]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	61bb      	str	r3, [r7, #24]
 80008d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	4b56      	ldr	r3, [pc, #344]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	4a55      	ldr	r2, [pc, #340]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e2:	4b53      	ldr	r3, [pc, #332]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ea:	617b      	str	r3, [r7, #20]
 80008ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	4b50      	ldr	r3, [pc, #320]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a4f      	ldr	r2, [pc, #316]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b4d      	ldr	r3, [pc, #308]	@ (8000a30 <MX_GPIO_Init+0x188>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	4b4a      	ldr	r3, [pc, #296]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090a:	4a49      	ldr	r2, [pc, #292]	@ (8000a30 <MX_GPIO_Init+0x188>)
 800090c:	f043 0302 	orr.w	r3, r3, #2
 8000910:	6313      	str	r3, [r2, #48]	@ 0x30
 8000912:	4b47      	ldr	r3, [pc, #284]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000916:	f003 0302 	and.w	r3, r3, #2
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800091e:	4b44      	ldr	r3, [pc, #272]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000922:	4a43      	ldr	r2, [pc, #268]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000924:	f043 0310 	orr.w	r3, r3, #16
 8000928:	6313      	str	r3, [r2, #48]	@ 0x30
 800092a:	4b41      	ldr	r3, [pc, #260]	@ (8000a30 <MX_GPIO_Init+0x188>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092e:	f003 0310 	and.w	r3, r3, #16
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	4b3e      	ldr	r3, [pc, #248]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a3d      	ldr	r2, [pc, #244]	@ (8000a30 <MX_GPIO_Init+0x188>)
 800093c:	f043 0308 	orr.w	r3, r3, #8
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b3b      	ldr	r3, [pc, #236]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0308 	and.w	r3, r3, #8
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800094e:	4b38      	ldr	r3, [pc, #224]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	4a37      	ldr	r2, [pc, #220]	@ (8000a30 <MX_GPIO_Init+0x188>)
 8000954:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000958:	6313      	str	r3, [r2, #48]	@ 0x30
 800095a:	4b35      	ldr	r3, [pc, #212]	@ (8000a30 <MX_GPIO_Init+0x188>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	f244 0181 	movw	r1, #16513	@ 0x4081
 800096c:	4831      	ldr	r0, [pc, #196]	@ (8000a34 <MX_GPIO_Init+0x18c>)
 800096e:	f002 fd07 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2140      	movs	r1, #64	@ 0x40
 8000976:	4830      	ldr	r0, [pc, #192]	@ (8000a38 <MX_GPIO_Init+0x190>)
 8000978:	f002 fd02 	bl	8003380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	482a      	ldr	r0, [pc, #168]	@ (8000a3c <MX_GPIO_Init+0x194>)
 8000994:	f002 fb48 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000998:	f244 0381 	movw	r3, #16513	@ 0x4081
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099e:	2301      	movs	r3, #1
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	4820      	ldr	r0, [pc, #128]	@ (8000a34 <MX_GPIO_Init+0x18c>)
 80009b2:	f002 fb39 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009b6:	2340      	movs	r3, #64	@ 0x40
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481a      	ldr	r0, [pc, #104]	@ (8000a38 <MX_GPIO_Init+0x190>)
 80009ce:	f002 fb2b 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009d2:	2380      	movs	r3, #128	@ 0x80
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d6:	2300      	movs	r3, #0
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4814      	ldr	r0, [pc, #80]	@ (8000a38 <MX_GPIO_Init+0x190>)
 80009e6:	f002 fb1f 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009ea:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009fc:	230a      	movs	r3, #10
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480e      	ldr	r0, [pc, #56]	@ (8000a40 <MX_GPIO_Init+0x198>)
 8000a08:	f002 fb0e 	bl	8003028 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <MX_GPIO_Init+0x198>)
 8000a22:	f002 fb01 	bl	8003028 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	@ 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40021800 	.word	0x40021800
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	40020000 	.word	0x40020000

08000a44 <HAL_SAI_RxHalfCpltCallback>:
}


*/

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
    uint8_t* tx_buf = audio_out_buffer[current_uart_buf];
 8000a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000afc <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	461a      	mov	r2, r3
 8000a54:	4613      	mov	r3, r2
 8000a56:	005b      	lsls	r3, r3, #1
 8000a58:	4413      	add	r3, r2
 8000a5a:	025b      	lsls	r3, r3, #9
 8000a5c:	4a28      	ldr	r2, [pc, #160]	@ (8000b00 <HAL_SAI_RxHalfCpltCallback+0xbc>)
 8000a5e:	4413      	add	r3, r2
 8000a60:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < AUDIO_BUFF_SIZE / 2; i++) {
 8000a62:	2300      	movs	r3, #0
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	e02b      	b.n	8000ac0 <HAL_SAI_RxHalfCpltCallback+0x7c>
        tx_buf[i * 3 + 2] = (uint8_t)(pAudBuf[i] >> 16);
 8000a68:	4a26      	ldr	r2, [pc, #152]	@ (8000b04 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a70:	0c19      	lsrs	r1, r3, #16
 8000a72:	68fa      	ldr	r2, [r7, #12]
 8000a74:	4613      	mov	r3, r2
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	4413      	add	r3, r2
 8000a7a:	3302      	adds	r3, #2
 8000a7c:	68ba      	ldr	r2, [r7, #8]
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2ca      	uxtb	r2, r1
 8000a82:	701a      	strb	r2, [r3, #0]
        tx_buf[i * 3 + 1] = (uint8_t)(pAudBuf[i] >> 8);
 8000a84:	4a1f      	ldr	r2, [pc, #124]	@ (8000b04 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a8c:	0a19      	lsrs	r1, r3, #8
 8000a8e:	68fa      	ldr	r2, [r7, #12]
 8000a90:	4613      	mov	r3, r2
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	4413      	add	r3, r2
 8000a96:	3301      	adds	r3, #1
 8000a98:	68ba      	ldr	r2, [r7, #8]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b2ca      	uxtb	r2, r1
 8000a9e:	701a      	strb	r2, [r3, #0]
        tx_buf[i * 3 + 0] = (uint8_t)(pAudBuf[i]);
 8000aa0:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4613      	mov	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	4413      	add	r3, r2
 8000ab0:	461a      	mov	r2, r3
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b2ca      	uxtb	r2, r1
 8000ab8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AUDIO_BUFF_SIZE / 2; i++) {
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	3301      	adds	r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ac6:	dbcf      	blt.n	8000a68 <HAL_SAI_RxHalfCpltCallback+0x24>
    }

    if (!uart_dma_busy) {
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b08 <HAL_SAI_RxHalfCpltCallback+0xc4>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d110      	bne.n	8000af4 <HAL_SAI_RxHalfCpltCallback+0xb0>
        uart_dma_busy = 1;
 8000ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b08 <HAL_SAI_RxHalfCpltCallback+0xc4>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart3, tx_buf, AUDIO_UART_CHUNK);
 8000ad8:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000adc:	68b9      	ldr	r1, [r7, #8]
 8000ade:	480b      	ldr	r0, [pc, #44]	@ (8000b0c <HAL_SAI_RxHalfCpltCallback+0xc8>)
 8000ae0:	f004 fcc0 	bl	8005464 <HAL_UART_Transmit_DMA>
        current_uart_buf ^= 1;  // Toggle buffer (0 → 1, 1 → 0)
 8000ae4:	4b05      	ldr	r3, [pc, #20]	@ (8000afc <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	4b02      	ldr	r3, [pc, #8]	@ (8000afc <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8000af2:	701a      	strb	r2, [r3, #0]
    }
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	20001fac 	.word	0x20001fac
 8000b00:	200013ac 	.word	0x200013ac
 8000b04:	200003ac 	.word	0x200003ac
 8000b08:	20001fad 	.word	0x20001fad
 8000b0c:	200002c4 	.word	0x200002c4

08000b10 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
    uint8_t* tx_buf = audio_out_buffer[current_uart_buf];
 8000b18:	4b2e      	ldr	r3, [pc, #184]	@ (8000bd4 <HAL_SAI_RxCpltCallback+0xc4>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4613      	mov	r3, r2
 8000b22:	005b      	lsls	r3, r3, #1
 8000b24:	4413      	add	r3, r2
 8000b26:	025b      	lsls	r3, r3, #9
 8000b28:	4a2b      	ldr	r2, [pc, #172]	@ (8000bd8 <HAL_SAI_RxCpltCallback+0xc8>)
 8000b2a:	4413      	add	r3, r2
 8000b2c:	613b      	str	r3, [r7, #16]

    for (int i = AUDIO_BUFF_SIZE / 2; i < AUDIO_BUFF_SIZE; i++) {
 8000b2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	e02f      	b.n	8000b96 <HAL_SAI_RxCpltCallback+0x86>
        int j = i - AUDIO_BUFF_SIZE / 2;
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000b3c:	60fb      	str	r3, [r7, #12]
        tx_buf[j * 3 + 2] = (uint8_t)(pAudBuf[i] >> 16);
 8000b3e:	4a27      	ldr	r2, [pc, #156]	@ (8000bdc <HAL_SAI_RxCpltCallback+0xcc>)
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b46:	0c19      	lsrs	r1, r3, #16
 8000b48:	68fa      	ldr	r2, [r7, #12]
 8000b4a:	4613      	mov	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	4413      	add	r3, r2
 8000b50:	3302      	adds	r3, #2
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	4413      	add	r3, r2
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
        tx_buf[j * 3 + 1] = (uint8_t)(pAudBuf[i] >> 8);
 8000b5a:	4a20      	ldr	r2, [pc, #128]	@ (8000bdc <HAL_SAI_RxCpltCallback+0xcc>)
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b62:	0a19      	lsrs	r1, r3, #8
 8000b64:	68fa      	ldr	r2, [r7, #12]
 8000b66:	4613      	mov	r3, r2
 8000b68:	005b      	lsls	r3, r3, #1
 8000b6a:	4413      	add	r3, r2
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	4413      	add	r3, r2
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
        tx_buf[j * 3 + 0] = (uint8_t)(pAudBuf[i]);
 8000b76:	4a19      	ldr	r2, [pc, #100]	@ (8000bdc <HAL_SAI_RxCpltCallback+0xcc>)
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	4613      	mov	r3, r2
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	4413      	add	r3, r2
 8000b86:	461a      	mov	r2, r3
 8000b88:	693b      	ldr	r3, [r7, #16]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	b2ca      	uxtb	r2, r1
 8000b8e:	701a      	strb	r2, [r3, #0]
    for (int i = AUDIO_BUFF_SIZE / 2; i < AUDIO_BUFF_SIZE; i++) {
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	3301      	adds	r3, #1
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b9c:	dbcb      	blt.n	8000b36 <HAL_SAI_RxCpltCallback+0x26>
    }

    if (!uart_dma_busy) {
 8000b9e:	4b10      	ldr	r3, [pc, #64]	@ (8000be0 <HAL_SAI_RxCpltCallback+0xd0>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d110      	bne.n	8000bca <HAL_SAI_RxCpltCallback+0xba>
        uart_dma_busy = 1;
 8000ba8:	4b0d      	ldr	r3, [pc, #52]	@ (8000be0 <HAL_SAI_RxCpltCallback+0xd0>)
 8000baa:	2201      	movs	r2, #1
 8000bac:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart3, tx_buf, AUDIO_UART_CHUNK);
 8000bae:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000bb2:	6939      	ldr	r1, [r7, #16]
 8000bb4:	480b      	ldr	r0, [pc, #44]	@ (8000be4 <HAL_SAI_RxCpltCallback+0xd4>)
 8000bb6:	f004 fc55 	bl	8005464 <HAL_UART_Transmit_DMA>
        current_uart_buf ^= 1;  // Toggle buffer
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_SAI_RxCpltCallback+0xc4>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	f083 0301 	eor.w	r3, r3, #1
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4b03      	ldr	r3, [pc, #12]	@ (8000bd4 <HAL_SAI_RxCpltCallback+0xc4>)
 8000bc8:	701a      	strb	r2, [r3, #0]
    }
}
 8000bca:	bf00      	nop
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	20001fac 	.word	0x20001fac
 8000bd8:	200013ac 	.word	0x200013ac
 8000bdc:	200003ac 	.word	0x200003ac
 8000be0:	20001fad 	.word	0x20001fad
 8000be4:	200002c4 	.word	0x200002c4

08000be8 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a05      	ldr	r2, [pc, #20]	@ (8000c0c <HAL_UART_TxCpltCallback+0x24>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d102      	bne.n	8000c00 <HAL_UART_TxCpltCallback+0x18>
        uart_dma_busy = 0;
 8000bfa:	4b05      	ldr	r3, [pc, #20]	@ (8000c10 <HAL_UART_TxCpltCallback+0x28>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	701a      	strb	r2, [r3, #0]
    }
}
 8000c00:	bf00      	nop
 8000c02:	370c      	adds	r7, #12
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	40004800 	.word	0x40004800
 8000c10:	20001fad 	.word	0x20001fad

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c32:	4b0c      	ldr	r3, [pc, #48]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800

08000c68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ae      	sub	sp, #184	@ 0xb8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2290      	movs	r2, #144	@ 0x90
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f00c feb2 	bl	800d9f2 <memset>
  if(huart->Instance==USART3)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a3d      	ldr	r2, [pc, #244]	@ (8000d88 <HAL_UART_MspInit+0x120>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d173      	bne.n	8000d80 <HAL_UART_MspInit+0x118>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c9c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 f8a6 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000cb2:	f7ff ffaf 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cb6:	4b35      	ldr	r3, [pc, #212]	@ (8000d8c <HAL_UART_MspInit+0x124>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cba:	4a34      	ldr	r2, [pc, #208]	@ (8000d8c <HAL_UART_MspInit+0x124>)
 8000cbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc2:	4b32      	ldr	r3, [pc, #200]	@ (8000d8c <HAL_UART_MspInit+0x124>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cce:	4b2f      	ldr	r3, [pc, #188]	@ (8000d8c <HAL_UART_MspInit+0x124>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd2:	4a2e      	ldr	r2, [pc, #184]	@ (8000d8c <HAL_UART_MspInit+0x124>)
 8000cd4:	f043 0308 	orr.w	r3, r3, #8
 8000cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cda:	4b2c      	ldr	r3, [pc, #176]	@ (8000d8c <HAL_UART_MspInit+0x124>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d00:	2307      	movs	r3, #7
 8000d02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4820      	ldr	r0, [pc, #128]	@ (8000d90 <HAL_UART_MspInit+0x128>)
 8000d0e:	f002 f98b 	bl	8003028 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000d12:	4b20      	ldr	r3, [pc, #128]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d14:	4a20      	ldr	r2, [pc, #128]	@ (8000d98 <HAL_UART_MspInit+0x130>)
 8000d16:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000d18:	4b1e      	ldr	r3, [pc, #120]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d1a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d20:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d22:	2240      	movs	r2, #64	@ 0x40
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2c:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d32:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d34:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000d40:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d46:	4b13      	ldr	r3, [pc, #76]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d48:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d4c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d4e:	4b11      	ldr	r3, [pc, #68]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000d54:	480f      	ldr	r0, [pc, #60]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d56:	f000 fceb 	bl	8001730 <HAL_DMA_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000d60:	f7ff ff58 	bl	8000c14 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d68:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d94 <HAL_UART_MspInit+0x12c>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2027      	movs	r0, #39	@ 0x27
 8000d76:	f000 fca4 	bl	80016c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d7a:	2027      	movs	r0, #39	@ 0x27
 8000d7c:	f000 fcbd 	bl	80016fa <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d80:	bf00      	nop
 8000d82:	37b8      	adds	r7, #184	@ 0xb8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40004800 	.word	0x40004800
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	40020c00 	.word	0x40020c00
 8000d94:	2000034c 	.word	0x2000034c
 8000d98:	40026058 	.word	0x40026058

08000d9c <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2290      	movs	r2, #144	@ 0x90
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00c fe20 	bl	800d9f2 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a5b      	ldr	r2, [pc, #364]	@ (8000f24 <HAL_SAI_MspInit+0x188>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	f040 80af 	bne.w	8000f1c <HAL_SAI_MspInit+0x180>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000dbe:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dc2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 172;
 8000dc4:	23ac      	movs	r3, #172	@ 0xac
 8000dc6:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 7;
 8000dcc:	2307      	movs	r3, #7
 8000dce:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAIDivQ = 6;
 8000dd4:	2306      	movs	r3, #6
 8000dd6:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000de0:	f107 030c 	add.w	r3, r7, #12
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 f807 	bl	8003df8 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_SAI_MspInit+0x58>
    {
      Error_Handler();
 8000df0:	f7ff ff10 	bl	8000c14 <Error_Handler>
    }

      if (SAI2_client == 0)
 8000df4:	4b4c      	ldr	r3, [pc, #304]	@ (8000f28 <HAL_SAI_MspInit+0x18c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d113      	bne.n	8000e24 <HAL_SAI_MspInit+0x88>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000dfc:	4b4b      	ldr	r3, [pc, #300]	@ (8000f2c <HAL_SAI_MspInit+0x190>)
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e00:	4a4a      	ldr	r2, [pc, #296]	@ (8000f2c <HAL_SAI_MspInit+0x190>)
 8000e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e06:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e08:	4b48      	ldr	r3, [pc, #288]	@ (8000f2c <HAL_SAI_MspInit+0x190>)
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e10:	60bb      	str	r3, [r7, #8]
 8000e12:	68bb      	ldr	r3, [r7, #8]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2100      	movs	r1, #0
 8000e18:	205b      	movs	r0, #91	@ 0x5b
 8000e1a:	f000 fc52 	bl	80016c2 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e1e:	205b      	movs	r0, #91	@ 0x5b
 8000e20:	f000 fc6b 	bl	80016fa <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000e24:	4b40      	ldr	r3, [pc, #256]	@ (8000f28 <HAL_SAI_MspInit+0x18c>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	4a3f      	ldr	r2, [pc, #252]	@ (8000f28 <HAL_SAI_MspInit+0x18c>)
 8000e2c:	6013      	str	r3, [r2, #0]
    /**SAI2_B_Block_B GPIO Configuration
    PC0     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PE12     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e34:	2302      	movs	r3, #2
 8000e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8000e46:	2308      	movs	r3, #8
 8000e48:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e4c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e50:	4619      	mov	r1, r3
 8000e52:	4837      	ldr	r0, [pc, #220]	@ (8000f30 <HAL_SAI_MspInit+0x194>)
 8000e54:	f002 f8e8 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5e:	2302      	movs	r3, #2
 8000e60:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e70:	230a      	movs	r3, #10
 8000e72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	482d      	ldr	r0, [pc, #180]	@ (8000f34 <HAL_SAI_MspInit+0x198>)
 8000e7e:	f002 f8d3 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	2300      	movs	r3, #0
 8000e92:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e96:	2300      	movs	r3, #0
 8000e98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e9c:	230a      	movs	r3, #10
 8000e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ea2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4823      	ldr	r0, [pc, #140]	@ (8000f38 <HAL_SAI_MspInit+0x19c>)
 8000eaa:	f002 f8bd 	bl	8003028 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8000eae:	4b23      	ldr	r3, [pc, #140]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000eb0:	4a23      	ldr	r2, [pc, #140]	@ (8000f40 <HAL_SAI_MspInit+0x1a4>)
 8000eb2:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8000eb4:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000eb6:	f04f 52a0 	mov.w	r2, #335544320	@ 0x14000000
 8000eba:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000eca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000ece:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000ed2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ed6:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ed8:	4b18      	ldr	r3, [pc, #96]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000eda:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000ede:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000ee0:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000ee2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ee6:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eee:	4b13      	ldr	r3, [pc, #76]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000ef4:	4811      	ldr	r0, [pc, #68]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000ef6:	f000 fc1b 	bl	8001730 <HAL_DMA_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_SAI_MspInit+0x168>
    {
      Error_Handler();
 8000f00:	f7ff fe88 	bl	8000c14 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4a0d      	ldr	r2, [pc, #52]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000f08:	671a      	str	r2, [r3, #112]	@ 0x70
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a0a      	ldr	r2, [pc, #40]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000f14:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f16:	4a09      	ldr	r2, [pc, #36]	@ (8000f3c <HAL_SAI_MspInit+0x1a0>)
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8000f1c:	bf00      	nop
 8000f1e:	37b0      	adds	r7, #176	@ 0xb0
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40015c24 	.word	0x40015c24
 8000f28:	20001fb0 	.word	0x20001fb0
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020000 	.word	0x40020000
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	20000264 	.word	0x20000264
 8000f40:	40026428 	.word	0x40026428

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 fa73 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
	...

08000fa4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <DMA1_Stream3_IRQHandler+0x10>)
 8000faa:	f000 fd61 	bl	8001a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000034c 	.word	0x2000034c

08000fb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <USART3_IRQHandler+0x10>)
 8000fbe:	f004 facd 	bl	800555c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200002c4 	.word	0x200002c4

08000fcc <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <DMA2_Stream1_IRQHandler+0x10>)
 8000fd2:	f000 fd4d 	bl	8001a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000264 	.word	0x20000264

08000fe0 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8000fe4:	4802      	ldr	r0, [pc, #8]	@ (8000ff0 <SAI2_IRQHandler+0x10>)
 8000fe6:	f003 ff2b 	bl	8004e40 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200001e0 	.word	0x200001e0

08000ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return 1;
 8000ff8:	2301      	movs	r3, #1
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <_kill>:

int _kill(int pid, int sig)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800100e:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <_kill+0x20>)
 8001010:	2216      	movs	r2, #22
 8001012:	601a      	str	r2, [r3, #0]
  return -1;
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001018:	4618      	mov	r0, r3
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20009734 	.word	0x20009734

08001028 <_exit>:

void _exit (int status)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001030:	f04f 31ff 	mov.w	r1, #4294967295
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ffe5 	bl	8001004 <_kill>
  while (1) {}    /* Make sure we hang here */
 800103a:	bf00      	nop
 800103c:	e7fd      	b.n	800103a <_exit+0x12>

0800103e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e00a      	b.n	8001066 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001050:	f3af 8000 	nop.w
 8001054:	4601      	mov	r1, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	60ba      	str	r2, [r7, #8]
 800105c:	b2ca      	uxtb	r2, r1
 800105e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	3301      	adds	r3, #1
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	429a      	cmp	r2, r3
 800106c:	dbf0      	blt.n	8001050 <_read+0x12>
  }

  return len;
 800106e:	687b      	ldr	r3, [r7, #4]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b086      	sub	sp, #24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001084:	2300      	movs	r3, #0
 8001086:	617b      	str	r3, [r7, #20]
 8001088:	e009      	b.n	800109e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	1c5a      	adds	r2, r3, #1
 800108e:	60ba      	str	r2, [r7, #8]
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	4618      	mov	r0, r3
 8001094:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3301      	adds	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	dbf1      	blt.n	800108a <_write+0x12>
  }
  return len;
 80010a6:	687b      	ldr	r3, [r7, #4]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <_close>:

int _close(int file)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010bc:	4618      	mov	r0, r3
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010d8:	605a      	str	r2, [r3, #4]
  return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr

080010e8 <_isatty>:

int _isatty(int file)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010f0:	2301      	movs	r3, #1
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010fe:	b480      	push	{r7}
 8001100:	b085      	sub	sp, #20
 8001102:	af00      	add	r7, sp, #0
 8001104:	60f8      	str	r0, [r7, #12]
 8001106:	60b9      	str	r1, [r7, #8]
 8001108:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001120:	4a14      	ldr	r2, [pc, #80]	@ (8001174 <_sbrk+0x5c>)
 8001122:	4b15      	ldr	r3, [pc, #84]	@ (8001178 <_sbrk+0x60>)
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800112c:	4b13      	ldr	r3, [pc, #76]	@ (800117c <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d102      	bne.n	800113a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001134:	4b11      	ldr	r3, [pc, #68]	@ (800117c <_sbrk+0x64>)
 8001136:	4a12      	ldr	r2, [pc, #72]	@ (8001180 <_sbrk+0x68>)
 8001138:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113a:	4b10      	ldr	r3, [pc, #64]	@ (800117c <_sbrk+0x64>)
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4413      	add	r3, r2
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	429a      	cmp	r2, r3
 8001146:	d205      	bcs.n	8001154 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <_sbrk+0x6c>)
 800114a:	220c      	movs	r2, #12
 800114c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800114e:	f04f 33ff 	mov.w	r3, #4294967295
 8001152:	e009      	b.n	8001168 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001154:	4b09      	ldr	r3, [pc, #36]	@ (800117c <_sbrk+0x64>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800115a:	4b08      	ldr	r3, [pc, #32]	@ (800117c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	4a06      	ldr	r2, [pc, #24]	@ (800117c <_sbrk+0x64>)
 8001164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001166:	68fb      	ldr	r3, [r7, #12]
}
 8001168:	4618      	mov	r0, r3
 800116a:	371c      	adds	r7, #28
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	20080000 	.word	0x20080000
 8001178:	00000400 	.word	0x00000400
 800117c:	20001fb4 	.word	0x20001fb4
 8001180:	20009748 	.word	0x20009748
 8001184:	20009734 	.word	0x20009734

08001188 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <SystemInit+0x20>)
 800118e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001192:	4a05      	ldr	r2, [pc, #20]	@ (80011a8 <SystemInit+0x20>)
 8001194:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001198:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	e000ed00 	.word	0xe000ed00

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011b0:	f7ff ffea 	bl	8001188 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011b4:	480c      	ldr	r0, [pc, #48]	@ (80011e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011b6:	490d      	ldr	r1, [pc, #52]	@ (80011ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011bc:	e002      	b.n	80011c4 <LoopCopyDataInit>

080011be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011c2:	3304      	adds	r3, #4

080011c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c8:	d3f9      	bcc.n	80011be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011ca:	4a0a      	ldr	r2, [pc, #40]	@ (80011f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011cc:	4c0a      	ldr	r4, [pc, #40]	@ (80011f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011d0:	e001      	b.n	80011d6 <LoopFillZerobss>

080011d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d4:	3204      	adds	r2, #4

080011d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d8:	d3fb      	bcc.n	80011d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011da:	f00c fc59 	bl	800da90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fa15 	bl	800060c <main>
  bx  lr    
 80011e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80011f0:	08010204 	.word	0x08010204
  ldr r2, =_sbss
 80011f4:	200001c4 	.word	0x200001c4
  ldr r4, =_ebss
 80011f8:	20009744 	.word	0x20009744

080011fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC_IRQHandler>

080011fe <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80011fe:	b480      	push	{r7}
 8001200:	b083      	sub	sp, #12
 8001202:	af00      	add	r7, sp, #0
 8001204:	6078      	str	r0, [r7, #4]
 8001206:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d00b      	beq.n	8001226 <LAN8742_RegisterBusIO+0x28>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d007      	beq.n	8001226 <LAN8742_RegisterBusIO+0x28>
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d003      	beq.n	8001226 <LAN8742_RegisterBusIO+0x28>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	691b      	ldr	r3, [r3, #16]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d102      	bne.n	800122c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001226:	f04f 33ff 	mov.w	r3, #4294967295
 800122a:	e014      	b.n	8001256 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr

08001262 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8001262:	b580      	push	{r7, lr}
 8001264:	b086      	sub	sp, #24
 8001266:	af00      	add	r7, sp, #0
 8001268:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	2300      	movs	r3, #0
 8001270:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d139      	bne.n	80012f2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d002      	beq.n	800128c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2220      	movs	r2, #32
 8001290:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e01c      	b.n	80012d2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	2112      	movs	r1, #18
 80012a2:	6978      	ldr	r0, [r7, #20]
 80012a4:	4798      	blx	r3
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	da03      	bge.n	80012b4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 80012ac:	f06f 0304 	mvn.w	r3, #4
 80012b0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80012b2:	e00b      	b.n	80012cc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d105      	bne.n	80012cc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
         break;
 80012ca:	e005      	b.n	80012d8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	3301      	adds	r3, #1
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	2b1f      	cmp	r3, #31
 80012d6:	d9df      	bls.n	8001298 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b1f      	cmp	r3, #31
 80012de:	d902      	bls.n	80012e6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80012e0:	f06f 0302 	mvn.w	r3, #2
 80012e4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d102      	bne.n	80012f2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2201      	movs	r2, #1
 80012f0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80012f2:	693b      	ldr	r3, [r7, #16]
 }
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	6810      	ldr	r0, [r2, #0]
 8001310:	f107 020c 	add.w	r2, r7, #12
 8001314:	2101      	movs	r1, #1
 8001316:	4798      	blx	r3
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	da02      	bge.n	8001324 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800131e:	f06f 0304 	mvn.w	r3, #4
 8001322:	e06e      	b.n	8001402 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	687a      	ldr	r2, [r7, #4]
 800132a:	6810      	ldr	r0, [r2, #0]
 800132c:	f107 020c 	add.w	r2, r7, #12
 8001330:	2101      	movs	r1, #1
 8001332:	4798      	blx	r3
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	da02      	bge.n	8001340 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800133a:	f06f 0304 	mvn.w	r3, #4
 800133e:	e060      	b.n	8001402 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800134a:	2301      	movs	r3, #1
 800134c:	e059      	b.n	8001402 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	687a      	ldr	r2, [r7, #4]
 8001354:	6810      	ldr	r0, [r2, #0]
 8001356:	f107 020c 	add.w	r2, r7, #12
 800135a:	2100      	movs	r1, #0
 800135c:	4798      	blx	r3
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	da02      	bge.n	800136a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001364:	f06f 0304 	mvn.w	r3, #4
 8001368:	e04b      	b.n	8001402 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d11b      	bne.n	80013ac <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d006      	beq.n	800138c <LAN8742_GetLinkState+0x90>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001388:	2302      	movs	r3, #2
 800138a:	e03a      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001396:	2303      	movs	r3, #3
 8001398:	e033      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013a4:	2304      	movs	r3, #4
 80013a6:	e02c      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013a8:	2305      	movs	r3, #5
 80013aa:	e02a      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	695b      	ldr	r3, [r3, #20]
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	6810      	ldr	r0, [r2, #0]
 80013b4:	f107 020c 	add.w	r2, r7, #12
 80013b8:	211f      	movs	r1, #31
 80013ba:	4798      	blx	r3
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	da02      	bge.n	80013c8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80013c2:	f06f 0304 	mvn.w	r3, #4
 80013c6:	e01c      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80013d2:	2306      	movs	r3, #6
 80013d4:	e015      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f003 031c 	and.w	r3, r3, #28
 80013dc:	2b18      	cmp	r3, #24
 80013de:	d101      	bne.n	80013e4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013e0:	2302      	movs	r3, #2
 80013e2:	e00e      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 031c 	and.w	r3, r3, #28
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d101      	bne.n	80013f2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e007      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f003 031c 	and.w	r3, r3, #28
 80013f8:	2b14      	cmp	r3, #20
 80013fa:	d101      	bne.n	8001400 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013fc:	2304      	movs	r3, #4
 80013fe:	e000      	b.n	8001402 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001400:	2305      	movs	r3, #5
    }
  }
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}

0800140a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140a:	b580      	push	{r7, lr}
 800140c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800140e:	2003      	movs	r0, #3
 8001410:	f000 f94c 	bl	80016ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001414:	2000      	movs	r0, #0
 8001416:	f000 f805 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800141a:	f7ff fc01 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
}
 8001420:	4618      	mov	r0, r3
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	@ (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f967 	bl	8001716 <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f92f 	bl	80016c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	@ (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000000 	.word	0x20000000
 800147c:	20000008 	.word	0x20000008
 8001480:	20000004 	.word	0x20000004

08001484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	@ (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000008 	.word	0x20000008
 80014a8:	20001fb8 	.word	0x20001fb8

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	@ (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	20001fb8 	.word	0x20001fb8

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff ffee 	bl	80014ac <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ea:	bf00      	nop
 80014ec:	f7ff ffde 	bl	80014ac <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	20000008 	.word	0x20000008

0800150c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0307 	and.w	r3, r3, #7
 800151a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800151c:	4b0b      	ldr	r3, [pc, #44]	@ (800154c <__NVIC_SetPriorityGrouping+0x40>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001528:	4013      	ands	r3, r2
 800152a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001534:	4b06      	ldr	r3, [pc, #24]	@ (8001550 <__NVIC_SetPriorityGrouping+0x44>)
 8001536:	4313      	orrs	r3, r2
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	@ (800154c <__NVIC_SetPriorityGrouping+0x40>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00
 8001550:	05fa0000 	.word	0x05fa0000

08001554 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001558:	4b04      	ldr	r3, [pc, #16]	@ (800156c <__NVIC_GetPriorityGrouping+0x18>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	0a1b      	lsrs	r3, r3, #8
 800155e:	f003 0307 	and.w	r3, r3, #7
}
 8001562:	4618      	mov	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	e000ed00 	.word	0xe000ed00

08001570 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	2b00      	cmp	r3, #0
 8001580:	db0b      	blt.n	800159a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	f003 021f 	and.w	r2, r3, #31
 8001588:	4907      	ldr	r1, [pc, #28]	@ (80015a8 <__NVIC_EnableIRQ+0x38>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	095b      	lsrs	r3, r3, #5
 8001590:	2001      	movs	r0, #1
 8001592:	fa00 f202 	lsl.w	r2, r0, r2
 8001596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	e000e100 	.word	0xe000e100

080015ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	4603      	mov	r3, r0
 80015b4:	6039      	str	r1, [r7, #0]
 80015b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	db0a      	blt.n	80015d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	490c      	ldr	r1, [pc, #48]	@ (80015f8 <__NVIC_SetPriority+0x4c>)
 80015c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ca:	0112      	lsls	r2, r2, #4
 80015cc:	b2d2      	uxtb	r2, r2
 80015ce:	440b      	add	r3, r1
 80015d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d4:	e00a      	b.n	80015ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	4908      	ldr	r1, [pc, #32]	@ (80015fc <__NVIC_SetPriority+0x50>)
 80015dc:	79fb      	ldrb	r3, [r7, #7]
 80015de:	f003 030f 	and.w	r3, r3, #15
 80015e2:	3b04      	subs	r3, #4
 80015e4:	0112      	lsls	r2, r2, #4
 80015e6:	b2d2      	uxtb	r2, r2
 80015e8:	440b      	add	r3, r1
 80015ea:	761a      	strb	r2, [r3, #24]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	e000e100 	.word	0xe000e100
 80015fc:	e000ed00 	.word	0xe000ed00

08001600 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001600:	b480      	push	{r7}
 8001602:	b089      	sub	sp, #36	@ 0x24
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	f1c3 0307 	rsb	r3, r3, #7
 800161a:	2b04      	cmp	r3, #4
 800161c:	bf28      	it	cs
 800161e:	2304      	movcs	r3, #4
 8001620:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	3304      	adds	r3, #4
 8001626:	2b06      	cmp	r3, #6
 8001628:	d902      	bls.n	8001630 <NVIC_EncodePriority+0x30>
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	3b03      	subs	r3, #3
 800162e:	e000      	b.n	8001632 <NVIC_EncodePriority+0x32>
 8001630:	2300      	movs	r3, #0
 8001632:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001634:	f04f 32ff 	mov.w	r2, #4294967295
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	401a      	ands	r2, r3
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001648:	f04f 31ff 	mov.w	r1, #4294967295
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	fa01 f303 	lsl.w	r3, r1, r3
 8001652:	43d9      	mvns	r1, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001658:	4313      	orrs	r3, r2
         );
}
 800165a:	4618      	mov	r0, r3
 800165c:	3724      	adds	r7, #36	@ 0x24
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	3b01      	subs	r3, #1
 8001674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001678:	d301      	bcc.n	800167e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800167a:	2301      	movs	r3, #1
 800167c:	e00f      	b.n	800169e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167e:	4a0a      	ldr	r2, [pc, #40]	@ (80016a8 <SysTick_Config+0x40>)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3b01      	subs	r3, #1
 8001684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001686:	210f      	movs	r1, #15
 8001688:	f04f 30ff 	mov.w	r0, #4294967295
 800168c:	f7ff ff8e 	bl	80015ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001690:	4b05      	ldr	r3, [pc, #20]	@ (80016a8 <SysTick_Config+0x40>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001696:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <SysTick_Config+0x40>)
 8001698:	2207      	movs	r2, #7
 800169a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	e000e010 	.word	0xe000e010

080016ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b082      	sub	sp, #8
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff ff29 	bl	800150c <__NVIC_SetPriorityGrouping>
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}

080016c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b086      	sub	sp, #24
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	4603      	mov	r3, r0
 80016ca:	60b9      	str	r1, [r7, #8]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d4:	f7ff ff3e 	bl	8001554 <__NVIC_GetPriorityGrouping>
 80016d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	68b9      	ldr	r1, [r7, #8]
 80016de:	6978      	ldr	r0, [r7, #20]
 80016e0:	f7ff ff8e 	bl	8001600 <NVIC_EncodePriority>
 80016e4:	4602      	mov	r2, r0
 80016e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff ff5d 	bl	80015ac <__NVIC_SetPriority>
}
 80016f2:	bf00      	nop
 80016f4:	3718      	adds	r7, #24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	4603      	mov	r3, r0
 8001702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001708:	4618      	mov	r0, r3
 800170a:	f7ff ff31 	bl	8001570 <__NVIC_EnableIRQ>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ffa2 	bl	8001668 <SysTick_Config>
 8001724:	4603      	mov	r3, r0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800173c:	f7ff feb6 	bl	80014ac <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e099      	b.n	8001880 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0201 	bic.w	r2, r2, #1
 800176a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800176c:	e00f      	b.n	800178e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800176e:	f7ff fe9d 	bl	80014ac <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b05      	cmp	r3, #5
 800177a:	d908      	bls.n	800178e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2220      	movs	r2, #32
 8001780:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2203      	movs	r2, #3
 8001786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e078      	b.n	8001880 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d1e8      	bne.n	800176e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	4b38      	ldr	r3, [pc, #224]	@ (8001888 <HAL_DMA_Init+0x158>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685a      	ldr	r2, [r3, #4]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a1b      	ldr	r3, [r3, #32]
 80017d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017da:	697a      	ldr	r2, [r7, #20]
 80017dc:	4313      	orrs	r3, r2
 80017de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d107      	bne.n	80017f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	4313      	orrs	r3, r2
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f023 0307 	bic.w	r3, r3, #7
 800180e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	2b04      	cmp	r3, #4
 8001820:	d117      	bne.n	8001852 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00e      	beq.n	8001852 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f000 fb09 	bl	8001e4c <DMA_CheckFifoParam>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d008      	beq.n	8001852 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2240      	movs	r2, #64	@ 0x40
 8001844:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800184e:	2301      	movs	r3, #1
 8001850:	e016      	b.n	8001880 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	697a      	ldr	r2, [r7, #20]
 8001858:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f000 fac0 	bl	8001de0 <DMA_CalcBaseAndBitshift>
 8001860:	4603      	mov	r3, r0
 8001862:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001868:	223f      	movs	r2, #63	@ 0x3f
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	e010803f 	.word	0xe010803f

0800188c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
 8001898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800189a:	2300      	movs	r3, #0
 800189c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_DMA_Start_IT+0x26>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e048      	b.n	8001944 <HAL_DMA_Start_IT+0xb8>
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d137      	bne.n	8001936 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2202      	movs	r2, #2
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2200      	movs	r2, #0
 80018d2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f000 fa52 	bl	8001d84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018e4:	223f      	movs	r2, #63	@ 0x3f
 80018e6:	409a      	lsls	r2, r3
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f042 0216 	orr.w	r2, r2, #22
 80018fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	695a      	ldr	r2, [r3, #20]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800190a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001910:	2b00      	cmp	r3, #0
 8001912:	d007      	beq.n	8001924 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0208 	orr.w	r2, r2, #8
 8001922:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f042 0201 	orr.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	e005      	b.n	8001942 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800193e:	2302      	movs	r3, #2
 8001940:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001942:	7dfb      	ldrb	r3, [r7, #23]
}
 8001944:	4618      	mov	r0, r3
 8001946:	3718      	adds	r7, #24
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001958:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800195a:	f7ff fda7 	bl	80014ac <HAL_GetTick>
 800195e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001966:	b2db      	uxtb	r3, r3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d008      	beq.n	800197e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2280      	movs	r2, #128	@ 0x80
 8001970:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e052      	b.n	8001a24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f022 0216 	bic.w	r2, r2, #22
 800198c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695a      	ldr	r2, [r3, #20]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800199c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <HAL_DMA_Abort+0x62>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d007      	beq.n	80019be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 0208 	bic.w	r2, r2, #8
 80019bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0201 	bic.w	r2, r2, #1
 80019cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019ce:	e013      	b.n	80019f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019d0:	f7ff fd6c 	bl	80014ac <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b05      	cmp	r3, #5
 80019dc:	d90c      	bls.n	80019f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2220      	movs	r2, #32
 80019e2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2203      	movs	r2, #3
 80019e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e015      	b.n	8001a24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e4      	bne.n	80019d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a0a:	223f      	movs	r2, #63	@ 0x3f
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a3a:	b2db      	uxtb	r3, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d004      	beq.n	8001a4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2280      	movs	r2, #128	@ 0x80
 8001a44:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00c      	b.n	8001a64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2205      	movs	r2, #5
 8001a4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f022 0201 	bic.w	r2, r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001a7c:	4b8e      	ldr	r3, [pc, #568]	@ (8001cb8 <HAL_DMA_IRQHandler+0x248>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a8e      	ldr	r2, [pc, #568]	@ (8001cbc <HAL_DMA_IRQHandler+0x24c>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	0a9b      	lsrs	r3, r3, #10
 8001a88:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a8e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9a:	2208      	movs	r2, #8
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d01a      	beq.n	8001adc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0304 	and.w	r3, r3, #4
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d013      	beq.n	8001adc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0204 	bic.w	r2, r2, #4
 8001ac2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ac8:	2208      	movs	r2, #8
 8001aca:	409a      	lsls	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ad4:	f043 0201 	orr.w	r2, r3, #1
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d012      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d00b      	beq.n	8001b12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001afe:	2201      	movs	r2, #1
 8001b00:	409a      	lsls	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b16:	2204      	movs	r2, #4
 8001b18:	409a      	lsls	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d012      	beq.n	8001b48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00b      	beq.n	8001b48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	2204      	movs	r2, #4
 8001b36:	409a      	lsls	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b40:	f043 0204 	orr.w	r2, r3, #4
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b4c:	2210      	movs	r2, #16
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	4013      	ands	r3, r2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d043      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0308 	and.w	r3, r3, #8
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d03c      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b6a:	2210      	movs	r2, #16
 8001b6c:	409a      	lsls	r2, r3
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d108      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d024      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	4798      	blx	r3
 8001b9e:	e01f      	b.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01b      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
 8001bb0:	e016      	b.n	8001be0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d107      	bne.n	8001bd0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0208 	bic.w	r2, r2, #8
 8001bce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001be4:	2220      	movs	r2, #32
 8001be6:	409a      	lsls	r2, r3
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 808f 	beq.w	8001d10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 8087 	beq.w	8001d10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c06:	2220      	movs	r2, #32
 8001c08:	409a      	lsls	r2, r3
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d136      	bne.n	8001c88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f022 0216 	bic.w	r2, r2, #22
 8001c28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695a      	ldr	r2, [r3, #20]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001c38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d103      	bne.n	8001c4a <HAL_DMA_IRQHandler+0x1da>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d007      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 0208 	bic.w	r2, r2, #8
 8001c58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c5e:	223f      	movs	r2, #63	@ 0x3f
 8001c60:	409a      	lsls	r2, r3
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d07e      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	4798      	blx	r3
        }
        return;
 8001c86:	e079      	b.n	8001d7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d01d      	beq.n	8001cd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10d      	bne.n	8001cc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d031      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	4798      	blx	r3
 8001cb4:	e02c      	b.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
 8001cb6:	bf00      	nop
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d023      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	4798      	blx	r3
 8001cd0:	e01e      	b.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10f      	bne.n	8001d00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0210 	bic.w	r2, r2, #16
 8001cee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d032      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2205      	movs	r2, #5
 8001d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 0201 	bic.w	r2, r2, #1
 8001d3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d307      	bcc.n	8001d58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1f2      	bne.n	8001d3c <HAL_DMA_IRQHandler+0x2cc>
 8001d56:	e000      	b.n	8001d5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001d58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d005      	beq.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
 8001d7a:	e000      	b.n	8001d7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001d7c:	bf00      	nop
    }
  }
}
 8001d7e:	3718      	adds	r7, #24
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	60f8      	str	r0, [r7, #12]
 8001d8c:	60b9      	str	r1, [r7, #8]
 8001d8e:	607a      	str	r2, [r7, #4]
 8001d90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001da0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b40      	cmp	r3, #64	@ 0x40
 8001db0:	d108      	bne.n	8001dc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001dc2:	e007      	b.n	8001dd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68ba      	ldr	r2, [r7, #8]
 8001dca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	60da      	str	r2, [r3, #12]
}
 8001dd4:	bf00      	nop
 8001dd6:	3714      	adds	r7, #20
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	3b10      	subs	r3, #16
 8001df0:	4a13      	ldr	r2, [pc, #76]	@ (8001e40 <DMA_CalcBaseAndBitshift+0x60>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001dfa:	4a12      	ldr	r2, [pc, #72]	@ (8001e44 <DMA_CalcBaseAndBitshift+0x64>)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	4413      	add	r3, r2
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	461a      	mov	r2, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d908      	bls.n	8001e20 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	461a      	mov	r2, r3
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <DMA_CalcBaseAndBitshift+0x68>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	1d1a      	adds	r2, r3, #4
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	659a      	str	r2, [r3, #88]	@ 0x58
 8001e1e:	e006      	b.n	8001e2e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	4b08      	ldr	r3, [pc, #32]	@ (8001e48 <DMA_CalcBaseAndBitshift+0x68>)
 8001e28:	4013      	ands	r3, r2
 8001e2a:	687a      	ldr	r2, [r7, #4]
 8001e2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	aaaaaaab 	.word	0xaaaaaaab
 8001e44:	0801006c 	.word	0x0801006c
 8001e48:	fffffc00 	.word	0xfffffc00

08001e4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e54:	2300      	movs	r3, #0
 8001e56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d11f      	bne.n	8001ea6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	2b03      	cmp	r3, #3
 8001e6a:	d856      	bhi.n	8001f1a <DMA_CheckFifoParam+0xce>
 8001e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001e74 <DMA_CheckFifoParam+0x28>)
 8001e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e72:	bf00      	nop
 8001e74:	08001e85 	.word	0x08001e85
 8001e78:	08001e97 	.word	0x08001e97
 8001e7c:	08001e85 	.word	0x08001e85
 8001e80:	08001f1b 	.word	0x08001f1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d046      	beq.n	8001f1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001e94:	e043      	b.n	8001f1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001e9e:	d140      	bne.n	8001f22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ea4:	e03d      	b.n	8001f22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001eae:	d121      	bne.n	8001ef4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2b03      	cmp	r3, #3
 8001eb4:	d837      	bhi.n	8001f26 <DMA_CheckFifoParam+0xda>
 8001eb6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ebc <DMA_CheckFifoParam+0x70>)
 8001eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001ed3 	.word	0x08001ed3
 8001ec4:	08001ecd 	.word	0x08001ecd
 8001ec8:	08001ee5 	.word	0x08001ee5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]
      break;
 8001ed0:	e030      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ed6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d025      	beq.n	8001f2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ee2:	e022      	b.n	8001f2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ee8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001eec:	d11f      	bne.n	8001f2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001ef2:	e01c      	b.n	8001f2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d903      	bls.n	8001f02 <DMA_CheckFifoParam+0xb6>
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d003      	beq.n	8001f08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f00:	e018      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
      break;
 8001f06:	e015      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00e      	beq.n	8001f32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e00b      	b.n	8001f32 <DMA_CheckFifoParam+0xe6>
      break;
 8001f1a:	bf00      	nop
 8001f1c:	e00a      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f1e:	bf00      	nop
 8001f20:	e008      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f22:	bf00      	nop
 8001f24:	e006      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f26:	bf00      	nop
 8001f28:	e004      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f2a:	bf00      	nop
 8001f2c:	e002      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001f2e:	bf00      	nop
 8001f30:	e000      	b.n	8001f34 <DMA_CheckFifoParam+0xe8>
      break;
 8001f32:	bf00      	nop
    }
  } 
  
  return status; 
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3714      	adds	r7, #20
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop

08001f44 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e086      	b.n	8002064 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2220      	movs	r2, #32
 8001f64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f004 fd51 	bl	8006a10 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	4b3f      	ldr	r3, [pc, #252]	@ (800206c <HAL_ETH_Init+0x128>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f72:	4a3e      	ldr	r2, [pc, #248]	@ (800206c <HAL_ETH_Init+0x128>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f7a:	4b3c      	ldr	r3, [pc, #240]	@ (800206c <HAL_ETH_Init+0x128>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001f86:	4b3a      	ldr	r3, [pc, #232]	@ (8002070 <HAL_ETH_Init+0x12c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	4a39      	ldr	r2, [pc, #228]	@ (8002070 <HAL_ETH_Init+0x12c>)
 8001f8c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8001f90:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001f92:	4b37      	ldr	r3, [pc, #220]	@ (8002070 <HAL_ETH_Init+0x12c>)
 8001f94:	685a      	ldr	r2, [r3, #4]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	4935      	ldr	r1, [pc, #212]	@ (8002070 <HAL_ETH_Init+0x12c>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001fa0:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <HAL_ETH_Init+0x12c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	f043 0301 	orr.w	r3, r3, #1
 8001fb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001fba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fbc:	f7ff fa76 	bl	80014ac <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fc2:	e011      	b.n	8001fe8 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001fc4:	f7ff fa72 	bl	80014ac <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001fd2:	d909      	bls.n	8001fe8 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2204      	movs	r2, #4
 8001fd8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	22e0      	movs	r2, #224	@ 0xe0
 8001fe0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e03d      	b.n	8002064 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d1e4      	bne.n	8001fc4 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 fd58 	bl	8002ab0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fe03 	bl	8002c0c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 fe59 	bl	8002cbe <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	461a      	mov	r2, r3
 8002012:	2100      	movs	r1, #0
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fdc1 	bl	8002b9c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002028:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f8d3 110c 	ldr.w	r1, [r3, #268]	@ 0x10c
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	4b0f      	ldr	r3, [pc, #60]	@ (8002074 <HAL_ETH_Init+0x130>)
 8002038:	430b      	orrs	r3, r1
 800203a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800204e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2210      	movs	r2, #16
 800205e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40023800 	.word	0x40023800
 8002070:	40013800 	.word	0x40013800
 8002074:	00020060 	.word	0x00020060

08002078 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002086:	2b10      	cmp	r3, #16
 8002088:	d150      	bne.n	800212c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2204      	movs	r2, #4
 8002096:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f939 	bl	8002310 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0208 	orr.w	r2, r2, #8
 80020ac:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff fa04 	bl	80014c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f042 0204 	orr.w	r2, r2, #4
 80020d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020dc:	2001      	movs	r0, #1
 80020de:	f7ff f9f1 	bl	80014c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68fa      	ldr	r2, [r7, #12]
 80020e8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 fb7c 	bl	80027e8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6812      	ldr	r2, [r2, #0]
 80020fe:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002102:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002106:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6812      	ldr	r2, [r2, #0]
 8002116:	f043 0302 	orr.w	r3, r3, #2
 800211a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800211e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	@ 0x40
 8002124:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002144:	2b40      	cmp	r3, #64	@ 0x40
 8002146:	d14a      	bne.n	80021de <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2220      	movs	r2, #32
 800214c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6812      	ldr	r2, [r2, #0]
 800215e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002162:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002166:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6812      	ldr	r2, [r2, #0]
 8002176:	f023 0302 	bic.w	r3, r3, #2
 800217a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800217e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f022 0204 	bic.w	r2, r2, #4
 800218e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002198:	2001      	movs	r0, #1
 800219a:	f7ff f993 	bl	80014c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 fb1e 	bl	80027e8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0208 	bic.w	r2, r2, #8
 80021ba:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7ff f97d 	bl	80014c4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2210      	movs	r2, #16
 80021d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80021da:	2300      	movs	r3, #0
 80021dc:	e000      	b.n	80021e0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
  }
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	3710      	adds	r7, #16
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}

080021e8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002200:	f043 0201 	orr.w	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e07c      	b.n	8002308 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002214:	2b40      	cmp	r3, #64	@ 0x40
 8002216:	d176      	bne.n	8002306 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8002218:	2200      	movs	r2, #0
 800221a:	68b9      	ldr	r1, [r7, #8]
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f000 fdbd 	bl	8002d9c <ETH_Prepare_Tx_Descriptors>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d009      	beq.n	800223c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	f043 0202 	orr.w	r2, r3, #2
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e065      	b.n	8002308 <HAL_ETH_Transmit+0x120>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800223c:	f3bf 8f4f 	dsb	sy
}
 8002240:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	3206      	adds	r2, #6
 800224a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800224e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	629a      	str	r2, [r3, #40]	@ 0x28
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225e:	2b03      	cmp	r3, #3
 8002260:	d904      	bls.n	800226c <HAL_ETH_Transmit+0x84>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002266:	1f1a      	subs	r2, r3, #4
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	3106      	adds	r1, #6
 8002278:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800227c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002280:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8002282:	f7ff f913 	bl	80014ac <HAL_GetTick>
 8002286:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002288:	e037      	b.n	80022fa <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002292:	695b      	ldr	r3, [r3, #20]
 8002294:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d011      	beq.n	80022c0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022a2:	f043 0208 	orr.w	r2, r3, #8
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022b4:	695a      	ldr	r2, [r3, #20]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e023      	b.n	8002308 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d018      	beq.n	80022fa <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80022c8:	f7ff f8f0 	bl	80014ac <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	687a      	ldr	r2, [r7, #4]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d302      	bcc.n	80022de <HAL_ETH_Transmit+0xf6>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e4:	f043 0204 	orr.w	r2, r3, #4
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 80022f4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e006      	b.n	8002308 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	dbc3      	blt.n	800228a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8002302:	2300      	movs	r3, #0
 8002304:	e000      	b.n	8002308 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
  }
}
 8002308:	4618      	mov	r0, r3
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800231c:	2301      	movs	r3, #1
 800231e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002324:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69fa      	ldr	r2, [r7, #28]
 800232a:	3212      	adds	r2, #18
 800232c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002330:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002336:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002338:	e042      	b.n	80023c0 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d112      	bne.n	8002368 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002342:	f107 0308 	add.w	r3, r7, #8
 8002346:	4618      	mov	r0, r3
 8002348:	f004 fcf4 	bl	8006d34 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d102      	bne.n	8002358 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	74fb      	strb	r3, [r7, #19]
 8002356:	e007      	b.n	8002368 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	461a      	mov	r2, r3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	461a      	mov	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d028      	beq.n	80023c0 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	4b26      	ldr	r3, [pc, #152]	@ (8002414 <ETH_UpdateDescriptor+0x104>)
 800237c:	4313      	orrs	r3, r2
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	6053      	str	r3, [r2, #4]
 8002382:	e005      	b.n	8002390 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d902      	bls.n	80023ae <ETH_UpdateDescriptor+0x9e>
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	3b04      	subs	r3, #4
 80023ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	3212      	adds	r2, #18
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	617b      	str	r3, [r7, #20]
      desccount--;
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	3b01      	subs	r3, #1
 80023be:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <ETH_UpdateDescriptor+0xbc>
 80023c6:	7cfb      	ldrb	r3, [r7, #19]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1b6      	bne.n	800233a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d01a      	beq.n	800240c <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3303      	adds	r3, #3
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80023e0:	f3bf 8f5f 	dmb	sy
}
 80023e4:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6919      	ldr	r1, [r3, #16]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	00db      	lsls	r3, r3, #3
 80023f4:	18ca      	adds	r2, r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80023fe:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	69fa      	ldr	r2, [r7, #28]
 8002404:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800240c:	bf00      	nop
 800240e:	3720      	adds	r7, #32
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	80004000 	.word	0x80004000

08002418 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	607a      	str	r2, [r7, #4]
 8002424:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 031c 	and.w	r3, r3, #28
 8002434:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	02db      	lsls	r3, r3, #11
 800243a:	b29b      	uxth	r3, r3
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	4313      	orrs	r3, r2
 8002440:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	019b      	lsls	r3, r3, #6
 8002446:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800244a:	697a      	ldr	r2, [r7, #20]
 800244c:	4313      	orrs	r3, r2
 800244e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0302 	bic.w	r3, r3, #2
 8002456:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002468:	f7ff f820 	bl	80014ac <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800246e:	e00d      	b.n	800248c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8002470:	f7ff f81c 	bl	80014ac <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800247e:	d301      	bcc.n	8002484 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e010      	b.n	80024a6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ec      	bne.n	8002470 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695b      	ldr	r3, [r3, #20]
 800249c:	b29b      	uxth	r3, r3
 800249e:	461a      	mov	r2, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3718      	adds	r7, #24
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80024ae:	b580      	push	{r7, lr}
 80024b0:	b086      	sub	sp, #24
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	60f8      	str	r0, [r7, #12]
 80024b6:	60b9      	str	r1, [r7, #8]
 80024b8:	607a      	str	r2, [r7, #4]
 80024ba:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	f003 031c 	and.w	r3, r3, #28
 80024ca:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80024cc:	68bb      	ldr	r3, [r7, #8]
 80024ce:	02db      	lsls	r3, r3, #11
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	019b      	lsls	r3, r3, #6
 80024dc:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	b29a      	uxth	r2, r3
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	697a      	ldr	r2, [r7, #20]
 8002506:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002508:	f7fe ffd0 	bl	80014ac <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800250e:	e00d      	b.n	800252c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002510:	f7fe ffcc 	bl	80014ac <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800251e:	d301      	bcc.n	8002524 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e009      	b.n	8002538 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ec      	bne.n	8002510 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3718      	adds	r7, #24
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0e6      	b.n	8002722 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0310 	and.w	r3, r3, #16
 800255e:	2b00      	cmp	r3, #0
 8002560:	bf14      	ite	ne
 8002562:	2301      	movne	r3, #1
 8002564:	2300      	moveq	r3, #0
 8002566:	b2db      	uxtb	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002588:	2b00      	cmp	r3, #0
 800258a:	bf0c      	ite	eq
 800258c:	2301      	moveq	r3, #1
 800258e:	2300      	movne	r3, #0
 8002590:	b2db      	uxtb	r3, r3
 8002592:	461a      	mov	r2, r3
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	bf14      	ite	ne
 80025dc:	2301      	movne	r3, #1
 80025de:	2300      	moveq	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	461a      	mov	r2, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf0c      	ite	eq
 8002612:	2301      	moveq	r3, #1
 8002614:	2300      	movne	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	461a      	mov	r2, r3
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	461a      	mov	r2, r3
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800266a:	2b00      	cmp	r3, #0
 800266c:	bf14      	ite	ne
 800266e:	2301      	movne	r3, #1
 8002670:	2300      	moveq	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002684:	2b00      	cmp	r3, #0
 8002686:	bf14      	ite	ne
 8002688:	2301      	movne	r3, #1
 800268a:	2300      	moveq	r3, #0
 800268c:	b2db      	uxtb	r3, r3
 800268e:	461a      	mov	r2, r3
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	bf14      	ite	ne
 80026a2:	2301      	movne	r3, #1
 80026a4:	2300      	moveq	r3, #0
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	461a      	mov	r2, r3
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	699b      	ldr	r3, [r3, #24]
 80026e0:	0c1b      	lsrs	r3, r3, #16
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0304 	and.w	r3, r3, #4
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	bf14      	ite	ne
 80026f6:	2301      	movne	r3, #1
 80026f8:	2300      	moveq	r3, #0
 80026fa:	b2db      	uxtb	r3, r3
 80026fc:	461a      	mov	r2, r3
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800270e:	2b00      	cmp	r3, #0
 8002710:	bf14      	ite	ne
 8002712:	2301      	movne	r3, #1
 8002714:	2300      	moveq	r3, #0
 8002716:	b2db      	uxtb	r3, r3
 8002718:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002720:	2300      	movs	r3, #0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr

0800272e <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800272e:	b580      	push	{r7, lr}
 8002730:	b082      	sub	sp, #8
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
 8002736:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e00b      	b.n	800275a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002748:	2b10      	cmp	r3, #16
 800274a:	d105      	bne.n	8002758 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800274c:	6839      	ldr	r1, [r7, #0]
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 f870 	bl	8002834 <ETH_SetMACConfig>

    return HAL_OK;
 8002754:	2300      	movs	r3, #0
 8002756:	e000      	b.n	800275a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
  }
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
	...

08002764 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f023 031c 	bic.w	r3, r3, #28
 800277a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800277c:	f001 fb08 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8002780:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	4a14      	ldr	r2, [pc, #80]	@ (80027d8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d804      	bhi.n	8002794 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 0308 	orr.w	r3, r3, #8
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	e019      	b.n	80027c8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	4a11      	ldr	r2, [pc, #68]	@ (80027dc <HAL_ETH_SetMDIOClockRange+0x78>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d204      	bcs.n	80027a6 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f043 030c 	orr.w	r3, r3, #12
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	e010      	b.n	80027c8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	4a0d      	ldr	r2, [pc, #52]	@ (80027e0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d90c      	bls.n	80027c8 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	4a0c      	ldr	r2, [pc, #48]	@ (80027e4 <HAL_ETH_SetMDIOClockRange+0x80>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d804      	bhi.n	80027c0 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e003      	b.n	80027c8 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f043 0310 	orr.w	r3, r3, #16
 80027c6:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	611a      	str	r2, [r3, #16]
}
 80027d0:	bf00      	nop
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	02160ebf 	.word	0x02160ebf
 80027dc:	03938700 	.word	0x03938700
 80027e0:	05f5e0ff 	.word	0x05f5e0ff
 80027e4:	08f0d17f 	.word	0x08f0d17f

080027e8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027fc:	699b      	ldr	r3, [r3, #24]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6812      	ldr	r2, [r2, #0]
 8002802:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002806:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800280a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002818:	2001      	movs	r0, #1
 800281a:	f7fe fe53 	bl	80014c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002828:	6193      	str	r3, [r2, #24]
}
 800282a:	bf00      	nop
 800282c:	3710      	adds	r7, #16
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4b53      	ldr	r3, [pc, #332]	@ (8002998 <ETH_SetMACConfig+0x164>)
 800284a:	4013      	ands	r3, r2
 800284c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7b9b      	ldrb	r3, [r3, #14]
 8002852:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	7c12      	ldrb	r2, [r2, #16]
 8002858:	2a00      	cmp	r2, #0
 800285a:	d102      	bne.n	8002862 <ETH_SetMACConfig+0x2e>
 800285c:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002860:	e000      	b.n	8002864 <ETH_SetMACConfig+0x30>
 8002862:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002864:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	7c52      	ldrb	r2, [r2, #17]
 800286a:	2a00      	cmp	r2, #0
 800286c:	d102      	bne.n	8002874 <ETH_SetMACConfig+0x40>
 800286e:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002872:	e000      	b.n	8002876 <ETH_SetMACConfig+0x42>
 8002874:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002876:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800287c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7fdb      	ldrb	r3, [r3, #31]
 8002882:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002884:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800288a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800288c:	683a      	ldr	r2, [r7, #0]
 800288e:	7f92      	ldrb	r2, [r2, #30]
 8002890:	2a00      	cmp	r2, #0
 8002892:	d102      	bne.n	800289a <ETH_SetMACConfig+0x66>
 8002894:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002898:	e000      	b.n	800289c <ETH_SetMACConfig+0x68>
 800289a:	2200      	movs	r2, #0
                        macconf->Speed |
 800289c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	7f1b      	ldrb	r3, [r3, #28]
 80028a2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80028a4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80028aa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	791b      	ldrb	r3, [r3, #4]
 80028b0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80028b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028ba:	2a00      	cmp	r2, #0
 80028bc:	d102      	bne.n	80028c4 <ETH_SetMACConfig+0x90>
 80028be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c2:	e000      	b.n	80028c6 <ETH_SetMACConfig+0x92>
 80028c4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	7bdb      	ldrb	r3, [r3, #15]
 80028cc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028ce:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028d4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80028dc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80028de:	4313      	orrs	r3, r2
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f6:	2001      	movs	r0, #1
 80028f8:	f7fe fde4 	bl	80014c4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800290c:	68fa      	ldr	r2, [r7, #12]
 800290e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002912:	4013      	ands	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800291a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002922:	2a00      	cmp	r2, #0
 8002924:	d101      	bne.n	800292a <ETH_SetMACConfig+0xf6>
 8002926:	2280      	movs	r2, #128	@ 0x80
 8002928:	e000      	b.n	800292c <ETH_SetMACConfig+0xf8>
 800292a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800292c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002932:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800293a:	2a01      	cmp	r2, #1
 800293c:	d101      	bne.n	8002942 <ETH_SetMACConfig+0x10e>
 800293e:	2208      	movs	r2, #8
 8002940:	e000      	b.n	8002944 <ETH_SetMACConfig+0x110>
 8002942:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002944:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 800294c:	2a01      	cmp	r2, #1
 800294e:	d101      	bne.n	8002954 <ETH_SetMACConfig+0x120>
 8002950:	2204      	movs	r2, #4
 8002952:	e000      	b.n	8002956 <ETH_SetMACConfig+0x122>
 8002954:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002956:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800295e:	2a01      	cmp	r2, #1
 8002960:	d101      	bne.n	8002966 <ETH_SetMACConfig+0x132>
 8002962:	2202      	movs	r2, #2
 8002964:	e000      	b.n	8002968 <ETH_SetMACConfig+0x134>
 8002966:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002968:	4313      	orrs	r3, r2
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	4313      	orrs	r3, r2
 800296e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68fa      	ldr	r2, [r7, #12]
 8002976:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002980:	2001      	movs	r0, #1
 8002982:	f7fe fd9f 	bl	80014c4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	619a      	str	r2, [r3, #24]
}
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	fd20810f 	.word	0xfd20810f

0800299c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4b3d      	ldr	r3, [pc, #244]	@ (8002aac <ETH_SetDMAConfig+0x110>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	7b1b      	ldrb	r3, [r3, #12]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d102      	bne.n	80029c8 <ETH_SetDMAConfig+0x2c>
 80029c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80029c6:	e000      	b.n	80029ca <ETH_SetDMAConfig+0x2e>
 80029c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	7b5b      	ldrb	r3, [r3, #13]
 80029ce:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029d0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	7f52      	ldrb	r2, [r2, #29]
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	d102      	bne.n	80029e0 <ETH_SetDMAConfig+0x44>
 80029da:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80029de:	e000      	b.n	80029e2 <ETH_SetDMAConfig+0x46>
 80029e0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029e2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	7b9b      	ldrb	r3, [r3, #14]
 80029e8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029ea:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	7f1b      	ldrb	r3, [r3, #28]
 80029f6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029f8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	7f9b      	ldrb	r3, [r3, #30]
 80029fe:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a00:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a06:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002a0e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a10:	4313      	orrs	r3, r2
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a20:	461a      	mov	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a2e:	699b      	ldr	r3, [r3, #24]
 8002a30:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a32:	2001      	movs	r0, #1
 8002a34:	f7fe fd46 	bl	80014c4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a40:	461a      	mov	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	791b      	ldrb	r3, [r3, #4]
 8002a4a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a50:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a56:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a5c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002a64:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a66:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a6e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a74:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	6812      	ldr	r2, [r2, #0]
 8002a7a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a82:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a90:	2001      	movs	r0, #1
 8002a92:	f7fe fd17 	bl	80014c4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6013      	str	r3, [r2, #0]
}
 8002aa4:	bf00      	nop
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	f8de3f23 	.word	0xf8de3f23

08002ab0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b0a6      	sub	sp, #152	@ 0x98
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002ada:	2301      	movs	r3, #1
 8002adc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002aec:	2300      	movs	r3, #0
 8002aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002af2:	2300      	movs	r3, #0
 8002af4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b00:	2300      	movs	r3, #0
 8002b02:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b12:	2300      	movs	r3, #0
 8002b14:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b2a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002b2e:	4619      	mov	r1, r3
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f7ff fe7f 	bl	8002834 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b36:	2301      	movs	r3, #1
 8002b38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b44:	2301      	movs	r3, #1
 8002b46:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b52:	2300      	movs	r3, #0
 8002b54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b62:	2301      	movs	r3, #1
 8002b64:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002b6a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002b70:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002b76:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b86:	f107 0308 	add.w	r3, r7, #8
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f7ff ff05 	bl	800299c <ETH_SetDMAConfig>
}
 8002b92:	bf00      	nop
 8002b94:	3798      	adds	r7, #152	@ 0x98
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3305      	adds	r3, #5
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	021b      	lsls	r3, r3, #8
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	3204      	adds	r2, #4
 8002bb4:	7812      	ldrb	r2, [r2, #0]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002bba:	68ba      	ldr	r2, [r7, #8]
 8002bbc:	4b11      	ldr	r3, [pc, #68]	@ (8002c04 <ETH_MACAddressConfig+0x68>)
 8002bbe:	4413      	add	r3, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	3303      	adds	r3, #3
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	061a      	lsls	r2, r3, #24
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	3302      	adds	r3, #2
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	041b      	lsls	r3, r3, #16
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3301      	adds	r3, #1
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	021b      	lsls	r3, r3, #8
 8002be0:	4313      	orrs	r3, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	7812      	ldrb	r2, [r2, #0]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <ETH_MACAddressConfig+0x6c>)
 8002bee:	4413      	add	r3, r2
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	6013      	str	r3, [r2, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	371c      	adds	r7, #28
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40028040 	.word	0x40028040
 8002c08:	40028044 	.word	0x40028044

08002c0c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e03e      	b.n	8002c98 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68d9      	ldr	r1, [r3, #12]
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	00db      	lsls	r3, r3, #3
 8002c28:	440b      	add	r3, r1
 8002c2a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2200      	movs	r2, #0
 8002c36:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2200      	movs	r2, #0
 8002c42:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	3206      	adds	r2, #6
 8002c4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d80c      	bhi.n	8002c7c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	68d9      	ldr	r1, [r3, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	440b      	add	r3, r1
 8002c74:	461a      	mov	r2, r3
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	e004      	b.n	8002c86 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	461a      	mov	r2, r3
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	3301      	adds	r3, #1
 8002c96:	60fb      	str	r3, [r7, #12]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2b03      	cmp	r3, #3
 8002c9c:	d9bd      	bls.n	8002c1a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002cb0:	611a      	str	r2, [r3, #16]
}
 8002cb2:	bf00      	nop
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b085      	sub	sp, #20
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	60fb      	str	r3, [r7, #12]
 8002cca:	e048      	b.n	8002d5e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6919      	ldr	r1, [r3, #16]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	440b      	add	r3, r1
 8002cdc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2200      	movs	r2, #0
 8002cee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002d08:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68fa      	ldr	r2, [r7, #12]
 8002d28:	3212      	adds	r2, #18
 8002d2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d80c      	bhi.n	8002d4e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6919      	ldr	r1, [r3, #16]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	461a      	mov	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	60da      	str	r2, [r3, #12]
 8002d4c:	e004      	b.n	8002d58 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	461a      	mov	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d9b3      	bls.n	8002ccc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691a      	ldr	r2, [r3, #16]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d8e:	60da      	str	r2, [r3, #12]
}
 8002d90:	bf00      	nop
 8002d92:	3714      	adds	r7, #20
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b091      	sub	sp, #68	@ 0x44
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	3318      	adds	r3, #24
 8002dac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002dc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc6:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dde:	d007      	beq.n	8002df0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002de0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002de2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002de4:	3304      	adds	r3, #4
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d001      	beq.n	8002df4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002df0:	2302      	movs	r3, #2
 8002df2:	e111      	b.n	8003018 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 8002df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002df6:	3301      	adds	r3, #1
 8002df8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e02:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	4b86      	ldr	r3, [pc, #536]	@ (8003024 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e0e:	6852      	ldr	r2, [r2, #4]
 8002e10:	431a      	orrs	r2, r3
 8002e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e14:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e32:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0320 	and.w	r3, r3, #32
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d008      	beq.n	8002e52 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	431a      	orrs	r2, r3
 8002e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e50:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f003 0304 	and.w	r3, r3, #4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e68:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e74:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e76:	e082      	b.n	8002f7e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002e80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e82:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d006      	beq.n	8002e98 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e94:	601a      	str	r2, [r3, #0]
 8002e96:	e005      	b.n	8002ea4 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ea4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d902      	bls.n	8002eb6 <ETH_Prepare_Tx_Descriptors+0x11a>
 8002eb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002eb2:	3b04      	subs	r3, #4
 8002eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002eba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebe:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002ecc:	d007      	beq.n	8002ede <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ed0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ed2:	3304      	adds	r3, #4
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d029      	beq.n	8002f32 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eea:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002eec:	2300      	movs	r3, #0
 8002eee:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ef0:	e019      	b.n	8002f26 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 8002ef2:	f3bf 8f5f 	dmb	sy
}
 8002ef6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f02:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002f04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f06:	3301      	adds	r3, #1
 8002f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f0c:	2b03      	cmp	r3, #3
 8002f0e:	d902      	bls.n	8002f16 <ETH_Prepare_Tx_Descriptors+0x17a>
 8002f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f12:	3b04      	subs	r3, #4
 8002f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f18:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f1e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8002f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f22:	3301      	adds	r3, #1
 8002f24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d3e1      	bcc.n	8002ef2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e072      	b.n	8003018 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8002f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f40:	3301      	adds	r3, #1
 8002f42:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f52:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	4b32      	ldr	r3, [pc, #200]	@ (8003024 <ETH_Prepare_Tx_Descriptors+0x288>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002f5e:	6852      	ldr	r2, [r2, #4]
 8002f60:	431a      	orrs	r2, r3
 8002f62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f64:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	3301      	adds	r3, #1
 8002f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8002f6c:	f3bf 8f5f 	dmb	sy
}
 8002f70:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f47f af78 	bne.w	8002e78 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d006      	beq.n	8002f9c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e005      	b.n	8002fa8 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa6:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fbc:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8002fbe:	f3bf 8f5f 	dmb	sy
}
 8002fc2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fce:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fd4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fd8:	3304      	adds	r3, #4
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002fe4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe6:	f3ef 8310 	mrs	r3, PRIMASK
 8002fea:	613b      	str	r3, [r7, #16]
  return(result);
 8002fec:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8002fee:	61fb      	str	r3, [r7, #28]
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f383 8810 	msr	PRIMASK, r3
}
 8002ffa:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	4413      	add	r3, r2
 8003004:	1c5a      	adds	r2, r3, #1
 8003006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003008:	629a      	str	r2, [r3, #40]	@ 0x28
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	f383 8810 	msr	PRIMASK, r3
}
 8003014:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3744      	adds	r7, #68	@ 0x44
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	ffffe000 	.word	0xffffe000

08003028 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003028:	b480      	push	{r7}
 800302a:	b089      	sub	sp, #36	@ 0x24
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003032:	2300      	movs	r3, #0
 8003034:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003036:	2300      	movs	r3, #0
 8003038:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800303a:	2300      	movs	r3, #0
 800303c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800303e:	2300      	movs	r3, #0
 8003040:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e175      	b.n	8003334 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003048:	2201      	movs	r2, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	429a      	cmp	r2, r3
 8003062:	f040 8164 	bne.w	800332e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	2b01      	cmp	r3, #1
 8003070:	d005      	beq.n	800307e <HAL_GPIO_Init+0x56>
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d130      	bne.n	80030e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	2203      	movs	r2, #3
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68da      	ldr	r2, [r3, #12]
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4313      	orrs	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	69ba      	ldr	r2, [r7, #24]
 80030ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b4:	2201      	movs	r2, #1
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	091b      	lsrs	r3, r3, #4
 80030ca:	f003 0201 	and.w	r2, r3, #1
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	69ba      	ldr	r2, [r7, #24]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f003 0303 	and.w	r3, r3, #3
 80030e8:	2b03      	cmp	r3, #3
 80030ea:	d017      	beq.n	800311c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	fa02 f303 	lsl.w	r3, r2, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4313      	orrs	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d123      	bne.n	8003170 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f003 0307 	and.w	r3, r3, #7
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	220f      	movs	r2, #15
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	f003 0307 	and.w	r3, r3, #7
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	08da      	lsrs	r2, r3, #3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	3208      	adds	r2, #8
 800316a:	69b9      	ldr	r1, [r7, #24]
 800316c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	2203      	movs	r2, #3
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	f003 0203 	and.w	r2, r3, #3
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80be 	beq.w	800332e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b2:	4b66      	ldr	r3, [pc, #408]	@ (800334c <HAL_GPIO_Init+0x324>)
 80031b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031b6:	4a65      	ldr	r2, [pc, #404]	@ (800334c <HAL_GPIO_Init+0x324>)
 80031b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031be:	4b63      	ldr	r3, [pc, #396]	@ (800334c <HAL_GPIO_Init+0x324>)
 80031c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c6:	60fb      	str	r3, [r7, #12]
 80031c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031ca:	4a61      	ldr	r2, [pc, #388]	@ (8003350 <HAL_GPIO_Init+0x328>)
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	3302      	adds	r3, #2
 80031d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0303 	and.w	r3, r3, #3
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	220f      	movs	r2, #15
 80031e2:	fa02 f303 	lsl.w	r3, r2, r3
 80031e6:	43db      	mvns	r3, r3
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	4013      	ands	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a58      	ldr	r2, [pc, #352]	@ (8003354 <HAL_GPIO_Init+0x32c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d037      	beq.n	8003266 <HAL_GPIO_Init+0x23e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a57      	ldr	r2, [pc, #348]	@ (8003358 <HAL_GPIO_Init+0x330>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d031      	beq.n	8003262 <HAL_GPIO_Init+0x23a>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a56      	ldr	r2, [pc, #344]	@ (800335c <HAL_GPIO_Init+0x334>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d02b      	beq.n	800325e <HAL_GPIO_Init+0x236>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a55      	ldr	r2, [pc, #340]	@ (8003360 <HAL_GPIO_Init+0x338>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d025      	beq.n	800325a <HAL_GPIO_Init+0x232>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a54      	ldr	r2, [pc, #336]	@ (8003364 <HAL_GPIO_Init+0x33c>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d01f      	beq.n	8003256 <HAL_GPIO_Init+0x22e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a53      	ldr	r2, [pc, #332]	@ (8003368 <HAL_GPIO_Init+0x340>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d019      	beq.n	8003252 <HAL_GPIO_Init+0x22a>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4a52      	ldr	r2, [pc, #328]	@ (800336c <HAL_GPIO_Init+0x344>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d013      	beq.n	800324e <HAL_GPIO_Init+0x226>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a51      	ldr	r2, [pc, #324]	@ (8003370 <HAL_GPIO_Init+0x348>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d00d      	beq.n	800324a <HAL_GPIO_Init+0x222>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a50      	ldr	r2, [pc, #320]	@ (8003374 <HAL_GPIO_Init+0x34c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d007      	beq.n	8003246 <HAL_GPIO_Init+0x21e>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a4f      	ldr	r2, [pc, #316]	@ (8003378 <HAL_GPIO_Init+0x350>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d101      	bne.n	8003242 <HAL_GPIO_Init+0x21a>
 800323e:	2309      	movs	r3, #9
 8003240:	e012      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003242:	230a      	movs	r3, #10
 8003244:	e010      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003246:	2308      	movs	r3, #8
 8003248:	e00e      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800324a:	2307      	movs	r3, #7
 800324c:	e00c      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800324e:	2306      	movs	r3, #6
 8003250:	e00a      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003252:	2305      	movs	r3, #5
 8003254:	e008      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003256:	2304      	movs	r3, #4
 8003258:	e006      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800325a:	2303      	movs	r3, #3
 800325c:	e004      	b.n	8003268 <HAL_GPIO_Init+0x240>
 800325e:	2302      	movs	r3, #2
 8003260:	e002      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003262:	2301      	movs	r3, #1
 8003264:	e000      	b.n	8003268 <HAL_GPIO_Init+0x240>
 8003266:	2300      	movs	r3, #0
 8003268:	69fa      	ldr	r2, [r7, #28]
 800326a:	f002 0203 	and.w	r2, r2, #3
 800326e:	0092      	lsls	r2, r2, #2
 8003270:	4093      	lsls	r3, r2
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4313      	orrs	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003278:	4935      	ldr	r1, [pc, #212]	@ (8003350 <HAL_GPIO_Init+0x328>)
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	3302      	adds	r3, #2
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003286:	4b3d      	ldr	r3, [pc, #244]	@ (800337c <HAL_GPIO_Init+0x354>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	43db      	mvns	r3, r3
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	4013      	ands	r3, r2
 8003294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032aa:	4a34      	ldr	r2, [pc, #208]	@ (800337c <HAL_GPIO_Init+0x354>)
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032b0:	4b32      	ldr	r3, [pc, #200]	@ (800337c <HAL_GPIO_Init+0x354>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032cc:	69ba      	ldr	r2, [r7, #24]
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032d4:	4a29      	ldr	r2, [pc, #164]	@ (800337c <HAL_GPIO_Init+0x354>)
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032da:	4b28      	ldr	r3, [pc, #160]	@ (800337c <HAL_GPIO_Init+0x354>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	43db      	mvns	r3, r3
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	4013      	ands	r3, r2
 80032e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032fe:	4a1f      	ldr	r2, [pc, #124]	@ (800337c <HAL_GPIO_Init+0x354>)
 8003300:	69bb      	ldr	r3, [r7, #24]
 8003302:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003304:	4b1d      	ldr	r3, [pc, #116]	@ (800337c <HAL_GPIO_Init+0x354>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	43db      	mvns	r3, r3
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4013      	ands	r3, r2
 8003312:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d003      	beq.n	8003328 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003328:	4a14      	ldr	r2, [pc, #80]	@ (800337c <HAL_GPIO_Init+0x354>)
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	3301      	adds	r3, #1
 8003332:	61fb      	str	r3, [r7, #28]
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	2b0f      	cmp	r3, #15
 8003338:	f67f ae86 	bls.w	8003048 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	3724      	adds	r7, #36	@ 0x24
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800
 8003350:	40013800 	.word	0x40013800
 8003354:	40020000 	.word	0x40020000
 8003358:	40020400 	.word	0x40020400
 800335c:	40020800 	.word	0x40020800
 8003360:	40020c00 	.word	0x40020c00
 8003364:	40021000 	.word	0x40021000
 8003368:	40021400 	.word	0x40021400
 800336c:	40021800 	.word	0x40021800
 8003370:	40021c00 	.word	0x40021c00
 8003374:	40022000 	.word	0x40022000
 8003378:	40022400 	.word	0x40022400
 800337c:	40013c00 	.word	0x40013c00

08003380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	807b      	strh	r3, [r7, #2]
 800338c:	4613      	mov	r3, r2
 800338e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003390:	787b      	ldrb	r3, [r7, #1]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003396:	887a      	ldrh	r2, [r7, #2]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800339c:	e003      	b.n	80033a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800339e:	887b      	ldrh	r3, [r7, #2]
 80033a0:	041a      	lsls	r2, r3, #16
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	619a      	str	r2, [r3, #24]
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033be:	4b23      	ldr	r3, [pc, #140]	@ (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c2:	4a22      	ldr	r2, [pc, #136]	@ (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ca:	4b20      	ldr	r3, [pc, #128]	@ (800344c <HAL_PWREx_EnableOverDrive+0x98>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a1d      	ldr	r2, [pc, #116]	@ (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033e2:	f7fe f863 	bl	80014ac <HAL_GetTick>
 80033e6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033e8:	e009      	b.n	80033fe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033ea:	f7fe f85f 	bl	80014ac <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033f8:	d901      	bls.n	80033fe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e022      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033fe:	4b14      	ldr	r3, [pc, #80]	@ (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340a:	d1ee      	bne.n	80033ea <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800340c:	4b10      	ldr	r3, [pc, #64]	@ (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0f      	ldr	r2, [pc, #60]	@ (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003412:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003416:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003418:	f7fe f848 	bl	80014ac <HAL_GetTick>
 800341c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800341e:	e009      	b.n	8003434 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003420:	f7fe f844 	bl	80014ac <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800342e:	d901      	bls.n	8003434 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	e007      	b.n	8003444 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003434:	4b06      	ldr	r3, [pc, #24]	@ (8003450 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003440:	d1ee      	bne.n	8003420 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000

08003454 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b086      	sub	sp, #24
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800345c:	2300      	movs	r3, #0
 800345e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e29b      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	f000 8087 	beq.w	8003586 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003478:	4b96      	ldr	r3, [pc, #600]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 030c 	and.w	r3, r3, #12
 8003480:	2b04      	cmp	r3, #4
 8003482:	d00c      	beq.n	800349e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003484:	4b93      	ldr	r3, [pc, #588]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f003 030c 	and.w	r3, r3, #12
 800348c:	2b08      	cmp	r3, #8
 800348e:	d112      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
 8003490:	4b90      	ldr	r3, [pc, #576]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003498:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800349c:	d10b      	bne.n	80034b6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349e:	4b8d      	ldr	r3, [pc, #564]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d06c      	beq.n	8003584 <HAL_RCC_OscConfig+0x130>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d168      	bne.n	8003584 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e275      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034be:	d106      	bne.n	80034ce <HAL_RCC_OscConfig+0x7a>
 80034c0:	4b84      	ldr	r3, [pc, #528]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a83      	ldr	r2, [pc, #524]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034ca:	6013      	str	r3, [r2, #0]
 80034cc:	e02e      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10c      	bne.n	80034f0 <HAL_RCC_OscConfig+0x9c>
 80034d6:	4b7f      	ldr	r3, [pc, #508]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a7e      	ldr	r2, [pc, #504]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034e0:	6013      	str	r3, [r2, #0]
 80034e2:	4b7c      	ldr	r3, [pc, #496]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7b      	ldr	r2, [pc, #492]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034e8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0xc0>
 80034fa:	4b76      	ldr	r3, [pc, #472]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b73      	ldr	r3, [pc, #460]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a72      	ldr	r2, [pc, #456]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xd8>
 8003514:	4b6f      	ldr	r3, [pc, #444]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6e      	ldr	r2, [pc, #440]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b6c      	ldr	r3, [pc, #432]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6b      	ldr	r2, [pc, #428]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fd ffba 	bl	80014ac <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800353c:	f7fd ffb6 	bl	80014ac <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	@ 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e229      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b61      	ldr	r3, [pc, #388]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xe8>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fd ffa6 	bl	80014ac <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fd ffa2 	bl	80014ac <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	@ 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e215      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b57      	ldr	r3, [pc, #348]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x110>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d069      	beq.n	8003666 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003592:	4b50      	ldr	r3, [pc, #320]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00b      	beq.n	80035b6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800359e:	4b4d      	ldr	r3, [pc, #308]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d11c      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
 80035aa:	4b4a      	ldr	r3, [pc, #296]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035b6:	4b47      	ldr	r3, [pc, #284]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68db      	ldr	r3, [r3, #12]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e1e9      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035ce:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	691b      	ldr	r3, [r3, #16]
 80035da:	00db      	lsls	r3, r3, #3
 80035dc:	493d      	ldr	r1, [pc, #244]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035e2:	e040      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035ec:	4b39      	ldr	r3, [pc, #228]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a38      	ldr	r2, [pc, #224]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80035f2:	f043 0301 	orr.w	r3, r3, #1
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fd ff58 	bl	80014ac <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003600:	f7fd ff54 	bl	80014ac <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003612:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800361e:	4b2d      	ldr	r3, [pc, #180]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	691b      	ldr	r3, [r3, #16]
 800362a:	00db      	lsls	r3, r3, #3
 800362c:	4929      	ldr	r1, [pc, #164]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 800362e:	4313      	orrs	r3, r2
 8003630:	600b      	str	r3, [r1, #0]
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003634:	4b27      	ldr	r3, [pc, #156]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a26      	ldr	r2, [pc, #152]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 800363a:	f023 0301 	bic.w	r3, r3, #1
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fd ff34 	bl	80014ac <HAL_GetTick>
 8003644:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003648:	f7fd ff30 	bl	80014ac <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e1a3      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365a:	4b1e      	ldr	r3, [pc, #120]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0302 	and.w	r3, r3, #2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d038      	beq.n	80036e4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b16      	ldr	r3, [pc, #88]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367e:	4a15      	ldr	r2, [pc, #84]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fd ff11 	bl	80014ac <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fd ff0d 	bl	80014ac <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e180      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a0:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x23a>
 80036ac:	e01a      	b.n	80036e4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b2:	4a08      	ldr	r2, [pc, #32]	@ (80036d4 <HAL_RCC_OscConfig+0x280>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fd fef7 	bl	80014ac <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fd fef3 	bl	80014ac <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d903      	bls.n	80036d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e166      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
 80036d4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	4b92      	ldr	r3, [pc, #584]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80036da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0304 	and.w	r3, r3, #4
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 80a4 	beq.w	800383a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036f2:	4b8c      	ldr	r3, [pc, #560]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80036f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d10d      	bne.n	800371a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b89      	ldr	r3, [pc, #548]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003702:	4a88      	ldr	r2, [pc, #544]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	@ 0x40
 800370a:	4b86      	ldr	r3, [pc, #536]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003712:	60bb      	str	r3, [r7, #8]
 8003714:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003716:	2301      	movs	r3, #1
 8003718:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800371a:	4b83      	ldr	r3, [pc, #524]	@ (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003722:	2b00      	cmp	r3, #0
 8003724:	d118      	bne.n	8003758 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003726:	4b80      	ldr	r3, [pc, #512]	@ (8003928 <HAL_RCC_OscConfig+0x4d4>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a7f      	ldr	r2, [pc, #508]	@ (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800372c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003730:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003732:	f7fd febb 	bl	80014ac <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800373a:	f7fd feb7 	bl	80014ac <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b64      	cmp	r3, #100	@ 0x64
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e12a      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800374c:	4b76      	ldr	r3, [pc, #472]	@ (8003928 <HAL_RCC_OscConfig+0x4d4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d106      	bne.n	800376e <HAL_RCC_OscConfig+0x31a>
 8003760:	4b70      	ldr	r3, [pc, #448]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003764:	4a6f      	ldr	r2, [pc, #444]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003766:	f043 0301 	orr.w	r3, r3, #1
 800376a:	6713      	str	r3, [r2, #112]	@ 0x70
 800376c:	e02d      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10c      	bne.n	8003790 <HAL_RCC_OscConfig+0x33c>
 8003776:	4b6b      	ldr	r3, [pc, #428]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	4a6a      	ldr	r2, [pc, #424]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800377c:	f023 0301 	bic.w	r3, r3, #1
 8003780:	6713      	str	r3, [r2, #112]	@ 0x70
 8003782:	4b68      	ldr	r3, [pc, #416]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003786:	4a67      	ldr	r2, [pc, #412]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003788:	f023 0304 	bic.w	r3, r3, #4
 800378c:	6713      	str	r3, [r2, #112]	@ 0x70
 800378e:	e01c      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b05      	cmp	r3, #5
 8003796:	d10c      	bne.n	80037b2 <HAL_RCC_OscConfig+0x35e>
 8003798:	4b62      	ldr	r3, [pc, #392]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800379a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800379c:	4a61      	ldr	r2, [pc, #388]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800379e:	f043 0304 	orr.w	r3, r3, #4
 80037a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a4:	4b5f      	ldr	r3, [pc, #380]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a8:	4a5e      	ldr	r2, [pc, #376]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	f043 0301 	orr.w	r3, r3, #1
 80037ae:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b0:	e00b      	b.n	80037ca <HAL_RCC_OscConfig+0x376>
 80037b2:	4b5c      	ldr	r3, [pc, #368]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	4a5b      	ldr	r2, [pc, #364]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037b8:	f023 0301 	bic.w	r3, r3, #1
 80037bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037be:	4b59      	ldr	r3, [pc, #356]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a58      	ldr	r2, [pc, #352]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037c4:	f023 0304 	bic.w	r3, r3, #4
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d015      	beq.n	80037fe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d2:	f7fd fe6b 	bl	80014ac <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d8:	e00a      	b.n	80037f0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037da:	f7fd fe67 	bl	80014ac <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e0d8      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	4b4c      	ldr	r3, [pc, #304]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0ee      	beq.n	80037da <HAL_RCC_OscConfig+0x386>
 80037fc:	e014      	b.n	8003828 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fe:	f7fd fe55 	bl	80014ac <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003804:	e00a      	b.n	800381c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003806:	f7fd fe51 	bl	80014ac <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003814:	4293      	cmp	r3, r2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e0c2      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	4b41      	ldr	r3, [pc, #260]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800381e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ee      	bne.n	8003806 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003828:	7dfb      	ldrb	r3, [r7, #23]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d105      	bne.n	800383a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800382e:	4b3d      	ldr	r3, [pc, #244]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	4a3c      	ldr	r2, [pc, #240]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003834:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003838:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	699b      	ldr	r3, [r3, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	f000 80ae 	beq.w	80039a0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003844:	4b37      	ldr	r3, [pc, #220]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 030c 	and.w	r3, r3, #12
 800384c:	2b08      	cmp	r3, #8
 800384e:	d06d      	beq.n	800392c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	2b02      	cmp	r3, #2
 8003856:	d14b      	bne.n	80038f0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003858:	4b32      	ldr	r3, [pc, #200]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a31      	ldr	r2, [pc, #196]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 800385e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003862:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003864:	f7fd fe22 	bl	80014ac <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386a:	e008      	b.n	800387e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800386c:	f7fd fe1e 	bl	80014ac <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	2b02      	cmp	r3, #2
 8003878:	d901      	bls.n	800387e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800387a:	2303      	movs	r3, #3
 800387c:	e091      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	4b29      	ldr	r3, [pc, #164]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1f0      	bne.n	800386c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	69da      	ldr	r2, [r3, #28]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	019b      	lsls	r3, r3, #6
 800389a:	431a      	orrs	r2, r3
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a0:	085b      	lsrs	r3, r3, #1
 80038a2:	3b01      	subs	r3, #1
 80038a4:	041b      	lsls	r3, r3, #16
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	071b      	lsls	r3, r3, #28
 80038b6:	491b      	ldr	r1, [pc, #108]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038bc:	4b19      	ldr	r3, [pc, #100]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a18      	ldr	r2, [pc, #96]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038c8:	f7fd fdf0 	bl	80014ac <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ce:	e008      	b.n	80038e2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d0:	f7fd fdec 	bl	80014ac <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e05f      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e2:	4b10      	ldr	r3, [pc, #64]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0f0      	beq.n	80038d0 <HAL_RCC_OscConfig+0x47c>
 80038ee:	e057      	b.n	80039a0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fc:	f7fd fdd6 	bl	80014ac <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd fdd2 	bl	80014ac <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b03      	ldr	r3, [pc, #12]	@ (8003924 <HAL_RCC_OscConfig+0x4d0>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x4b0>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x54c>
 8003924:	40023800 	.word	0x40023800
 8003928:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800392c:	4b1f      	ldr	r3, [pc, #124]	@ (80039ac <HAL_RCC_OscConfig+0x558>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	2b01      	cmp	r3, #1
 8003938:	d030      	beq.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003944:	429a      	cmp	r2, r3
 8003946:	d129      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d122      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800395c:	4013      	ands	r3, r2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003962:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003964:	4293      	cmp	r3, r2
 8003966:	d119      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	085b      	lsrs	r3, r3, #1
 8003974:	3b01      	subs	r3, #1
 8003976:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003978:	429a      	cmp	r2, r3
 800397a:	d10f      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003986:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e0d0      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b67      	ldr	r3, [pc, #412]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	4965      	ldr	r1, [pc, #404]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b63      	ldr	r3, [pc, #396]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e0b8      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d020      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a10:	4b59      	ldr	r3, [pc, #356]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	4a58      	ldr	r2, [pc, #352]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a28:	4b53      	ldr	r3, [pc, #332]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a52      	ldr	r2, [pc, #328]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a34:	4b50      	ldr	r3, [pc, #320]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	494d      	ldr	r1, [pc, #308]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d040      	beq.n	8003ad4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d107      	bne.n	8003a6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a5a:	4b47      	ldr	r3, [pc, #284]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d115      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e07f      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a72:	4b41      	ldr	r3, [pc, #260]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d109      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e073      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a82:	4b3d      	ldr	r3, [pc, #244]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e06b      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a92:	4b39      	ldr	r3, [pc, #228]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f023 0203 	bic.w	r2, r3, #3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	4936      	ldr	r1, [pc, #216]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aa4:	f7fd fd02 	bl	80014ac <HAL_GetTick>
 8003aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	e00a      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fd fcfe 	bl	80014ac <HAL_GetTick>
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1ad3      	subs	r3, r2, r3
 8003ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e053      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 020c 	and.w	r2, r3, #12
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	009b      	lsls	r3, r3, #2
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d1eb      	bne.n	8003aac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b27      	ldr	r3, [pc, #156]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 030f 	and.w	r3, r3, #15
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d210      	bcs.n	8003b04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b24      	ldr	r3, [pc, #144]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f023 020f 	bic.w	r2, r3, #15
 8003aea:	4922      	ldr	r1, [pc, #136]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b20      	ldr	r3, [pc, #128]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e032      	b.n	8003b6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b10:	4b19      	ldr	r3, [pc, #100]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4916      	ldr	r1, [pc, #88]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d009      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b2e:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	00db      	lsls	r3, r3, #3
 8003b3c:	490e      	ldr	r1, [pc, #56]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b42:	f000 f821 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b46:	4602      	mov	r2, r0
 8003b48:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	091b      	lsrs	r3, r3, #4
 8003b4e:	f003 030f 	and.w	r3, r3, #15
 8003b52:	490a      	ldr	r1, [pc, #40]	@ (8003b7c <HAL_RCC_ClockConfig+0x1cc>)
 8003b54:	5ccb      	ldrb	r3, [r1, r3]
 8003b56:	fa22 f303 	lsr.w	r3, r2, r3
 8003b5a:	4a09      	ldr	r2, [pc, #36]	@ (8003b80 <HAL_RCC_ClockConfig+0x1d0>)
 8003b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b5e:	4b09      	ldr	r3, [pc, #36]	@ (8003b84 <HAL_RCC_ClockConfig+0x1d4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fd fc5e 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40023c00 	.word	0x40023c00
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08010054 	.word	0x08010054
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b8c:	b094      	sub	sp, #80	@ 0x50
 8003b8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b90:	2300      	movs	r3, #0
 8003b92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b94:	2300      	movs	r3, #0
 8003b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b98:	2300      	movs	r3, #0
 8003b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ba0:	4b79      	ldr	r3, [pc, #484]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	f003 030c 	and.w	r3, r3, #12
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d00d      	beq.n	8003bc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	f200 80e1 	bhi.w	8003d74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x34>
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d003      	beq.n	8003bc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bba:	e0db      	b.n	8003d74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bbc:	4b73      	ldr	r3, [pc, #460]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc0:	e0db      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bc2:	4b72      	ldr	r3, [pc, #456]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bc6:	e0d8      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d063      	beq.n	8003ca6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bde:	4b6a      	ldr	r3, [pc, #424]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	099b      	lsrs	r3, r3, #6
 8003be4:	2200      	movs	r2, #0
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003be8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bfa:	4622      	mov	r2, r4
 8003bfc:	462b      	mov	r3, r5
 8003bfe:	f04f 0000 	mov.w	r0, #0
 8003c02:	f04f 0100 	mov.w	r1, #0
 8003c06:	0159      	lsls	r1, r3, #5
 8003c08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c0c:	0150      	lsls	r0, r2, #5
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4621      	mov	r1, r4
 8003c14:	1a51      	subs	r1, r2, r1
 8003c16:	6139      	str	r1, [r7, #16]
 8003c18:	4629      	mov	r1, r5
 8003c1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c2c:	4659      	mov	r1, fp
 8003c2e:	018b      	lsls	r3, r1, #6
 8003c30:	4651      	mov	r1, sl
 8003c32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c36:	4651      	mov	r1, sl
 8003c38:	018a      	lsls	r2, r1, #6
 8003c3a:	4651      	mov	r1, sl
 8003c3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c40:	4659      	mov	r1, fp
 8003c42:	eb63 0901 	sbc.w	r9, r3, r1
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c5a:	4690      	mov	r8, r2
 8003c5c:	4699      	mov	r9, r3
 8003c5e:	4623      	mov	r3, r4
 8003c60:	eb18 0303 	adds.w	r3, r8, r3
 8003c64:	60bb      	str	r3, [r7, #8]
 8003c66:	462b      	mov	r3, r5
 8003c68:	eb49 0303 	adc.w	r3, r9, r3
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	f04f 0300 	mov.w	r3, #0
 8003c76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c7a:	4629      	mov	r1, r5
 8003c7c:	028b      	lsls	r3, r1, #10
 8003c7e:	4621      	mov	r1, r4
 8003c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c84:	4621      	mov	r1, r4
 8003c86:	028a      	lsls	r2, r1, #10
 8003c88:	4610      	mov	r0, r2
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c8e:	2200      	movs	r2, #0
 8003c90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c98:	f7fc fb22 	bl	80002e0 <__aeabi_uldivmod>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ca4:	e058      	b.n	8003d58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ca6:	4b38      	ldr	r3, [pc, #224]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	099b      	lsrs	r3, r3, #6
 8003cac:	2200      	movs	r2, #0
 8003cae:	4618      	mov	r0, r3
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cb6:	623b      	str	r3, [r7, #32]
 8003cb8:	2300      	movs	r3, #0
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	464b      	mov	r3, r9
 8003cc4:	f04f 0000 	mov.w	r0, #0
 8003cc8:	f04f 0100 	mov.w	r1, #0
 8003ccc:	0159      	lsls	r1, r3, #5
 8003cce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cd2:	0150      	lsls	r0, r2, #5
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4641      	mov	r1, r8
 8003cda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cde:	4649      	mov	r1, r9
 8003ce0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003cf0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003cf4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cf8:	ebb2 040a 	subs.w	r4, r2, sl
 8003cfc:	eb63 050b 	sbc.w	r5, r3, fp
 8003d00:	f04f 0200 	mov.w	r2, #0
 8003d04:	f04f 0300 	mov.w	r3, #0
 8003d08:	00eb      	lsls	r3, r5, #3
 8003d0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d0e:	00e2      	lsls	r2, r4, #3
 8003d10:	4614      	mov	r4, r2
 8003d12:	461d      	mov	r5, r3
 8003d14:	4643      	mov	r3, r8
 8003d16:	18e3      	adds	r3, r4, r3
 8003d18:	603b      	str	r3, [r7, #0]
 8003d1a:	464b      	mov	r3, r9
 8003d1c:	eb45 0303 	adc.w	r3, r5, r3
 8003d20:	607b      	str	r3, [r7, #4]
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	f04f 0300 	mov.w	r3, #0
 8003d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d2e:	4629      	mov	r1, r5
 8003d30:	028b      	lsls	r3, r1, #10
 8003d32:	4621      	mov	r1, r4
 8003d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d38:	4621      	mov	r1, r4
 8003d3a:	028a      	lsls	r2, r1, #10
 8003d3c:	4610      	mov	r0, r2
 8003d3e:	4619      	mov	r1, r3
 8003d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d42:	2200      	movs	r2, #0
 8003d44:	61bb      	str	r3, [r7, #24]
 8003d46:	61fa      	str	r2, [r7, #28]
 8003d48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d4c:	f7fc fac8 	bl	80002e0 <__aeabi_uldivmod>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4613      	mov	r3, r2
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d58:	4b0b      	ldr	r3, [pc, #44]	@ (8003d88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	0c1b      	lsrs	r3, r3, #16
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	005b      	lsls	r3, r3, #1
 8003d66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d72:	e002      	b.n	8003d7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d74:	4b05      	ldr	r3, [pc, #20]	@ (8003d8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3750      	adds	r7, #80	@ 0x50
 8003d80:	46bd      	mov	sp, r7
 8003d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d86:	bf00      	nop
 8003d88:	40023800 	.word	0x40023800
 8003d8c:	00f42400 	.word	0x00f42400

08003d90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d94:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d96:	681b      	ldr	r3, [r3, #0]
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	20000000 	.word	0x20000000

08003da8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dac:	f7ff fff0 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003db0:	4602      	mov	r2, r0
 8003db2:	4b05      	ldr	r3, [pc, #20]	@ (8003dc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	0a9b      	lsrs	r3, r3, #10
 8003db8:	f003 0307 	and.w	r3, r3, #7
 8003dbc:	4903      	ldr	r1, [pc, #12]	@ (8003dcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dbe:	5ccb      	ldrb	r3, [r1, r3]
 8003dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	08010064 	.word	0x08010064

08003dd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dd4:	f7ff ffdc 	bl	8003d90 <HAL_RCC_GetHCLKFreq>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	4b05      	ldr	r3, [pc, #20]	@ (8003df0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0b5b      	lsrs	r3, r3, #13
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	4903      	ldr	r1, [pc, #12]	@ (8003df4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003de6:	5ccb      	ldrb	r3, [r1, r3]
 8003de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40023800 	.word	0x40023800
 8003df4:	08010064 	.word	0x08010064

08003df8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e00:	2300      	movs	r3, #0
 8003e02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e10:	2300      	movs	r3, #0
 8003e12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d012      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e20:	4b69      	ldr	r3, [pc, #420]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a68      	ldr	r2, [pc, #416]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e26:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003e2a:	6093      	str	r3, [r2, #8]
 8003e2c:	4b66      	ldr	r3, [pc, #408]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e34:	4964      	ldr	r1, [pc, #400]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e42:	2301      	movs	r3, #1
 8003e44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d017      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e52:	4b5d      	ldr	r3, [pc, #372]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e58:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	4959      	ldr	r1, [pc, #356]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e6c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e70:	d101      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e72:	2301      	movs	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d017      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e8e:	4b4e      	ldr	r3, [pc, #312]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e94:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	494a      	ldr	r1, [pc, #296]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003eac:	d101      	bne.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0320 	and.w	r3, r3, #32
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 808b 	beq.w	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003edc:	4b3a      	ldr	r3, [pc, #232]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee0:	4a39      	ldr	r2, [pc, #228]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ee6:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ee8:	4b37      	ldr	r3, [pc, #220]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ef4:	4b35      	ldr	r3, [pc, #212]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a34      	ldr	r2, [pc, #208]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003efa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd fad4 	bl	80014ac <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f08:	f7fd fad0 	bl	80014ac <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	@ 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e38f      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f1a:	4b2c      	ldr	r3, [pc, #176]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0f0      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f26:	4b28      	ldr	r3, [pc, #160]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d035      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d02e      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f44:	4b20      	ldr	r3, [pc, #128]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f48:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f52:	4a1d      	ldr	r2, [pc, #116]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f58:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5e:	4a1a      	ldr	r2, [pc, #104]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f64:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f66:	4a18      	ldr	r2, [pc, #96]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f6c:	4b16      	ldr	r3, [pc, #88]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f70:	f003 0301 	and.w	r3, r3, #1
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d114      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fd fa98 	bl	80014ac <HAL_GetTick>
 8003f7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7e:	e00a      	b.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f80:	f7fd fa94 	bl	80014ac <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e351      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f96:	4b0c      	ldr	r3, [pc, #48]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f9a:	f003 0302 	and.w	r3, r3, #2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d0ee      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003faa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fae:	d111      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003fbc:	4b04      	ldr	r3, [pc, #16]	@ (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003fbe:	400b      	ands	r3, r1
 8003fc0:	4901      	ldr	r1, [pc, #4]	@ (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	0ffffcff 	.word	0x0ffffcff
 8003fd4:	4bac      	ldr	r3, [pc, #688]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4aab      	ldr	r2, [pc, #684]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fda:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003fde:	6093      	str	r3, [r2, #8]
 8003fe0:	4ba9      	ldr	r3, [pc, #676]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fec:	49a6      	ldr	r1, [pc, #664]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0310 	and.w	r3, r3, #16
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d010      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ffe:	4ba2      	ldr	r3, [pc, #648]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004000:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004004:	4aa0      	ldr	r2, [pc, #640]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004006:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800400a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800400e:	4b9e      	ldr	r3, [pc, #632]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004010:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	499b      	ldr	r1, [pc, #620]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d00a      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800402c:	4b96      	ldr	r3, [pc, #600]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004032:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800403a:	4993      	ldr	r1, [pc, #588]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00a      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800404e:	4b8e      	ldr	r3, [pc, #568]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004050:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004054:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800405c:	498a      	ldr	r1, [pc, #552]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405e:	4313      	orrs	r3, r2
 8004060:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00a      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004070:	4b85      	ldr	r3, [pc, #532]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800407e:	4982      	ldr	r1, [pc, #520]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	4313      	orrs	r3, r2
 8004082:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004092:	4b7d      	ldr	r3, [pc, #500]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004094:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004098:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	4979      	ldr	r1, [pc, #484]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d00a      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80040b4:	4b74      	ldr	r3, [pc, #464]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ba:	f023 0203 	bic.w	r2, r3, #3
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040c2:	4971      	ldr	r1, [pc, #452]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00a      	beq.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040d6:	4b6c      	ldr	r3, [pc, #432]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040dc:	f023 020c 	bic.w	r2, r3, #12
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040e4:	4968      	ldr	r1, [pc, #416]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00a      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040f8:	4b63      	ldr	r3, [pc, #396]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fe:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004106:	4960      	ldr	r1, [pc, #384]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004108:	4313      	orrs	r3, r2
 800410a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800411a:	4b5b      	ldr	r3, [pc, #364]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800411c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004120:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004128:	4957      	ldr	r1, [pc, #348]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	4313      	orrs	r3, r2
 800412c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800413c:	4b52      	ldr	r3, [pc, #328]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	494f      	ldr	r1, [pc, #316]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800414c:	4313      	orrs	r3, r2
 800414e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800415e:	4b4a      	ldr	r3, [pc, #296]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800416c:	4946      	ldr	r1, [pc, #280]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800416e:	4313      	orrs	r3, r2
 8004170:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004180:	4b41      	ldr	r3, [pc, #260]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004186:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800418e:	493e      	ldr	r1, [pc, #248]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004190:	4313      	orrs	r3, r2
 8004192:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80041a2:	4b39      	ldr	r3, [pc, #228]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80041b0:	4935      	ldr	r1, [pc, #212]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80041c4:	4b30      	ldr	r3, [pc, #192]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80041d2:	492d      	ldr	r1, [pc, #180]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d011      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041e6:	4b28      	ldr	r3, [pc, #160]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ec:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041f4:	4924      	ldr	r1, [pc, #144]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041f6:	4313      	orrs	r3, r2
 80041f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004200:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004204:	d101      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004206:	2301      	movs	r3, #1
 8004208:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d001      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004216:	2301      	movs	r3, #1
 8004218:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004226:	4b18      	ldr	r3, [pc, #96]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004234:	4914      	ldr	r1, [pc, #80]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004236:	4313      	orrs	r3, r2
 8004238:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00b      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004248:	4b0f      	ldr	r3, [pc, #60]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800424e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004258:	490b      	ldr	r1, [pc, #44]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425a:	4313      	orrs	r3, r2
 800425c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00f      	beq.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800426e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004272:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800427c:	4902      	ldr	r1, [pc, #8]	@ (8004288 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800427e:	4313      	orrs	r3, r2
 8004280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004284:	e002      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004286:	bf00      	nop
 8004288:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d00b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004298:	4b8a      	ldr	r3, [pc, #552]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800429e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a8:	4986      	ldr	r1, [pc, #536]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d00b      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80042bc:	4b81      	ldr	r3, [pc, #516]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042c2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042cc:	497d      	ldr	r1, [pc, #500]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d006      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 80d6 	beq.w	8004494 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80042e8:	4b76      	ldr	r3, [pc, #472]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a75      	ldr	r2, [pc, #468]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042ee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80042f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042f4:	f7fd f8da 	bl	80014ac <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80042fc:	f7fd f8d6 	bl	80014ac <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b64      	cmp	r3, #100	@ 0x64
 8004308:	d901      	bls.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e195      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800430e:	4b6d      	ldr	r3, [pc, #436]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d021      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800432a:	2b00      	cmp	r3, #0
 800432c:	d11d      	bne.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800432e:	4b65      	ldr	r3, [pc, #404]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004334:	0c1b      	lsrs	r3, r3, #16
 8004336:	f003 0303 	and.w	r3, r3, #3
 800433a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800433c:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004342:	0e1b      	lsrs	r3, r3, #24
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	019a      	lsls	r2, r3, #6
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	041b      	lsls	r3, r3, #16
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	061b      	lsls	r3, r3, #24
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	071b      	lsls	r3, r3, #28
 8004362:	4958      	ldr	r1, [pc, #352]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004364:	4313      	orrs	r3, r2
 8004366:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d004      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800437a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800437e:	d00a      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02e      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004390:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004394:	d129      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004396:	4b4b      	ldr	r3, [pc, #300]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004398:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800439c:	0c1b      	lsrs	r3, r3, #16
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80043a4:	4b47      	ldr	r3, [pc, #284]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043aa:	0f1b      	lsrs	r3, r3, #28
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	019a      	lsls	r2, r3, #6
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	041b      	lsls	r3, r3, #16
 80043bc:	431a      	orrs	r2, r3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	061b      	lsls	r3, r3, #24
 80043c4:	431a      	orrs	r2, r3
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	071b      	lsls	r3, r3, #28
 80043ca:	493e      	ldr	r1, [pc, #248]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80043d2:	4b3c      	ldr	r3, [pc, #240]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043d8:	f023 021f 	bic.w	r2, r3, #31
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e0:	3b01      	subs	r3, #1
 80043e2:	4938      	ldr	r1, [pc, #224]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d01d      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043f6:	4b33      	ldr	r3, [pc, #204]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043fc:	0e1b      	lsrs	r3, r3, #24
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004404:	4b2f      	ldr	r3, [pc, #188]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004406:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800440a:	0f1b      	lsrs	r3, r3, #28
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	019a      	lsls	r2, r3, #6
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	041b      	lsls	r3, r3, #16
 800441e:	431a      	orrs	r2, r3
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	061b      	lsls	r3, r3, #24
 8004424:	431a      	orrs	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	071b      	lsls	r3, r3, #28
 800442a:	4926      	ldr	r1, [pc, #152]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800442c:	4313      	orrs	r3, r2
 800442e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d011      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	019a      	lsls	r2, r3, #6
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	041b      	lsls	r3, r3, #16
 800444a:	431a      	orrs	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	061b      	lsls	r3, r3, #24
 8004452:	431a      	orrs	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	491a      	ldr	r1, [pc, #104]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004462:	4b18      	ldr	r3, [pc, #96]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a17      	ldr	r2, [pc, #92]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004468:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800446c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800446e:	f7fd f81d 	bl	80014ac <HAL_GetTick>
 8004472:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004474:	e008      	b.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004476:	f7fd f819 	bl	80014ac <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	2b64      	cmp	r3, #100	@ 0x64
 8004482:	d901      	bls.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e0d8      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004488:	4b0e      	ldr	r3, [pc, #56]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d0f0      	beq.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	2b01      	cmp	r3, #1
 8004498:	f040 80ce 	bne.w	8004638 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800449c:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a08      	ldr	r2, [pc, #32]	@ (80044c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a8:	f7fd f800 	bl	80014ac <HAL_GetTick>
 80044ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044ae:	e00b      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044b0:	f7fc fffc 	bl	80014ac <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	@ 0x64
 80044bc:	d904      	bls.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e0bb      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80044c2:	bf00      	nop
 80044c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80044c8:	4b5e      	ldr	r3, [pc, #376]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d4:	d0ec      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d003      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02e      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d12a      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044fe:	4b51      	ldr	r3, [pc, #324]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004500:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004504:	0c1b      	lsrs	r3, r3, #16
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800450c:	4b4d      	ldr	r3, [pc, #308]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800450e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004512:	0f1b      	lsrs	r3, r3, #28
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	019a      	lsls	r2, r3, #6
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	431a      	orrs	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	061b      	lsls	r3, r3, #24
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	071b      	lsls	r3, r3, #28
 8004532:	4944      	ldr	r1, [pc, #272]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004534:	4313      	orrs	r3, r2
 8004536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800453a:	4b42      	ldr	r3, [pc, #264]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800453c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004540:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004548:	3b01      	subs	r3, #1
 800454a:	021b      	lsls	r3, r3, #8
 800454c:	493d      	ldr	r1, [pc, #244]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454e:	4313      	orrs	r3, r2
 8004550:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800455c:	2b00      	cmp	r3, #0
 800455e:	d022      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004564:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004568:	d11d      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800456a:	4b36      	ldr	r3, [pc, #216]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	0e1b      	lsrs	r3, r3, #24
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004578:	4b32      	ldr	r3, [pc, #200]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800457a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800457e:	0f1b      	lsrs	r3, r3, #28
 8004580:	f003 0307 	and.w	r3, r3, #7
 8004584:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
 800458a:	019a      	lsls	r2, r3, #6
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	041b      	lsls	r3, r3, #16
 8004592:	431a      	orrs	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	061b      	lsls	r3, r3, #24
 8004598:	431a      	orrs	r2, r3
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	071b      	lsls	r3, r3, #28
 800459e:	4929      	ldr	r1, [pc, #164]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045a0:	4313      	orrs	r3, r2
 80045a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d028      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045b2:	4b24      	ldr	r3, [pc, #144]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045b8:	0e1b      	lsrs	r3, r3, #24
 80045ba:	f003 030f 	and.w	r3, r3, #15
 80045be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80045c0:	4b20      	ldr	r3, [pc, #128]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c6:	0c1b      	lsrs	r3, r3, #16
 80045c8:	f003 0303 	and.w	r3, r3, #3
 80045cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	695b      	ldr	r3, [r3, #20]
 80045d2:	019a      	lsls	r2, r3, #6
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	041b      	lsls	r3, r3, #16
 80045d8:	431a      	orrs	r2, r3
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	061b      	lsls	r3, r3, #24
 80045de:	431a      	orrs	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	69db      	ldr	r3, [r3, #28]
 80045e4:	071b      	lsls	r3, r3, #28
 80045e6:	4917      	ldr	r1, [pc, #92]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80045ee:	4b15      	ldr	r3, [pc, #84]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045f4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4911      	ldr	r1, [pc, #68]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004604:	4b0f      	ldr	r3, [pc, #60]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a0e      	ldr	r2, [pc, #56]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800460a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800460e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004610:	f7fc ff4c 	bl	80014ac <HAL_GetTick>
 8004614:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004618:	f7fc ff48 	bl	80014ac <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b64      	cmp	r3, #100	@ 0x64
 8004624:	d901      	bls.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e007      	b.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004632:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004636:	d1ef      	bne.n	8004618 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3720      	adds	r7, #32
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800

08004648 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8004650:	2300      	movs	r3, #0
 8004652:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 800465c:	2300      	movs	r3, #0
 800465e:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004666:	f040 80a4 	bne.w	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800466a:	4ba6      	ldr	r3, [pc, #664]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800466c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004670:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004678:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004680:	f000 808a 	beq.w	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800468a:	f200 8091 	bhi.w	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004694:	d07d      	beq.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800469c:	f200 8088 	bhi.w	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d004      	beq.n	80046b0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80046ac:	d039      	beq.n	8004722 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80046ae:	e07f      	b.n	80047b0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80046b0:	4b94      	ldr	r3, [pc, #592]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d108      	bne.n	80046ce <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80046bc:	4b91      	ldr	r3, [pc, #580]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c4:	4a90      	ldr	r2, [pc, #576]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ca:	613b      	str	r3, [r7, #16]
 80046cc:	e007      	b.n	80046de <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80046ce:	4b8d      	ldr	r3, [pc, #564]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046d6:	4a8c      	ldr	r2, [pc, #560]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80046d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046dc:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80046de:	4b89      	ldr	r3, [pc, #548]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80046e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046e4:	0e1b      	lsrs	r3, r3, #24
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80046ec:	4b85      	ldr	r3, [pc, #532]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	099b      	lsrs	r3, r3, #6
 80046f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	fb03 f202 	mul.w	r2, r3, r2
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	fbb2 f3f3 	udiv	r3, r2, r3
 8004704:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004706:	4b7f      	ldr	r3, [pc, #508]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004708:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800470c:	0a1b      	lsrs	r3, r3, #8
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	3301      	adds	r3, #1
 8004714:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	fbb2 f3f3 	udiv	r3, r2, r3
 800471e:	617b      	str	r3, [r7, #20]
        break;
 8004720:	e047      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004722:	4b78      	ldr	r3, [pc, #480]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d108      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800472e:	4b75      	ldr	r3, [pc, #468]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004736:	4a74      	ldr	r2, [pc, #464]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	613b      	str	r3, [r7, #16]
 800473e:	e007      	b.n	8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004740:	4b70      	ldr	r3, [pc, #448]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004748:	4a6f      	ldr	r2, [pc, #444]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800474a:	fbb2 f3f3 	udiv	r3, r2, r3
 800474e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8004750:	4b6c      	ldr	r3, [pc, #432]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004752:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004756:	0e1b      	lsrs	r3, r3, #24
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800475e:	4b69      	ldr	r3, [pc, #420]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004760:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004764:	099b      	lsrs	r3, r3, #6
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	fb03 f202 	mul.w	r2, r3, r2
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	fbb2 f3f3 	udiv	r3, r2, r3
 8004776:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8004778:	4b62      	ldr	r3, [pc, #392]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800477a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800477e:	f003 031f 	and.w	r3, r3, #31
 8004782:	3301      	adds	r3, #1
 8004784:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	617b      	str	r3, [r7, #20]
        break;
 8004790:	e00f      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 8004792:	4b5e      	ldr	r3, [pc, #376]	@ (800490c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8004794:	617b      	str	r3, [r7, #20]
        break;
 8004796:	e00c      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004798:	4b5a      	ldr	r3, [pc, #360]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d102      	bne.n	80047aa <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80047a4:	4b58      	ldr	r3, [pc, #352]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80047a6:	617b      	str	r3, [r7, #20]
        break;
 80047a8:	e003      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 80047aa:	4b57      	ldr	r3, [pc, #348]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80047ac:	617b      	str	r3, [r7, #20]
        break;
 80047ae:	e000      	b.n	80047b2 <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 80047b0:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047b8:	f040 80ab 	bne.w	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
  {
    saiclocksource = RCC->DCKCFGR1;
 80047bc:	4b51      	ldr	r3, [pc, #324]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80047be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c2:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80047ca:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047d2:	f000 808a 	beq.w	80048ea <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047dc:	f200 8098 	bhi.w	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047e6:	d07d      	beq.n	80048e4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047ee:	f200 808f 	bhi.w	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d004      	beq.n	8004802 <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047fe:	d039      	beq.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8004800:	e086      	b.n	8004910 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004802:	4b40      	ldr	r3, [pc, #256]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d108      	bne.n	8004820 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800480e:	4b3d      	ldr	r3, [pc, #244]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004816:	4a3c      	ldr	r2, [pc, #240]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8004818:	fbb2 f3f3 	udiv	r3, r2, r3
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	e007      	b.n	8004830 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004820:	4b38      	ldr	r3, [pc, #224]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004828:	4a37      	ldr	r2, [pc, #220]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8004830:	4b34      	ldr	r3, [pc, #208]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004836:	0e1b      	lsrs	r3, r3, #24
 8004838:	f003 030f 	and.w	r3, r3, #15
 800483c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800483e:	4b31      	ldr	r3, [pc, #196]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004844:	099b      	lsrs	r3, r3, #6
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	fb03 f202 	mul.w	r2, r3, r2
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	fbb2 f3f3 	udiv	r3, r2, r3
 8004856:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8004858:	4b2a      	ldr	r3, [pc, #168]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800485a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800485e:	0a1b      	lsrs	r3, r3, #8
 8004860:	f003 031f 	and.w	r3, r3, #31
 8004864:	3301      	adds	r3, #1
 8004866:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004870:	617b      	str	r3, [r7, #20]
        break;
 8004872:	e04e      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8004874:	4b23      	ldr	r3, [pc, #140]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d108      	bne.n	8004892 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004880:	4b20      	ldr	r3, [pc, #128]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004888:	4a1f      	ldr	r2, [pc, #124]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800488a:	fbb2 f3f3 	udiv	r3, r2, r3
 800488e:	613b      	str	r3, [r7, #16]
 8004890:	e007      	b.n	80048a2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8004892:	4b1c      	ldr	r3, [pc, #112]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800489a:	4a1b      	ldr	r2, [pc, #108]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80048a2:	4b18      	ldr	r3, [pc, #96]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80048a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048a8:	0e1b      	lsrs	r3, r3, #24
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80048b0:	4b14      	ldr	r3, [pc, #80]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80048b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048b6:	099b      	lsrs	r3, r3, #6
 80048b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	fb03 f202 	mul.w	r2, r3, r2
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80048ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	3301      	adds	r3, #1
 80048d6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80048d8:	697a      	ldr	r2, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e0:	617b      	str	r3, [r7, #20]
        break;
 80048e2:	e016      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 80048e4:	4b09      	ldr	r3, [pc, #36]	@ (800490c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80048e6:	617b      	str	r3, [r7, #20]
        break;
 80048e8:	e013      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80048ea:	4b06      	ldr	r3, [pc, #24]	@ (8004904 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d102      	bne.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 80048f6:	4b04      	ldr	r3, [pc, #16]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80048f8:	617b      	str	r3, [r7, #20]
        break;
 80048fa:	e00a      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
          frequency = HSE_VALUE;
 80048fc:	4b02      	ldr	r3, [pc, #8]	@ (8004908 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80048fe:	617b      	str	r3, [r7, #20]
        break;
 8004900:	e007      	b.n	8004912 <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800
 8004908:	00f42400 	.word	0x00f42400
 800490c:	00bb8000 	.word	0x00bb8000
        break;
 8004910:	bf00      	nop
      }
    }
  }

  return frequency;
 8004912:	697b      	ldr	r3, [r7, #20]
}
 8004914:	4618      	mov	r0, r3
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8004928:	2300      	movs	r3, #0
 800492a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8004930:	2300      	movs	r3, #0
 8004932:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e156      	b.n	8004bec <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fc fa22 	bl	8000d9c <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fc51 	bl	8005208 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d00c      	beq.n	8004988 <HAL_SAI_Init+0x68>
 800496e:	2b02      	cmp	r3, #2
 8004970:	d80d      	bhi.n	800498e <HAL_SAI_Init+0x6e>
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_SAI_Init+0x5c>
 8004976:	2b01      	cmp	r3, #1
 8004978:	d003      	beq.n	8004982 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800497a:	e008      	b.n	800498e <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	61fb      	str	r3, [r7, #28]
      break;
 8004980:	e006      	b.n	8004990 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004982:	2310      	movs	r3, #16
 8004984:	61fb      	str	r3, [r7, #28]
      break;
 8004986:	e003      	b.n	8004990 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004988:	2320      	movs	r3, #32
 800498a:	61fb      	str	r3, [r7, #28]
      break;
 800498c:	e000      	b.n	8004990 <HAL_SAI_Init+0x70>
      break;
 800498e:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	2b03      	cmp	r3, #3
 8004996:	d81e      	bhi.n	80049d6 <HAL_SAI_Init+0xb6>
 8004998:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <HAL_SAI_Init+0x80>)
 800499a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499e:	bf00      	nop
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049b7 	.word	0x080049b7
 80049a8:	080049bf 	.word	0x080049bf
 80049ac:	080049c7 	.word	0x080049c7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]
    }
    break;
 80049b4:	e010      	b.n	80049d8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80049b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ba:	617b      	str	r3, [r7, #20]
    }
    break;
 80049bc:	e00c      	b.n	80049d8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80049be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049c2:	617b      	str	r3, [r7, #20]
    }
    break;
 80049c4:	e008      	b.n	80049d8 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80049c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80049ca:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	f043 0301 	orr.w	r3, r3, #1
 80049d2:	61fb      	str	r3, [r7, #28]
    }
    break;
 80049d4:	e000      	b.n	80049d8 <HAL_SAI_Init+0xb8>
    default:
      break;
 80049d6:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a85      	ldr	r2, [pc, #532]	@ (8004bf4 <HAL_SAI_Init+0x2d4>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_SAI_Init+0xcc>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a84      	ldr	r2, [pc, #528]	@ (8004bf8 <HAL_SAI_Init+0x2d8>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d103      	bne.n	80049f4 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80049ec:	4a83      	ldr	r2, [pc, #524]	@ (8004bfc <HAL_SAI_Init+0x2dc>)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	e002      	b.n	80049fa <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80049f4:	4a82      	ldr	r2, [pc, #520]	@ (8004c00 <HAL_SAI_Init+0x2e0>)
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d04c      	beq.n	8004a9c <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8004a02:	2300      	movs	r3, #0
 8004a04:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a7a      	ldr	r2, [pc, #488]	@ (8004bf4 <HAL_SAI_Init+0x2d4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_SAI_Init+0xfa>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a78      	ldr	r2, [pc, #480]	@ (8004bf8 <HAL_SAI_Init+0x2d8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d104      	bne.n	8004a24 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004a1a:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004a1e:	f7ff fe13 	bl	8004648 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a22:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a76      	ldr	r2, [pc, #472]	@ (8004c04 <HAL_SAI_Init+0x2e4>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_SAI_Init+0x118>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a75      	ldr	r2, [pc, #468]	@ (8004c08 <HAL_SAI_Init+0x2e8>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d104      	bne.n	8004a42 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004a38:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004a3c:	f7ff fe04 	bl	8004648 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a40:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	4613      	mov	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	4413      	add	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	025b      	lsls	r3, r3, #9
 8004a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a58:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a6b      	ldr	r2, [pc, #428]	@ (8004c0c <HAL_SAI_Init+0x2ec>)
 8004a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a62:	08da      	lsrs	r2, r3, #3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8004a68:	68f9      	ldr	r1, [r7, #12]
 8004a6a:	4b68      	ldr	r3, [pc, #416]	@ (8004c0c <HAL_SAI_Init+0x2ec>)
 8004a6c:	fba3 2301 	umull	r2, r3, r3, r1
 8004a70:	08da      	lsrs	r2, r3, #3
 8004a72:	4613      	mov	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	005b      	lsls	r3, r3, #1
 8004a7a:	1aca      	subs	r2, r1, r3
 8004a7c:	2a08      	cmp	r2, #8
 8004a7e:	d904      	bls.n	8004a8a <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	1c5a      	adds	r2, r3, #1
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d104      	bne.n	8004a9c <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	085a      	lsrs	r2, r3, #1
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d003      	beq.n	8004aac <HAL_SAI_Init+0x18c>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d109      	bne.n	8004ac0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d101      	bne.n	8004ab8 <HAL_SAI_Init+0x198>
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	e001      	b.n	8004abc <HAL_SAI_Init+0x19c>
 8004ab8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e008      	b.n	8004ad2 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d102      	bne.n	8004ace <HAL_SAI_Init+0x1ae>
 8004ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004acc:	e000      	b.n	8004ad0 <HAL_SAI_Init+0x1b0>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6819      	ldr	r1, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	4b4c      	ldr	r3, [pc, #304]	@ (8004c10 <HAL_SAI_Init+0x2f0>)
 8004ade:	400b      	ands	r3, r1
 8004ae0:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6819      	ldr	r1, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004af0:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004af6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afc:	431a      	orrs	r2, r3
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8004b0a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004b16:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6a1b      	ldr	r3, [r3, #32]
 8004b1c:	051b      	lsls	r3, r3, #20
 8004b1e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	430a      	orrs	r2, r1
 8004b26:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	6859      	ldr	r1, [r3, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4b38      	ldr	r3, [pc, #224]	@ (8004c14 <HAL_SAI_Init+0x2f4>)
 8004b34:	400b      	ands	r3, r1
 8004b36:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	6859      	ldr	r1, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	699a      	ldr	r2, [r3, #24]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b46:	431a      	orrs	r2, r3
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4c:	431a      	orrs	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6899      	ldr	r1, [r3, #8]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	4b2d      	ldr	r3, [pc, #180]	@ (8004c18 <HAL_SAI_Init+0x2f8>)
 8004b62:	400b      	ands	r3, r1
 8004b64:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	6899      	ldr	r1, [r3, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b70:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004b76:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004b7c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004b82:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004b8c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68d9      	ldr	r1, [r3, #12]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004ba4:	400b      	ands	r3, r1
 8004ba6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68d9      	ldr	r1, [r3, #12]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bbc:	041b      	lsls	r3, r3, #16
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	021b      	lsls	r3, r3, #8
 8004bc8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2200      	movs	r2, #0
 8004be6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004bea:	2300      	movs	r3, #0
}
 8004bec:	4618      	mov	r0, r3
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40015804 	.word	0x40015804
 8004bf8:	40015824 	.word	0x40015824
 8004bfc:	40015800 	.word	0x40015800
 8004c00:	40015c00 	.word	0x40015c00
 8004c04:	40015c04 	.word	0x40015c04
 8004c08:	40015c24 	.word	0x40015c24
 8004c0c:	cccccccd 	.word	0xcccccccd
 8004c10:	ff05c010 	.word	0xff05c010
 8004c14:	ffff1ff0 	.word	0xffff1ff0
 8004c18:	fff88000 	.word	0xfff88000

08004c1c <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c24:	2300      	movs	r3, #0
 8004c26:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_SAI_Abort+0x1a>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e072      	b.n	8004d1c <HAL_SAI_Abort+0x100>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fae2 	bl	8005208 <SAI_Disable>

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c52:	d149      	bne.n	8004ce8 <HAL_SAI_Abort+0xcc>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	681a      	ldr	r2, [r3, #0]
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004c62:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d01c      	beq.n	8004ca6 <HAL_SAI_Abort+0x8a>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	2b12      	cmp	r3, #18
 8004c76:	d116      	bne.n	8004ca6 <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f7fc fe65 	bl	800194c <HAL_DMA_Abort>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d00e      	beq.n	8004ca6 <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c8e:	2b80      	cmp	r3, #128	@ 0x80
 8004c90:	d009      	beq.n	8004ca6 <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d01c      	beq.n	8004ce8 <HAL_SAI_Abort+0xcc>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b22      	cmp	r3, #34	@ 0x22
 8004cb8:	d116      	bne.n	8004ce8 <HAL_SAI_Abort+0xcc>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fc fe44 	bl	800194c <HAL_DMA_Abort>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00e      	beq.n	8004ce8 <HAL_SAI_Abort+0xcc>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cd0:	2b80      	cmp	r3, #128	@ 0x80
 8004cd2:	d009      	beq.n	8004ce8 <HAL_SAI_Abort+0xcc>
        {
          status = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cde:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2200      	movs	r2, #0
 8004cee:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cf8:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f042 0208 	orr.w	r2, r2, #8
 8004d08:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3710      	adds	r7, #16
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}

08004d24 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	60b9      	str	r1, [r7, #8]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d002      	beq.n	8004d3e <HAL_SAI_Receive_DMA+0x1a>
 8004d38:	88fb      	ldrh	r3, [r7, #6]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d101      	bne.n	8004d42 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e074      	b.n	8004e2c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d16d      	bne.n	8004e2a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d101      	bne.n	8004d5c <HAL_SAI_Receive_DMA+0x38>
 8004d58:	2302      	movs	r3, #2
 8004d5a:	e067      	b.n	8004e2c <HAL_SAI_Receive_DMA+0x108>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	88fa      	ldrh	r2, [r7, #6]
 8004d6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	88fa      	ldrh	r2, [r7, #6]
 8004d76:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2222      	movs	r2, #34	@ 0x22
 8004d86:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d8e:	4a29      	ldr	r2, [pc, #164]	@ (8004e34 <HAL_SAI_Receive_DMA+0x110>)
 8004d90:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d96:	4a28      	ldr	r2, [pc, #160]	@ (8004e38 <HAL_SAI_Receive_DMA+0x114>)
 8004d98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	4a27      	ldr	r2, [pc, #156]	@ (8004e3c <HAL_SAI_Receive_DMA+0x118>)
 8004da0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004da6:	2200      	movs	r2, #0
 8004da8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	331c      	adds	r3, #28
 8004db4:	4619      	mov	r1, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8004dc2:	f7fc fd63 	bl	800188c <HAL_DMA_Start_IT>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e029      	b.n	8004e2c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004dd8:	2100      	movs	r1, #0
 8004dda:	68f8      	ldr	r0, [r7, #12]
 8004ddc:	f000 f9de 	bl	800519c <SAI_InterruptFlag>
 8004de0:	4601      	mov	r1, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	691a      	ldr	r2, [r3, #16]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004dfe:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d107      	bne.n	8004e1e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004e1c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e26:	2300      	movs	r3, #0
 8004e28:	e000      	b.n	8004e2c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8004e2a:	2302      	movs	r3, #2
  }
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	080052d9 	.word	0x080052d9
 8004e38:	08005279 	.word	0x08005279
 8004e3c:	080052f5 	.word	0x080052f5

08004e40 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 8192 	beq.w	800517a <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	691b      	ldr	r3, [r3, #16]
 8004e64:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f003 0308 	and.w	r3, r3, #8
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d009      	beq.n	8004e8c <HAL_SAI_IRQHandler+0x4c>
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	f003 0308 	and.w	r3, r3, #8
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d004      	beq.n	8004e8c <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	4798      	blx	r3
 8004e8a:	e176      	b.n	800517a <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d01e      	beq.n	8004ed4 <HAL_SAI_IRQHandler+0x94>
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d019      	beq.n	8004ed4 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b22      	cmp	r3, #34	@ 0x22
 8004eb2:	d101      	bne.n	8004eb8 <HAL_SAI_IRQHandler+0x78>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <HAL_SAI_IRQHandler+0x7a>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	431a      	orrs	r2, r3
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f95b 	bl	8005188 <HAL_SAI_ErrorCallback>
 8004ed2:	e152      	b.n	800517a <HAL_SAI_IRQHandler+0x33a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d011      	beq.n	8004f02 <HAL_SAI_IRQHandler+0xc2>
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	f003 0302 	and.w	r3, r3, #2
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d00c      	beq.n	8004f02 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2202      	movs	r2, #2
 8004eee:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8140 	beq.w	800517a <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004efe:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 8004f00:	e13b      	b.n	800517a <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 0320 	and.w	r3, r3, #32
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d057      	beq.n	8004fbc <HAL_SAI_IRQHandler+0x17c>
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d052      	beq.n	8004fbc <HAL_SAI_IRQHandler+0x17c>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f24:	f043 0204 	orr.w	r2, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d03a      	beq.n	8004fae <HAL_SAI_IRQHandler+0x16e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d018      	beq.n	8004f72 <HAL_SAI_IRQHandler+0x132>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f44:	4a8f      	ldr	r2, [pc, #572]	@ (8005184 <HAL_SAI_IRQHandler+0x344>)
 8004f46:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f7fc fd6d 	bl	8001a2c <HAL_DMA_Abort_IT>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 810b 	beq.w	8005170 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f90c 	bl	8005188 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f70:	e0fe      	b.n	8005170 <HAL_SAI_IRQHandler+0x330>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        else if (hsai->hdmarx != NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 80fa 	beq.w	8005170 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f80:	4a80      	ldr	r2, [pc, #512]	@ (8005184 <HAL_SAI_IRQHandler+0x344>)
 8004f82:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fc fd4f 	bl	8001a2c <HAL_DMA_Abort_IT>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 80ed 	beq.w	8005170 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 f8ee 	bl	8005188 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fac:	e0e0      	b.n	8005170 <HAL_SAI_IRQHandler+0x330>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fe34 	bl	8004c1c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8e7 	bl	8005188 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fba:	e0d9      	b.n	8005170 <HAL_SAI_IRQHandler+0x330>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d057      	beq.n	8005076 <HAL_SAI_IRQHandler+0x236>
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d052      	beq.n	8005076 <HAL_SAI_IRQHandler+0x236>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2240      	movs	r2, #64	@ 0x40
 8004fd6:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fde:	f043 0208 	orr.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d03a      	beq.n	8005068 <HAL_SAI_IRQHandler+0x228>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d018      	beq.n	800502c <HAL_SAI_IRQHandler+0x1ec>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ffe:	4a61      	ldr	r2, [pc, #388]	@ (8005184 <HAL_SAI_IRQHandler+0x344>)
 8005000:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005006:	4618      	mov	r0, r3
 8005008:	f7fc fd10 	bl	8001a2c <HAL_DMA_Abort_IT>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80b0 	beq.w	8005174 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800501a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f8af 	bl	8005188 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800502a:	e0a3      	b.n	8005174 <HAL_SAI_IRQHandler+0x334>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        else if (hsai->hdmarx != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 809f 	beq.w	8005174 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800503a:	4a52      	ldr	r2, [pc, #328]	@ (8005184 <HAL_SAI_IRQHandler+0x344>)
 800503c:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005042:	4618      	mov	r0, r3
 8005044:	f7fc fcf2 	bl	8001a2c <HAL_DMA_Abort_IT>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 8092 	beq.w	8005174 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005056:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 f891 	bl	8005188 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005066:	e085      	b.n	8005174 <HAL_SAI_IRQHandler+0x334>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fdd7 	bl	8004c1c <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 f88a 	bl	8005188 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005074:	e07e      	b.n	8005174 <HAL_SAI_IRQHandler+0x334>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d05d      	beq.n	800513c <HAL_SAI_IRQHandler+0x2fc>
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d058      	beq.n	800513c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2204      	movs	r2, #4
 8005090:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005098:	f043 0220 	orr.w	r2, r3, #32
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d017      	beq.n	80050da <HAL_SAI_IRQHandler+0x29a>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ae:	4a35      	ldr	r2, [pc, #212]	@ (8005184 <HAL_SAI_IRQHandler+0x344>)
 80050b0:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fc fcb8 	bl	8001a2c <HAL_DMA_Abort_IT>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d05a      	beq.n	8005178 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050c8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 f858 	bl	8005188 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 80050d8:	e04e      	b.n	8005178 <HAL_SAI_IRQHandler+0x338>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
      }
      else if (hsai->hdmarx != NULL)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d017      	beq.n	8005112 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050e6:	4a27      	ldr	r2, [pc, #156]	@ (8005184 <HAL_SAI_IRQHandler+0x344>)
 80050e8:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ee:	4618      	mov	r0, r3
 80050f0:	f7fc fc9c 	bl	8001a2c <HAL_DMA_Abort_IT>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d03e      	beq.n	8005178 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005100:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f83c 	bl	8005188 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8005110:	e032      	b.n	8005178 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2200      	movs	r2, #0
 8005118:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f04f 32ff 	mov.w	r2, #4294967295
 8005122:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f827 	bl	8005188 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 800513a:	e01d      	b.n	8005178 <HAL_SAI_IRQHandler+0x338>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	d019      	beq.n	800517a <HAL_SAI_IRQHandler+0x33a>
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f003 0310 	and.w	r3, r3, #16
 800514c:	2b00      	cmp	r3, #0
 800514e:	d014      	beq.n	800517a <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2210      	movs	r2, #16
 8005156:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515e:	f043 0210 	orr.w	r2, r3, #16
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f80d 	bl	8005188 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 800516e:	e004      	b.n	800517a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005170:	bf00      	nop
 8005172:	e002      	b.n	800517a <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005174:	bf00      	nop
 8005176:	e000      	b.n	800517a <HAL_SAI_IRQHandler+0x33a>
      if (hsai->hdmatx != NULL)
 8005178:	bf00      	nop
}
 800517a:	bf00      	nop
 800517c:	3718      	adds	r7, #24
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	0800535b 	.word	0x0800535b

08005188 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d103      	bne.n	80051b8 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f043 0308 	orr.w	r3, r3, #8
 80051b6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d10b      	bne.n	80051d8 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d003      	beq.n	80051d0 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d103      	bne.n	80051d8 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f043 0310 	orr.w	r3, r3, #16
 80051d6:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	2b03      	cmp	r3, #3
 80051de:	d003      	beq.n	80051e8 <SAI_InterruptFlag+0x4c>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d104      	bne.n	80051f2 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e003      	b.n	80051fa <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f043 0304 	orr.w	r3, r3, #4
 80051f8:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80051fa:	68fb      	ldr	r3, [r7, #12]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3714      	adds	r7, #20
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8005210:	4b17      	ldr	r3, [pc, #92]	@ (8005270 <SAI_Disable+0x68>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a17      	ldr	r2, [pc, #92]	@ (8005274 <SAI_Disable+0x6c>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	0b1b      	lsrs	r3, r3, #12
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005232:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	1e5a      	subs	r2, r3, #1
 8005238:	60fa      	str	r2, [r7, #12]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005244:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	72fb      	strb	r3, [r7, #11]
      break;
 8005252:	e006      	b.n	8005262 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1e8      	bne.n	8005234 <SAI_Disable+0x2c>

  return status;
 8005262:	7afb      	ldrb	r3, [r7, #11]
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	20000000 	.word	0x20000000
 8005274:	95cbec1b 	.word	0x95cbec1b

08005278 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005284:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800528e:	d01c      	beq.n	80052ca <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	681a      	ldr	r2, [r3, #0]
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800529e:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2200      	movs	r2, #0
 80052a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80052a8:	2100      	movs	r1, #0
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f7ff ff76 	bl	800519c <SAI_InterruptFlag>
 80052b0:	4603      	mov	r3, r0
 80052b2:	43d9      	mvns	r1, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	691a      	ldr	r2, [r3, #16]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	400a      	ands	r2, r1
 80052c0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7fb fc20 	bl	8000b10 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80052e6:	68f8      	ldr	r0, [r7, #12]
 80052e8:	f7fb fbac 	bl	8000a44 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005308:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005316:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005318:	2b01      	cmp	r3, #1
 800531a:	d004      	beq.n	8005326 <SAI_DMAError+0x32>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005322:	2b01      	cmp	r3, #1
 8005324:	d112      	bne.n	800534c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005334:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff ff66 	bl	8005208 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	f7ff ff1b 	bl	8005188 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8005352:	bf00      	nop
 8005354:	3710      	adds	r7, #16
 8005356:	46bd      	mov	sp, r7
 8005358:	bd80      	pop	{r7, pc}

0800535a <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800535a:	b580      	push	{r7, lr}
 800535c:	b084      	sub	sp, #16
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005376:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2200      	movs	r2, #0
 800537e:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f04f 32ff 	mov.w	r2, #4294967295
 8005388:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005390:	2b20      	cmp	r3, #32
 8005392:	d00a      	beq.n	80053aa <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8005394:	68f8      	ldr	r0, [r7, #12]
 8005396:	f7ff ff37 	bl	8005208 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685a      	ldr	r2, [r3, #4]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f042 0208 	orr.w	r2, r2, #8
 80053a8:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fee4 	bl	8005188 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e040      	b.n	800545c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d106      	bne.n	80053f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fb fc3c 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2224      	movs	r2, #36	@ 0x24
 80053f4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f022 0201 	bic.w	r2, r2, #1
 8005404:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 fe34 	bl	800607c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fbcd 	bl	8005bb4 <UART_SetConfig>
 800541a:	4603      	mov	r3, r0
 800541c:	2b01      	cmp	r3, #1
 800541e:	d101      	bne.n	8005424 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e01b      	b.n	800545c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005432:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005442:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f042 0201 	orr.w	r2, r2, #1
 8005452:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005454:	6878      	ldr	r0, [r7, #4]
 8005456:	f000 feb3 	bl	80061c0 <UART_CheckIdleState>
 800545a:	4603      	mov	r3, r0
}
 800545c:	4618      	mov	r0, r3
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b08a      	sub	sp, #40	@ 0x28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	4613      	mov	r3, r2
 8005470:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005476:	2b20      	cmp	r3, #32
 8005478:	d165      	bne.n	8005546 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d002      	beq.n	8005486 <HAL_UART_Transmit_DMA+0x22>
 8005480:	88fb      	ldrh	r3, [r7, #6]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d101      	bne.n	800548a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e05e      	b.n	8005548 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	68ba      	ldr	r2, [r7, #8]
 800548e:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	88fa      	ldrh	r2, [r7, #6]
 8005494:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	88fa      	ldrh	r2, [r7, #6]
 800549c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2221      	movs	r2, #33	@ 0x21
 80054ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d027      	beq.n	8005506 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ba:	4a25      	ldr	r2, [pc, #148]	@ (8005550 <HAL_UART_Transmit_DMA+0xec>)
 80054bc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c2:	4a24      	ldr	r2, [pc, #144]	@ (8005554 <HAL_UART_Transmit_DMA+0xf0>)
 80054c4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ca:	4a23      	ldr	r2, [pc, #140]	@ (8005558 <HAL_UART_Transmit_DMA+0xf4>)
 80054cc:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d2:	2200      	movs	r2, #0
 80054d4:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054de:	4619      	mov	r1, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	3328      	adds	r3, #40	@ 0x28
 80054e6:	461a      	mov	r2, r3
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	f7fc f9cf 	bl	800188c <HAL_DMA_Start_IT>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d008      	beq.n	8005506 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2210      	movs	r2, #16
 80054f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	e020      	b.n	8005548 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2240      	movs	r2, #64	@ 0x40
 800550c:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	613b      	str	r3, [r7, #16]
   return(result);
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005524:	627b      	str	r3, [r7, #36]	@ 0x24
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	3308      	adds	r3, #8
 800552c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800552e:	623a      	str	r2, [r7, #32]
 8005530:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005532:	69f9      	ldr	r1, [r7, #28]
 8005534:	6a3a      	ldr	r2, [r7, #32]
 8005536:	e841 2300 	strex	r3, r2, [r1]
 800553a:	61bb      	str	r3, [r7, #24]
   return(result);
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d1e5      	bne.n	800550e <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e000      	b.n	8005548 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005546:	2302      	movs	r3, #2
  }
}
 8005548:	4618      	mov	r0, r3
 800554a:	3728      	adds	r7, #40	@ 0x28
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	080064ff 	.word	0x080064ff
 8005554:	08006595 	.word	0x08006595
 8005558:	080065b1 	.word	0x080065b1

0800555c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b0ba      	sub	sp, #232	@ 0xe8
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69db      	ldr	r3, [r3, #28]
 800556a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005582:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005586:	f640 030f 	movw	r3, #2063	@ 0x80f
 800558a:	4013      	ands	r3, r2
 800558c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005590:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005594:	2b00      	cmp	r3, #0
 8005596:	d115      	bne.n	80055c4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559c:	f003 0320 	and.w	r3, r3, #32
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00f      	beq.n	80055c4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055a8:	f003 0320 	and.w	r3, r3, #32
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 82c6 	beq.w	8005b46 <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
      }
      return;
 80055c2:	e2c0      	b.n	8005b46 <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80055c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8117 	beq.w	80057fc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80055ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055d2:	f003 0301 	and.w	r3, r3, #1
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80055da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80055de:	4b85      	ldr	r3, [pc, #532]	@ (80057f4 <HAL_UART_IRQHandler+0x298>)
 80055e0:	4013      	ands	r3, r2
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 810a 	beq.w	80057fc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ec:	f003 0301 	and.w	r3, r3, #1
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d011      	beq.n	8005618 <HAL_UART_IRQHandler+0xbc>
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2201      	movs	r2, #1
 8005606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800560e:	f043 0201 	orr.w	r2, r3, #1
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561c:	f003 0302 	and.w	r3, r3, #2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d011      	beq.n	8005648 <HAL_UART_IRQHandler+0xec>
 8005624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2202      	movs	r2, #2
 8005636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800563e:	f043 0204 	orr.w	r2, r3, #4
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d011      	beq.n	8005678 <HAL_UART_IRQHandler+0x11c>
 8005654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005658:	f003 0301 	and.w	r3, r3, #1
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00b      	beq.n	8005678 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2204      	movs	r2, #4
 8005666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800566e:	f043 0202 	orr.w	r2, r3, #2
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d017      	beq.n	80056b4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d105      	bne.n	800569c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005694:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005698:	2b00      	cmp	r3, #0
 800569a:	d00b      	beq.n	80056b4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	2208      	movs	r2, #8
 80056a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056aa:	f043 0208 	orr.w	r2, r3, #8
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80056b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d012      	beq.n	80056e6 <HAL_UART_IRQHandler+0x18a>
 80056c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056c4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d00c      	beq.n	80056e6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056dc:	f043 0220 	orr.w	r2, r3, #32
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 822c 	beq.w	8005b4a <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80056f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056f6:	f003 0320 	and.w	r3, r3, #32
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00d      	beq.n	800571a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80056fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800570e:	2b00      	cmp	r3, #0
 8005710:	d003      	beq.n	800571a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005720:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572e:	2b40      	cmp	r3, #64	@ 0x40
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005736:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800573a:	2b00      	cmp	r3, #0
 800573c:	d04f      	beq.n	80057de <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f000 fe79 	bl	8006436 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800574e:	2b40      	cmp	r3, #64	@ 0x40
 8005750:	d141      	bne.n	80057d6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3308      	adds	r3, #8
 8005758:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005760:	e853 3f00 	ldrex	r3, [r3]
 8005764:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005768:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800576c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3308      	adds	r3, #8
 800577a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800577e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005782:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800578a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005796:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1d9      	bne.n	8005752 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d013      	beq.n	80057ce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057aa:	4a13      	ldr	r2, [pc, #76]	@ (80057f8 <HAL_UART_IRQHandler+0x29c>)
 80057ac:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057b2:	4618      	mov	r0, r3
 80057b4:	f7fc f93a 	bl	8001a2c <HAL_DMA_Abort_IT>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d017      	beq.n	80057ee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80057c8:	4610      	mov	r0, r2
 80057ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057cc:	e00f      	b.n	80057ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f9d0 	bl	8005b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d4:	e00b      	b.n	80057ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f9cc 	bl	8005b74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057dc:	e007      	b.n	80057ee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f9c8 	bl	8005b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80057ec:	e1ad      	b.n	8005b4a <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ee:	bf00      	nop
    return;
 80057f0:	e1ab      	b.n	8005b4a <HAL_UART_IRQHandler+0x5ee>
 80057f2:	bf00      	nop
 80057f4:	04000120 	.word	0x04000120
 80057f8:	0800662f 	.word	0x0800662f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005800:	2b01      	cmp	r3, #1
 8005802:	f040 8166 	bne.w	8005ad2 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b00      	cmp	r3, #0
 8005810:	f000 815f 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005818:	f003 0310 	and.w	r3, r3, #16
 800581c:	2b00      	cmp	r3, #0
 800581e:	f000 8158 	beq.w	8005ad2 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2210      	movs	r2, #16
 8005828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005834:	2b40      	cmp	r3, #64	@ 0x40
 8005836:	f040 80d0 	bne.w	80059da <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800584a:	2b00      	cmp	r3, #0
 800584c:	f000 80ab 	beq.w	80059a6 <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800585a:	429a      	cmp	r2, r3
 800585c:	f080 80a3 	bcs.w	80059a6 <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005866:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800586e:	69db      	ldr	r3, [r3, #28]
 8005870:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005874:	f000 8086 	beq.w	8005984 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005880:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800588c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005890:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005894:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	461a      	mov	r2, r3
 800589e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80058a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80058a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80058ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80058b2:	e841 2300 	strex	r3, r2, [r1]
 80058b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80058ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1da      	bne.n	8005878 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3308      	adds	r3, #8
 80058c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80058cc:	e853 3f00 	ldrex	r3, [r3]
 80058d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80058d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80058d4:	f023 0301 	bic.w	r3, r3, #1
 80058d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3308      	adds	r3, #8
 80058e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80058e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80058ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80058ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80058f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e1      	bne.n	80058c2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005908:	e853 3f00 	ldrex	r3, [r3]
 800590c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800590e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005914:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3308      	adds	r3, #8
 800591e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005922:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005924:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005926:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005928:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800592a:	e841 2300 	strex	r3, r2, [r1]
 800592e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005930:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1e3      	bne.n	80058fe <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2220      	movs	r2, #32
 800593a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2200      	movs	r2, #0
 8005942:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800594c:	e853 3f00 	ldrex	r3, [r3]
 8005950:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005954:	f023 0310 	bic.w	r3, r3, #16
 8005958:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	461a      	mov	r2, r3
 8005962:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005966:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005968:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800596c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800596e:	e841 2300 	strex	r3, r2, [r1]
 8005972:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005974:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005976:	2b00      	cmp	r3, #0
 8005978:	d1e4      	bne.n	8005944 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800597e:	4618      	mov	r0, r3
 8005980:	f7fb ffe4 	bl	800194c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8005996:	b29b      	uxth	r3, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	b29b      	uxth	r3, r3
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8f2 	bl	8005b88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80059a4:	e0d3      	b.n	8005b4e <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80059b0:	429a      	cmp	r2, r3
 80059b2:	f040 80cc 	bne.w	8005b4e <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059ba:	69db      	ldr	r3, [r3, #28]
 80059bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059c0:	f040 80c5 	bne.w	8005b4e <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80059d0:	4619      	mov	r1, r3
 80059d2:	6878      	ldr	r0, [r7, #4]
 80059d4:	f000 f8d8 	bl	8005b88 <HAL_UARTEx_RxEventCallback>
      return;
 80059d8:	e0b9      	b.n	8005b4e <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	1ad3      	subs	r3, r2, r3
 80059ea:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 80ab 	beq.w	8005b52 <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 80059fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 80a6 	beq.w	8005b52 <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a16:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a1a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	461a      	mov	r2, r3
 8005a24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a2a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a30:	e841 2300 	strex	r3, r2, [r1]
 8005a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1e4      	bne.n	8005a06 <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	3308      	adds	r3, #8
 8005a42:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	e853 3f00 	ldrex	r3, [r3]
 8005a4a:	623b      	str	r3, [r7, #32]
   return(result);
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	f023 0301 	bic.w	r3, r3, #1
 8005a52:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005a60:	633a      	str	r2, [r7, #48]	@ 0x30
 8005a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a68:	e841 2300 	strex	r3, r2, [r1]
 8005a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1e3      	bne.n	8005a3c <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2220      	movs	r2, #32
 8005a78:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	e853 3f00 	ldrex	r3, [r3]
 8005a94:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	f023 0310 	bic.w	r3, r3, #16
 8005a9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005aaa:	61fb      	str	r3, [r7, #28]
 8005aac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	69b9      	ldr	r1, [r7, #24]
 8005ab0:	69fa      	ldr	r2, [r7, #28]
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e4      	bne.n	8005a88 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ac4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f85c 	bl	8005b88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ad0:	e03f      	b.n	8005b52 <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ad6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <HAL_UART_IRQHandler+0x5a0>
 8005ade:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005af2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 f853 	bl	8005ba0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005afa:	e02d      	b.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00e      	beq.n	8005b26 <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d008      	beq.n	8005b26 <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01c      	beq.n	8005b56 <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
    }
    return;
 8005b24:	e017      	b.n	8005b56 <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d012      	beq.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
 8005b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00c      	beq.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fd87 	bl	8006652 <UART_EndTransmit_IT>
    return;
 8005b44:	e008      	b.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
      return;
 8005b46:	bf00      	nop
 8005b48:	e006      	b.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
    return;
 8005b4a:	bf00      	nop
 8005b4c:	e004      	b.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
      return;
 8005b4e:	bf00      	nop
 8005b50:	e002      	b.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
      return;
 8005b52:	bf00      	nop
 8005b54:	e000      	b.n	8005b58 <HAL_UART_IRQHandler+0x5fc>
    return;
 8005b56:	bf00      	nop
  }

}
 8005b58:	37e8      	adds	r7, #232	@ 0xe8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop

08005b60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b083      	sub	sp, #12
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b7c:	bf00      	nop
 8005b7e:	370c      	adds	r7, #12
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b94:	bf00      	nop
 8005b96:	370c      	adds	r7, #12
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b088      	sub	sp, #32
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	431a      	orrs	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4ba6      	ldr	r3, [pc, #664]	@ (8005e78 <UART_SetConfig+0x2c4>)
 8005be0:	4013      	ands	r3, r2
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	6979      	ldr	r1, [r7, #20]
 8005be8:	430b      	orrs	r3, r1
 8005bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	68da      	ldr	r2, [r3, #12]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	430a      	orrs	r2, r1
 8005c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a94      	ldr	r2, [pc, #592]	@ (8005e7c <UART_SetConfig+0x2c8>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d120      	bne.n	8005c72 <UART_SetConfig+0xbe>
 8005c30:	4b93      	ldr	r3, [pc, #588]	@ (8005e80 <UART_SetConfig+0x2cc>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	2b03      	cmp	r3, #3
 8005c3c:	d816      	bhi.n	8005c6c <UART_SetConfig+0xb8>
 8005c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <UART_SetConfig+0x90>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005c55 	.word	0x08005c55
 8005c48:	08005c61 	.word	0x08005c61
 8005c4c:	08005c5b 	.word	0x08005c5b
 8005c50:	08005c67 	.word	0x08005c67
 8005c54:	2301      	movs	r3, #1
 8005c56:	77fb      	strb	r3, [r7, #31]
 8005c58:	e150      	b.n	8005efc <UART_SetConfig+0x348>
 8005c5a:	2302      	movs	r3, #2
 8005c5c:	77fb      	strb	r3, [r7, #31]
 8005c5e:	e14d      	b.n	8005efc <UART_SetConfig+0x348>
 8005c60:	2304      	movs	r3, #4
 8005c62:	77fb      	strb	r3, [r7, #31]
 8005c64:	e14a      	b.n	8005efc <UART_SetConfig+0x348>
 8005c66:	2308      	movs	r3, #8
 8005c68:	77fb      	strb	r3, [r7, #31]
 8005c6a:	e147      	b.n	8005efc <UART_SetConfig+0x348>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	77fb      	strb	r3, [r7, #31]
 8005c70:	e144      	b.n	8005efc <UART_SetConfig+0x348>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a83      	ldr	r2, [pc, #524]	@ (8005e84 <UART_SetConfig+0x2d0>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d132      	bne.n	8005ce2 <UART_SetConfig+0x12e>
 8005c7c:	4b80      	ldr	r3, [pc, #512]	@ (8005e80 <UART_SetConfig+0x2cc>)
 8005c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c82:	f003 030c 	and.w	r3, r3, #12
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d828      	bhi.n	8005cdc <UART_SetConfig+0x128>
 8005c8a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <UART_SetConfig+0xdc>)
 8005c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c90:	08005cc5 	.word	0x08005cc5
 8005c94:	08005cdd 	.word	0x08005cdd
 8005c98:	08005cdd 	.word	0x08005cdd
 8005c9c:	08005cdd 	.word	0x08005cdd
 8005ca0:	08005cd1 	.word	0x08005cd1
 8005ca4:	08005cdd 	.word	0x08005cdd
 8005ca8:	08005cdd 	.word	0x08005cdd
 8005cac:	08005cdd 	.word	0x08005cdd
 8005cb0:	08005ccb 	.word	0x08005ccb
 8005cb4:	08005cdd 	.word	0x08005cdd
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005cdd 	.word	0x08005cdd
 8005cc0:	08005cd7 	.word	0x08005cd7
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	77fb      	strb	r3, [r7, #31]
 8005cc8:	e118      	b.n	8005efc <UART_SetConfig+0x348>
 8005cca:	2302      	movs	r3, #2
 8005ccc:	77fb      	strb	r3, [r7, #31]
 8005cce:	e115      	b.n	8005efc <UART_SetConfig+0x348>
 8005cd0:	2304      	movs	r3, #4
 8005cd2:	77fb      	strb	r3, [r7, #31]
 8005cd4:	e112      	b.n	8005efc <UART_SetConfig+0x348>
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	77fb      	strb	r3, [r7, #31]
 8005cda:	e10f      	b.n	8005efc <UART_SetConfig+0x348>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	77fb      	strb	r3, [r7, #31]
 8005ce0:	e10c      	b.n	8005efc <UART_SetConfig+0x348>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a68      	ldr	r2, [pc, #416]	@ (8005e88 <UART_SetConfig+0x2d4>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d120      	bne.n	8005d2e <UART_SetConfig+0x17a>
 8005cec:	4b64      	ldr	r3, [pc, #400]	@ (8005e80 <UART_SetConfig+0x2cc>)
 8005cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005cf2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005cf6:	2b30      	cmp	r3, #48	@ 0x30
 8005cf8:	d013      	beq.n	8005d22 <UART_SetConfig+0x16e>
 8005cfa:	2b30      	cmp	r3, #48	@ 0x30
 8005cfc:	d814      	bhi.n	8005d28 <UART_SetConfig+0x174>
 8005cfe:	2b20      	cmp	r3, #32
 8005d00:	d009      	beq.n	8005d16 <UART_SetConfig+0x162>
 8005d02:	2b20      	cmp	r3, #32
 8005d04:	d810      	bhi.n	8005d28 <UART_SetConfig+0x174>
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d002      	beq.n	8005d10 <UART_SetConfig+0x15c>
 8005d0a:	2b10      	cmp	r3, #16
 8005d0c:	d006      	beq.n	8005d1c <UART_SetConfig+0x168>
 8005d0e:	e00b      	b.n	8005d28 <UART_SetConfig+0x174>
 8005d10:	2300      	movs	r3, #0
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e0f2      	b.n	8005efc <UART_SetConfig+0x348>
 8005d16:	2302      	movs	r3, #2
 8005d18:	77fb      	strb	r3, [r7, #31]
 8005d1a:	e0ef      	b.n	8005efc <UART_SetConfig+0x348>
 8005d1c:	2304      	movs	r3, #4
 8005d1e:	77fb      	strb	r3, [r7, #31]
 8005d20:	e0ec      	b.n	8005efc <UART_SetConfig+0x348>
 8005d22:	2308      	movs	r3, #8
 8005d24:	77fb      	strb	r3, [r7, #31]
 8005d26:	e0e9      	b.n	8005efc <UART_SetConfig+0x348>
 8005d28:	2310      	movs	r3, #16
 8005d2a:	77fb      	strb	r3, [r7, #31]
 8005d2c:	e0e6      	b.n	8005efc <UART_SetConfig+0x348>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a56      	ldr	r2, [pc, #344]	@ (8005e8c <UART_SetConfig+0x2d8>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d120      	bne.n	8005d7a <UART_SetConfig+0x1c6>
 8005d38:	4b51      	ldr	r3, [pc, #324]	@ (8005e80 <UART_SetConfig+0x2cc>)
 8005d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d3e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005d42:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d44:	d013      	beq.n	8005d6e <UART_SetConfig+0x1ba>
 8005d46:	2bc0      	cmp	r3, #192	@ 0xc0
 8005d48:	d814      	bhi.n	8005d74 <UART_SetConfig+0x1c0>
 8005d4a:	2b80      	cmp	r3, #128	@ 0x80
 8005d4c:	d009      	beq.n	8005d62 <UART_SetConfig+0x1ae>
 8005d4e:	2b80      	cmp	r3, #128	@ 0x80
 8005d50:	d810      	bhi.n	8005d74 <UART_SetConfig+0x1c0>
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d002      	beq.n	8005d5c <UART_SetConfig+0x1a8>
 8005d56:	2b40      	cmp	r3, #64	@ 0x40
 8005d58:	d006      	beq.n	8005d68 <UART_SetConfig+0x1b4>
 8005d5a:	e00b      	b.n	8005d74 <UART_SetConfig+0x1c0>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	77fb      	strb	r3, [r7, #31]
 8005d60:	e0cc      	b.n	8005efc <UART_SetConfig+0x348>
 8005d62:	2302      	movs	r3, #2
 8005d64:	77fb      	strb	r3, [r7, #31]
 8005d66:	e0c9      	b.n	8005efc <UART_SetConfig+0x348>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e0c6      	b.n	8005efc <UART_SetConfig+0x348>
 8005d6e:	2308      	movs	r3, #8
 8005d70:	77fb      	strb	r3, [r7, #31]
 8005d72:	e0c3      	b.n	8005efc <UART_SetConfig+0x348>
 8005d74:	2310      	movs	r3, #16
 8005d76:	77fb      	strb	r3, [r7, #31]
 8005d78:	e0c0      	b.n	8005efc <UART_SetConfig+0x348>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a44      	ldr	r2, [pc, #272]	@ (8005e90 <UART_SetConfig+0x2dc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d125      	bne.n	8005dd0 <UART_SetConfig+0x21c>
 8005d84:	4b3e      	ldr	r3, [pc, #248]	@ (8005e80 <UART_SetConfig+0x2cc>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d92:	d017      	beq.n	8005dc4 <UART_SetConfig+0x210>
 8005d94:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d98:	d817      	bhi.n	8005dca <UART_SetConfig+0x216>
 8005d9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d9e:	d00b      	beq.n	8005db8 <UART_SetConfig+0x204>
 8005da0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005da4:	d811      	bhi.n	8005dca <UART_SetConfig+0x216>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <UART_SetConfig+0x1fe>
 8005daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005dae:	d006      	beq.n	8005dbe <UART_SetConfig+0x20a>
 8005db0:	e00b      	b.n	8005dca <UART_SetConfig+0x216>
 8005db2:	2300      	movs	r3, #0
 8005db4:	77fb      	strb	r3, [r7, #31]
 8005db6:	e0a1      	b.n	8005efc <UART_SetConfig+0x348>
 8005db8:	2302      	movs	r3, #2
 8005dba:	77fb      	strb	r3, [r7, #31]
 8005dbc:	e09e      	b.n	8005efc <UART_SetConfig+0x348>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	77fb      	strb	r3, [r7, #31]
 8005dc2:	e09b      	b.n	8005efc <UART_SetConfig+0x348>
 8005dc4:	2308      	movs	r3, #8
 8005dc6:	77fb      	strb	r3, [r7, #31]
 8005dc8:	e098      	b.n	8005efc <UART_SetConfig+0x348>
 8005dca:	2310      	movs	r3, #16
 8005dcc:	77fb      	strb	r3, [r7, #31]
 8005dce:	e095      	b.n	8005efc <UART_SetConfig+0x348>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2f      	ldr	r2, [pc, #188]	@ (8005e94 <UART_SetConfig+0x2e0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d125      	bne.n	8005e26 <UART_SetConfig+0x272>
 8005dda:	4b29      	ldr	r3, [pc, #164]	@ (8005e80 <UART_SetConfig+0x2cc>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005de4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005de8:	d017      	beq.n	8005e1a <UART_SetConfig+0x266>
 8005dea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005dee:	d817      	bhi.n	8005e20 <UART_SetConfig+0x26c>
 8005df0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df4:	d00b      	beq.n	8005e0e <UART_SetConfig+0x25a>
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005dfa:	d811      	bhi.n	8005e20 <UART_SetConfig+0x26c>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <UART_SetConfig+0x254>
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e04:	d006      	beq.n	8005e14 <UART_SetConfig+0x260>
 8005e06:	e00b      	b.n	8005e20 <UART_SetConfig+0x26c>
 8005e08:	2301      	movs	r3, #1
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e076      	b.n	8005efc <UART_SetConfig+0x348>
 8005e0e:	2302      	movs	r3, #2
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e073      	b.n	8005efc <UART_SetConfig+0x348>
 8005e14:	2304      	movs	r3, #4
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e070      	b.n	8005efc <UART_SetConfig+0x348>
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	77fb      	strb	r3, [r7, #31]
 8005e1e:	e06d      	b.n	8005efc <UART_SetConfig+0x348>
 8005e20:	2310      	movs	r3, #16
 8005e22:	77fb      	strb	r3, [r7, #31]
 8005e24:	e06a      	b.n	8005efc <UART_SetConfig+0x348>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e98 <UART_SetConfig+0x2e4>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d138      	bne.n	8005ea2 <UART_SetConfig+0x2ee>
 8005e30:	4b13      	ldr	r3, [pc, #76]	@ (8005e80 <UART_SetConfig+0x2cc>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e36:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8005e3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e3e:	d017      	beq.n	8005e70 <UART_SetConfig+0x2bc>
 8005e40:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e44:	d82a      	bhi.n	8005e9c <UART_SetConfig+0x2e8>
 8005e46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e4a:	d00b      	beq.n	8005e64 <UART_SetConfig+0x2b0>
 8005e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e50:	d824      	bhi.n	8005e9c <UART_SetConfig+0x2e8>
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d003      	beq.n	8005e5e <UART_SetConfig+0x2aa>
 8005e56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e5a:	d006      	beq.n	8005e6a <UART_SetConfig+0x2b6>
 8005e5c:	e01e      	b.n	8005e9c <UART_SetConfig+0x2e8>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	77fb      	strb	r3, [r7, #31]
 8005e62:	e04b      	b.n	8005efc <UART_SetConfig+0x348>
 8005e64:	2302      	movs	r3, #2
 8005e66:	77fb      	strb	r3, [r7, #31]
 8005e68:	e048      	b.n	8005efc <UART_SetConfig+0x348>
 8005e6a:	2304      	movs	r3, #4
 8005e6c:	77fb      	strb	r3, [r7, #31]
 8005e6e:	e045      	b.n	8005efc <UART_SetConfig+0x348>
 8005e70:	2308      	movs	r3, #8
 8005e72:	77fb      	strb	r3, [r7, #31]
 8005e74:	e042      	b.n	8005efc <UART_SetConfig+0x348>
 8005e76:	bf00      	nop
 8005e78:	efff69f3 	.word	0xefff69f3
 8005e7c:	40011000 	.word	0x40011000
 8005e80:	40023800 	.word	0x40023800
 8005e84:	40004400 	.word	0x40004400
 8005e88:	40004800 	.word	0x40004800
 8005e8c:	40004c00 	.word	0x40004c00
 8005e90:	40005000 	.word	0x40005000
 8005e94:	40011400 	.word	0x40011400
 8005e98:	40007800 	.word	0x40007800
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	77fb      	strb	r3, [r7, #31]
 8005ea0:	e02c      	b.n	8005efc <UART_SetConfig+0x348>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a72      	ldr	r2, [pc, #456]	@ (8006070 <UART_SetConfig+0x4bc>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d125      	bne.n	8005ef8 <UART_SetConfig+0x344>
 8005eac:	4b71      	ldr	r3, [pc, #452]	@ (8006074 <UART_SetConfig+0x4c0>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005eb2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8005eb6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005eba:	d017      	beq.n	8005eec <UART_SetConfig+0x338>
 8005ebc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005ec0:	d817      	bhi.n	8005ef2 <UART_SetConfig+0x33e>
 8005ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec6:	d00b      	beq.n	8005ee0 <UART_SetConfig+0x32c>
 8005ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ecc:	d811      	bhi.n	8005ef2 <UART_SetConfig+0x33e>
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <UART_SetConfig+0x326>
 8005ed2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ed6:	d006      	beq.n	8005ee6 <UART_SetConfig+0x332>
 8005ed8:	e00b      	b.n	8005ef2 <UART_SetConfig+0x33e>
 8005eda:	2300      	movs	r3, #0
 8005edc:	77fb      	strb	r3, [r7, #31]
 8005ede:	e00d      	b.n	8005efc <UART_SetConfig+0x348>
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e00a      	b.n	8005efc <UART_SetConfig+0x348>
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	77fb      	strb	r3, [r7, #31]
 8005eea:	e007      	b.n	8005efc <UART_SetConfig+0x348>
 8005eec:	2308      	movs	r3, #8
 8005eee:	77fb      	strb	r3, [r7, #31]
 8005ef0:	e004      	b.n	8005efc <UART_SetConfig+0x348>
 8005ef2:	2310      	movs	r3, #16
 8005ef4:	77fb      	strb	r3, [r7, #31]
 8005ef6:	e001      	b.n	8005efc <UART_SetConfig+0x348>
 8005ef8:	2310      	movs	r3, #16
 8005efa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	69db      	ldr	r3, [r3, #28]
 8005f00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f04:	d15b      	bne.n	8005fbe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005f06:	7ffb      	ldrb	r3, [r7, #31]
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d828      	bhi.n	8005f5e <UART_SetConfig+0x3aa>
 8005f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005f14 <UART_SetConfig+0x360>)
 8005f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f12:	bf00      	nop
 8005f14:	08005f39 	.word	0x08005f39
 8005f18:	08005f41 	.word	0x08005f41
 8005f1c:	08005f49 	.word	0x08005f49
 8005f20:	08005f5f 	.word	0x08005f5f
 8005f24:	08005f4f 	.word	0x08005f4f
 8005f28:	08005f5f 	.word	0x08005f5f
 8005f2c:	08005f5f 	.word	0x08005f5f
 8005f30:	08005f5f 	.word	0x08005f5f
 8005f34:	08005f57 	.word	0x08005f57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f38:	f7fd ff36 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8005f3c:	61b8      	str	r0, [r7, #24]
        break;
 8005f3e:	e013      	b.n	8005f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f40:	f7fd ff46 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8005f44:	61b8      	str	r0, [r7, #24]
        break;
 8005f46:	e00f      	b.n	8005f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f48:	4b4b      	ldr	r3, [pc, #300]	@ (8006078 <UART_SetConfig+0x4c4>)
 8005f4a:	61bb      	str	r3, [r7, #24]
        break;
 8005f4c:	e00c      	b.n	8005f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f4e:	f7fd fe1b 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8005f52:	61b8      	str	r0, [r7, #24]
        break;
 8005f54:	e008      	b.n	8005f68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005f5a:	61bb      	str	r3, [r7, #24]
        break;
 8005f5c:	e004      	b.n	8005f68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	77bb      	strb	r3, [r7, #30]
        break;
 8005f66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d074      	beq.n	8006058 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	005a      	lsls	r2, r3, #1
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	085b      	lsrs	r3, r3, #1
 8005f78:	441a      	add	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	2b0f      	cmp	r3, #15
 8005f88:	d916      	bls.n	8005fb8 <UART_SetConfig+0x404>
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f90:	d212      	bcs.n	8005fb8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	f023 030f 	bic.w	r3, r3, #15
 8005f9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	085b      	lsrs	r3, r3, #1
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	89fb      	ldrh	r3, [r7, #14]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	89fa      	ldrh	r2, [r7, #14]
 8005fb4:	60da      	str	r2, [r3, #12]
 8005fb6:	e04f      	b.n	8006058 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005fb8:	2301      	movs	r3, #1
 8005fba:	77bb      	strb	r3, [r7, #30]
 8005fbc:	e04c      	b.n	8006058 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005fbe:	7ffb      	ldrb	r3, [r7, #31]
 8005fc0:	2b08      	cmp	r3, #8
 8005fc2:	d828      	bhi.n	8006016 <UART_SetConfig+0x462>
 8005fc4:	a201      	add	r2, pc, #4	@ (adr r2, 8005fcc <UART_SetConfig+0x418>)
 8005fc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fca:	bf00      	nop
 8005fcc:	08005ff1 	.word	0x08005ff1
 8005fd0:	08005ff9 	.word	0x08005ff9
 8005fd4:	08006001 	.word	0x08006001
 8005fd8:	08006017 	.word	0x08006017
 8005fdc:	08006007 	.word	0x08006007
 8005fe0:	08006017 	.word	0x08006017
 8005fe4:	08006017 	.word	0x08006017
 8005fe8:	08006017 	.word	0x08006017
 8005fec:	0800600f 	.word	0x0800600f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff0:	f7fd feda 	bl	8003da8 <HAL_RCC_GetPCLK1Freq>
 8005ff4:	61b8      	str	r0, [r7, #24]
        break;
 8005ff6:	e013      	b.n	8006020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ff8:	f7fd feea 	bl	8003dd0 <HAL_RCC_GetPCLK2Freq>
 8005ffc:	61b8      	str	r0, [r7, #24]
        break;
 8005ffe:	e00f      	b.n	8006020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006000:	4b1d      	ldr	r3, [pc, #116]	@ (8006078 <UART_SetConfig+0x4c4>)
 8006002:	61bb      	str	r3, [r7, #24]
        break;
 8006004:	e00c      	b.n	8006020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006006:	f7fd fdbf 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 800600a:	61b8      	str	r0, [r7, #24]
        break;
 800600c:	e008      	b.n	8006020 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006012:	61bb      	str	r3, [r7, #24]
        break;
 8006014:	e004      	b.n	8006020 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	77bb      	strb	r3, [r7, #30]
        break;
 800601e:	bf00      	nop
    }

    if (pclk != 0U)
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d018      	beq.n	8006058 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	085a      	lsrs	r2, r3, #1
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	441a      	add	r2, r3
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	2b0f      	cmp	r3, #15
 800603e:	d909      	bls.n	8006054 <UART_SetConfig+0x4a0>
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006046:	d205      	bcs.n	8006054 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	b29a      	uxth	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	60da      	str	r2, [r3, #12]
 8006052:	e001      	b.n	8006058 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006064:	7fbb      	ldrb	r3, [r7, #30]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	40007c00 	.word	0x40007c00
 8006074:	40023800 	.word	0x40023800
 8006078:	00f42400 	.word	0x00f42400

0800607c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006088:	f003 0308 	and.w	r3, r3, #8
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060aa:	f003 0301 	and.w	r3, r3, #1
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060cc:	f003 0302 	and.w	r3, r3, #2
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	430a      	orrs	r2, r1
 80060e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ee:	f003 0304 	and.w	r3, r3, #4
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00a      	beq.n	800610c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006110:	f003 0310 	and.w	r3, r3, #16
 8006114:	2b00      	cmp	r3, #0
 8006116:	d00a      	beq.n	800612e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006132:	f003 0320 	and.w	r3, r3, #32
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00a      	beq.n	8006150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	430a      	orrs	r2, r1
 800614e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006158:	2b00      	cmp	r3, #0
 800615a:	d01a      	beq.n	8006192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800617a:	d10a      	bne.n	8006192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	430a      	orrs	r2, r1
 8006190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	685b      	ldr	r3, [r3, #4]
 80061a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	430a      	orrs	r2, r1
 80061b2:	605a      	str	r2, [r3, #4]
  }
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b098      	sub	sp, #96	@ 0x60
 80061c4:	af02      	add	r7, sp, #8
 80061c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80061d0:	f7fb f96c 	bl	80014ac <HAL_GetTick>
 80061d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b08      	cmp	r3, #8
 80061e2:	d12e      	bne.n	8006242 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80061e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80061ec:	2200      	movs	r2, #0
 80061ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f88c 	bl	8006310 <UART_WaitOnFlagUntilTimeout>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d021      	beq.n	8006242 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006206:	e853 3f00 	ldrex	r3, [r3]
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800620c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006212:	653b      	str	r3, [r7, #80]	@ 0x50
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800621c:	647b      	str	r3, [r7, #68]	@ 0x44
 800621e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006220:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006222:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006224:	e841 2300 	strex	r3, r2, [r1]
 8006228:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800622a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800622c:	2b00      	cmp	r3, #0
 800622e:	d1e6      	bne.n	80061fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e062      	b.n	8006308 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b04      	cmp	r3, #4
 800624e:	d149      	bne.n	80062e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006250:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006254:	9300      	str	r3, [sp, #0]
 8006256:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f856 	bl	8006310 <UART_WaitOnFlagUntilTimeout>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d03c      	beq.n	80062e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006272:	e853 3f00 	ldrex	r3, [r3]
 8006276:	623b      	str	r3, [r7, #32]
   return(result);
 8006278:	6a3b      	ldr	r3, [r7, #32]
 800627a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800627e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	461a      	mov	r2, r3
 8006286:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006288:	633b      	str	r3, [r7, #48]	@ 0x30
 800628a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800628c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800628e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006290:	e841 2300 	strex	r3, r2, [r1]
 8006294:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006298:	2b00      	cmp	r3, #0
 800629a:	d1e6      	bne.n	800626a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	3308      	adds	r3, #8
 80062a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	e853 3f00 	ldrex	r3, [r3]
 80062aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0301 	bic.w	r3, r3, #1
 80062b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	3308      	adds	r3, #8
 80062ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062bc:	61fa      	str	r2, [r7, #28]
 80062be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c0:	69b9      	ldr	r1, [r7, #24]
 80062c2:	69fa      	ldr	r2, [r7, #28]
 80062c4:	e841 2300 	strex	r3, r2, [r1]
 80062c8:	617b      	str	r3, [r7, #20]
   return(result);
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d1e5      	bne.n	800629c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2220      	movs	r2, #32
 80062d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e011      	b.n	8006308 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2220      	movs	r2, #32
 80062e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2200      	movs	r2, #0
 80062f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2200      	movs	r2, #0
 8006302:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3758      	adds	r7, #88	@ 0x58
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b084      	sub	sp, #16
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006320:	e04f      	b.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006328:	d04b      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800632a:	f7fb f8bf 	bl	80014ac <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	429a      	cmp	r2, r3
 8006338:	d302      	bcc.n	8006340 <UART_WaitOnFlagUntilTimeout+0x30>
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e04e      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0304 	and.w	r3, r3, #4
 800634e:	2b00      	cmp	r3, #0
 8006350:	d037      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b80      	cmp	r3, #128	@ 0x80
 8006356:	d034      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b40      	cmp	r3, #64	@ 0x40
 800635c:	d031      	beq.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	f003 0308 	and.w	r3, r3, #8
 8006368:	2b08      	cmp	r3, #8
 800636a:	d110      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2208      	movs	r2, #8
 8006372:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f85e 	bl	8006436 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2208      	movs	r2, #8
 800637e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e029      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006398:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800639c:	d111      	bne.n	80063c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80063a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f000 f844 	bl	8006436 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2220      	movs	r2, #32
 80063b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e00f      	b.n	80063e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	bf0c      	ite	eq
 80063d2:	2301      	moveq	r3, #1
 80063d4:	2300      	movne	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d0a0      	beq.n	8006322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b089      	sub	sp, #36	@ 0x24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	e853 3f00 	ldrex	r3, [r3]
 80063fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	461a      	mov	r2, r3
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	61bb      	str	r3, [r7, #24]
 8006412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006414:	6979      	ldr	r1, [r7, #20]
 8006416:	69ba      	ldr	r2, [r7, #24]
 8006418:	e841 2300 	strex	r3, r2, [r1]
 800641c:	613b      	str	r3, [r7, #16]
   return(result);
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d1e6      	bne.n	80063f2 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2220      	movs	r2, #32
 8006428:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800642a:	bf00      	nop
 800642c:	3724      	adds	r7, #36	@ 0x24
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006436:	b480      	push	{r7}
 8006438:	b095      	sub	sp, #84	@ 0x54
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006446:	e853 3f00 	ldrex	r3, [r3]
 800644a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800644c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	461a      	mov	r2, r3
 800645a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800645c:	643b      	str	r3, [r7, #64]	@ 0x40
 800645e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006460:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006462:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006464:	e841 2300 	strex	r3, r2, [r1]
 8006468:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800646a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1e6      	bne.n	800643e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3308      	adds	r3, #8
 8006476:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	e853 3f00 	ldrex	r3, [r3]
 800647e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	3308      	adds	r3, #8
 800648e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006490:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006492:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006496:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006498:	e841 2300 	strex	r3, r2, [r1]
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d1e5      	bne.n	8006470 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d118      	bne.n	80064de <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	e853 3f00 	ldrex	r3, [r3]
 80064b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	f023 0310 	bic.w	r3, r3, #16
 80064c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ce:	6979      	ldr	r1, [r7, #20]
 80064d0:	69ba      	ldr	r2, [r7, #24]
 80064d2:	e841 2300 	strex	r3, r2, [r1]
 80064d6:	613b      	str	r3, [r7, #16]
   return(result);
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d1e6      	bne.n	80064ac <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2220      	movs	r2, #32
 80064e2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064f2:	bf00      	nop
 80064f4:	3754      	adds	r7, #84	@ 0x54
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b090      	sub	sp, #64	@ 0x40
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006514:	d037      	beq.n	8006586 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006518:	2200      	movs	r2, #0
 800651a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800651e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3308      	adds	r3, #8
 8006524:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006528:	e853 3f00 	ldrex	r3, [r3]
 800652c:	623b      	str	r3, [r7, #32]
   return(result);
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006536:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3308      	adds	r3, #8
 800653c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800653e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006540:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006542:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006544:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006546:	e841 2300 	strex	r3, r2, [r1]
 800654a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1e5      	bne.n	800651e <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006552:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	e853 3f00 	ldrex	r3, [r3]
 800655e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006566:	637b      	str	r3, [r7, #52]	@ 0x34
 8006568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	461a      	mov	r2, r3
 800656e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006574:	69b9      	ldr	r1, [r7, #24]
 8006576:	69fa      	ldr	r2, [r7, #28]
 8006578:	e841 2300 	strex	r3, r2, [r1]
 800657c:	617b      	str	r3, [r7, #20]
   return(result);
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d1e6      	bne.n	8006552 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006584:	e002      	b.n	800658c <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006586:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8006588:	f7fa fb2e 	bl	8000be8 <HAL_UART_TxCpltCallback>
}
 800658c:	bf00      	nop
 800658e:	3740      	adds	r7, #64	@ 0x40
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80065a2:	68f8      	ldr	r0, [r7, #12]
 80065a4:	f7ff fadc 	bl	8005b60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80065a8:	bf00      	nop
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80065c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065d6:	2b80      	cmp	r3, #128	@ 0x80
 80065d8:	d109      	bne.n	80065ee <UART_DMAError+0x3e>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	2b21      	cmp	r3, #33	@ 0x21
 80065de:	d106      	bne.n	80065ee <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80065e8:	6978      	ldr	r0, [r7, #20]
 80065ea:	f7ff fefe 	bl	80063ea <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065f8:	2b40      	cmp	r3, #64	@ 0x40
 80065fa:	d109      	bne.n	8006610 <UART_DMAError+0x60>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2b22      	cmp	r3, #34	@ 0x22
 8006600:	d106      	bne.n	8006610 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2200      	movs	r2, #0
 8006606:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800660a:	6978      	ldr	r0, [r7, #20]
 800660c:	f7ff ff13 	bl	8006436 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006616:	f043 0210 	orr.w	r2, r3, #16
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006620:	6978      	ldr	r0, [r7, #20]
 8006622:	f7ff faa7 	bl	8005b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b084      	sub	sp, #16
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2200      	movs	r2, #0
 8006640:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006644:	68f8      	ldr	r0, [r7, #12]
 8006646:	f7ff fa95 	bl	8005b74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800664a:	bf00      	nop
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b088      	sub	sp, #32
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	60bb      	str	r3, [r7, #8]
   return(result);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6979      	ldr	r1, [r7, #20]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	613b      	str	r3, [r7, #16]
   return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e6      	bne.n	800665a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2220      	movs	r2, #32
 8006690:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7fa faa5 	bl	8000be8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800669e:	bf00      	nop
 80066a0:	3720      	adds	r7, #32
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 80066ae:	f000 fba0 	bl	8006df2 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80066b2:	4b12      	ldr	r3, [pc, #72]	@ (80066fc <MX_LWIP_Init+0x54>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80066b8:	4b11      	ldr	r3, [pc, #68]	@ (8006700 <MX_LWIP_Init+0x58>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80066be:	4b11      	ldr	r3, [pc, #68]	@ (8006704 <MX_LWIP_Init+0x5c>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80066c4:	4b10      	ldr	r3, [pc, #64]	@ (8006708 <MX_LWIP_Init+0x60>)
 80066c6:	9302      	str	r3, [sp, #8]
 80066c8:	4b10      	ldr	r3, [pc, #64]	@ (800670c <MX_LWIP_Init+0x64>)
 80066ca:	9301      	str	r3, [sp, #4]
 80066cc:	2300      	movs	r3, #0
 80066ce:	9300      	str	r3, [sp, #0]
 80066d0:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <MX_LWIP_Init+0x5c>)
 80066d2:	4a0b      	ldr	r2, [pc, #44]	@ (8006700 <MX_LWIP_Init+0x58>)
 80066d4:	4909      	ldr	r1, [pc, #36]	@ (80066fc <MX_LWIP_Init+0x54>)
 80066d6:	480e      	ldr	r0, [pc, #56]	@ (8006710 <MX_LWIP_Init+0x68>)
 80066d8:	f001 f880 	bl	80077dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80066dc:	480c      	ldr	r0, [pc, #48]	@ (8006710 <MX_LWIP_Init+0x68>)
 80066de:	f001 fa33 	bl	8007b48 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80066e2:	480b      	ldr	r0, [pc, #44]	@ (8006710 <MX_LWIP_Init+0x68>)
 80066e4:	f001 fa40 	bl	8007b68 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80066e8:	490a      	ldr	r1, [pc, #40]	@ (8006714 <MX_LWIP_Init+0x6c>)
 80066ea:	4809      	ldr	r0, [pc, #36]	@ (8006710 <MX_LWIP_Init+0x68>)
 80066ec:	f001 fb42 	bl	8007d74 <netif_set_link_callback>

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80066f0:	4807      	ldr	r0, [pc, #28]	@ (8006710 <MX_LWIP_Init+0x68>)
 80066f2:	f003 fa2b 	bl	8009b4c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80066f6:	bf00      	nop
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20001ff4 	.word	0x20001ff4
 8006700:	20001ff8 	.word	0x20001ff8
 8006704:	20001ffc 	.word	0x20001ffc
 8006708:	0800d57d 	.word	0x0800d57d
 800670c:	08006971 	.word	0x08006971
 8006710:	20001fbc 	.word	0x20001fbc
 8006714:	08006719 	.word	0x08006719

08006718 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006738:	4b44      	ldr	r3, [pc, #272]	@ (800684c <low_level_init+0x120>)
 800673a:	4a45      	ldr	r2, [pc, #276]	@ (8006850 <low_level_init+0x124>)
 800673c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800673e:	2300      	movs	r3, #0
 8006740:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8006746:	23e1      	movs	r3, #225	@ 0xe1
 8006748:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800674a:	2300      	movs	r3, #0
 800674c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800674e:	2300      	movs	r3, #0
 8006750:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8006752:	2300      	movs	r3, #0
 8006754:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8006756:	4a3d      	ldr	r2, [pc, #244]	@ (800684c <low_level_init+0x120>)
 8006758:	f107 0308 	add.w	r3, r7, #8
 800675c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800675e:	4b3b      	ldr	r3, [pc, #236]	@ (800684c <low_level_init+0x120>)
 8006760:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8006764:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006766:	4b39      	ldr	r3, [pc, #228]	@ (800684c <low_level_init+0x120>)
 8006768:	4a3a      	ldr	r2, [pc, #232]	@ (8006854 <low_level_init+0x128>)
 800676a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800676c:	4b37      	ldr	r3, [pc, #220]	@ (800684c <low_level_init+0x120>)
 800676e:	4a3a      	ldr	r2, [pc, #232]	@ (8006858 <low_level_init+0x12c>)
 8006770:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8006772:	4b36      	ldr	r3, [pc, #216]	@ (800684c <low_level_init+0x120>)
 8006774:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006778:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800677a:	4834      	ldr	r0, [pc, #208]	@ (800684c <low_level_init+0x120>)
 800677c:	f7fb fbe2 	bl	8001f44 <HAL_ETH_Init>
 8006780:	4603      	mov	r3, r0
 8006782:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006784:	2238      	movs	r2, #56	@ 0x38
 8006786:	2100      	movs	r1, #0
 8006788:	4834      	ldr	r0, [pc, #208]	@ (800685c <low_level_init+0x130>)
 800678a:	f007 f932 	bl	800d9f2 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800678e:	4b33      	ldr	r3, [pc, #204]	@ (800685c <low_level_init+0x130>)
 8006790:	2221      	movs	r2, #33	@ 0x21
 8006792:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006794:	4b31      	ldr	r3, [pc, #196]	@ (800685c <low_level_init+0x130>)
 8006796:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800679a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800679c:	4b2f      	ldr	r3, [pc, #188]	@ (800685c <low_level_init+0x130>)
 800679e:	2200      	movs	r2, #0
 80067a0:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80067a2:	482f      	ldr	r0, [pc, #188]	@ (8006860 <low_level_init+0x134>)
 80067a4:	f000 fee2 	bl	800756c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2206      	movs	r2, #6
 80067ac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80067b0:	4b26      	ldr	r3, [pc, #152]	@ (800684c <low_level_init+0x120>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80067bc:	4b23      	ldr	r3, [pc, #140]	@ (800684c <low_level_init+0x120>)
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	785a      	ldrb	r2, [r3, #1]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80067c8:	4b20      	ldr	r3, [pc, #128]	@ (800684c <low_level_init+0x120>)
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	789a      	ldrb	r2, [r3, #2]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80067d4:	4b1d      	ldr	r3, [pc, #116]	@ (800684c <low_level_init+0x120>)
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	78da      	ldrb	r2, [r3, #3]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80067e0:	4b1a      	ldr	r3, [pc, #104]	@ (800684c <low_level_init+0x120>)
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	791a      	ldrb	r2, [r3, #4]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80067ec:	4b17      	ldr	r3, [pc, #92]	@ (800684c <low_level_init+0x120>)
 80067ee:	685b      	ldr	r3, [r3, #4]
 80067f0:	795a      	ldrb	r2, [r3, #5]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80067fe:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006806:	f043 030a 	orr.w	r3, r3, #10
 800680a:	b2da      	uxtb	r2, r3
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8006812:	4914      	ldr	r1, [pc, #80]	@ (8006864 <low_level_init+0x138>)
 8006814:	4814      	ldr	r0, [pc, #80]	@ (8006868 <low_level_init+0x13c>)
 8006816:	f7fa fcf2 	bl	80011fe <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 800681a:	4813      	ldr	r0, [pc, #76]	@ (8006868 <low_level_init+0x13c>)
 800681c:	f7fa fd21 	bl	8001262 <LAN8742_Init>
 8006820:	4603      	mov	r3, r0
 8006822:	2b00      	cmp	r3, #0
 8006824:	d006      	beq.n	8006834 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f001 fa74 	bl	8007d14 <netif_set_link_down>
    netif_set_down(netif);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f001 fa07 	bl	8007c40 <netif_set_down>
 8006832:	e008      	b.n	8006846 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8006834:	7bfb      	ldrb	r3, [r7, #15]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d103      	bne.n	8006842 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f9ee 	bl	8006c1c <ethernet_link_check_state>
 8006840:	e001      	b.n	8006846 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8006842:	f7fa f9e7 	bl	8000c14 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

}
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}
 800684c:	2000698c 	.word	0x2000698c
 8006850:	40028000 	.word	0x40028000
 8006854:	20000124 	.word	0x20000124
 8006858:	20000084 	.word	0x20000084
 800685c:	20006a3c 	.word	0x20006a3c
 8006860:	08010074 	.word	0x08010074
 8006864:	2000000c 	.word	0x2000000c
 8006868:	20006a74 	.word	0x20006a74

0800686c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b092      	sub	sp, #72	@ 0x48
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
 8006874:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8006884:	f107 030c 	add.w	r3, r7, #12
 8006888:	2230      	movs	r2, #48	@ 0x30
 800688a:	2100      	movs	r1, #0
 800688c:	4618      	mov	r0, r3
 800688e:	f007 f8b0 	bl	800d9f2 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8006892:	f107 030c 	add.w	r3, r7, #12
 8006896:	2230      	movs	r2, #48	@ 0x30
 8006898:	2100      	movs	r1, #0
 800689a:	4618      	mov	r0, r3
 800689c:	f007 f8a9 	bl	800d9f2 <memset>

  for(q = p; q != NULL; q = q->next)
 80068a0:	683b      	ldr	r3, [r7, #0]
 80068a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80068a4:	e045      	b.n	8006932 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80068a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a8:	2b03      	cmp	r3, #3
 80068aa:	d902      	bls.n	80068b2 <low_level_output+0x46>
      return ERR_IF;
 80068ac:	f06f 030b 	mvn.w	r3, #11
 80068b0:	e055      	b.n	800695e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 80068b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068b4:	6859      	ldr	r1, [r3, #4]
 80068b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	3348      	adds	r3, #72	@ 0x48
 80068c2:	443b      	add	r3, r7
 80068c4:	3b3c      	subs	r3, #60	@ 0x3c
 80068c6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80068c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80068ca:	895b      	ldrh	r3, [r3, #10]
 80068cc:	4619      	mov	r1, r3
 80068ce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80068d0:	4613      	mov	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	3348      	adds	r3, #72	@ 0x48
 80068da:	443b      	add	r3, r7
 80068dc:	3b38      	subs	r3, #56	@ 0x38
 80068de:	6019      	str	r1, [r3, #0]

    if(i>0)
 80068e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80068e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068e8:	1e5a      	subs	r2, r3, #1
 80068ea:	f107 000c 	add.w	r0, r7, #12
 80068ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80068f0:	460b      	mov	r3, r1
 80068f2:	005b      	lsls	r3, r3, #1
 80068f4:	440b      	add	r3, r1
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	18c1      	adds	r1, r0, r3
 80068fa:	4613      	mov	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	4413      	add	r3, r2
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	3348      	adds	r3, #72	@ 0x48
 8006904:	443b      	add	r3, r7
 8006906:	3b34      	subs	r3, #52	@ 0x34
 8006908:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800690a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d109      	bne.n	8006926 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8006912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006914:	4613      	mov	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	4413      	add	r3, r2
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	3348      	adds	r3, #72	@ 0x48
 800691e:	443b      	add	r3, r7
 8006920:	3b34      	subs	r3, #52	@ 0x34
 8006922:	2200      	movs	r2, #0
 8006924:	601a      	str	r2, [r3, #0]
    }

    i++;
 8006926:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006928:	3301      	adds	r3, #1
 800692a:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 800692c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	643b      	str	r3, [r7, #64]	@ 0x40
 8006932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1b6      	bne.n	80068a6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	891b      	ldrh	r3, [r3, #8]
 800693c:	461a      	mov	r2, r3
 800693e:	4b0a      	ldr	r3, [pc, #40]	@ (8006968 <low_level_output+0xfc>)
 8006940:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8006942:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <low_level_output+0xfc>)
 8006944:	f107 030c 	add.w	r3, r7, #12
 8006948:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800694a:	4a07      	ldr	r2, [pc, #28]	@ (8006968 <low_level_output+0xfc>)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8006950:	2214      	movs	r2, #20
 8006952:	4905      	ldr	r1, [pc, #20]	@ (8006968 <low_level_output+0xfc>)
 8006954:	4805      	ldr	r0, [pc, #20]	@ (800696c <low_level_output+0x100>)
 8006956:	f7fb fc47 	bl	80021e8 <HAL_ETH_Transmit>

  return errval;
 800695a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800695e:	4618      	mov	r0, r3
 8006960:	3748      	adds	r7, #72	@ 0x48
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20006a3c 	.word	0x20006a3c
 800696c:	2000698c 	.word	0x2000698c

08006970 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d106      	bne.n	800698c <ethernetif_init+0x1c>
 800697e:	4b0e      	ldr	r3, [pc, #56]	@ (80069b8 <ethernetif_init+0x48>)
 8006980:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8006984:	490d      	ldr	r1, [pc, #52]	@ (80069bc <ethernetif_init+0x4c>)
 8006986:	480e      	ldr	r0, [pc, #56]	@ (80069c0 <ethernetif_init+0x50>)
 8006988:	f006 ffce 	bl	800d928 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2273      	movs	r2, #115	@ 0x73
 8006990:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2274      	movs	r2, #116	@ 0x74
 8006998:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a09      	ldr	r2, [pc, #36]	@ (80069c4 <ethernetif_init+0x54>)
 80069a0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a08      	ldr	r2, [pc, #32]	@ (80069c8 <ethernetif_init+0x58>)
 80069a6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff febf 	bl	800672c <low_level_init>

  return ERR_OK;
 80069ae:	2300      	movs	r3, #0
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3708      	adds	r7, #8
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}
 80069b8:	0800e750 	.word	0x0800e750
 80069bc:	0800e76c 	.word	0x0800e76c
 80069c0:	0800e77c 	.word	0x0800e77c
 80069c4:	0800ba0d 	.word	0x0800ba0d
 80069c8:	0800686d 	.word	0x0800686d

080069cc <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b084      	sub	sp, #16
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 80069d8:	68f9      	ldr	r1, [r7, #12]
 80069da:	4807      	ldr	r0, [pc, #28]	@ (80069f8 <pbuf_free_custom+0x2c>)
 80069dc:	f000 fea8 	bl	8007730 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80069e0:	4b06      	ldr	r3, [pc, #24]	@ (80069fc <pbuf_free_custom+0x30>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d102      	bne.n	80069ee <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80069e8:	4b04      	ldr	r3, [pc, #16]	@ (80069fc <pbuf_free_custom+0x30>)
 80069ea:	2200      	movs	r2, #0
 80069ec:	701a      	strb	r2, [r3, #0]
  }
}
 80069ee:	bf00      	nop
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	08010074 	.word	0x08010074
 80069fc:	20006988 	.word	0x20006988

08006a00 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006a04:	f7fa fd52 	bl	80014ac <HAL_GetTick>
 8006a08:	4603      	mov	r3, r0
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	bd80      	pop	{r7, pc}
	...

08006a10 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b08e      	sub	sp, #56	@ 0x38
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	605a      	str	r2, [r3, #4]
 8006a22:	609a      	str	r2, [r3, #8]
 8006a24:	60da      	str	r2, [r3, #12]
 8006a26:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a4e      	ldr	r2, [pc, #312]	@ (8006b68 <HAL_ETH_MspInit+0x158>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	f040 8096 	bne.w	8006b60 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006a34:	4b4d      	ldr	r3, [pc, #308]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a38:	4a4c      	ldr	r2, [pc, #304]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006a3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a40:	4b4a      	ldr	r3, [pc, #296]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a48:	623b      	str	r3, [r7, #32]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	4b47      	ldr	r3, [pc, #284]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	4a46      	ldr	r2, [pc, #280]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006a56:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a58:	4b44      	ldr	r3, [pc, #272]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a60:	61fb      	str	r3, [r7, #28]
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	4b41      	ldr	r3, [pc, #260]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a68:	4a40      	ldr	r2, [pc, #256]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a6a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a70:	4b3e      	ldr	r3, [pc, #248]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006a78:	61bb      	str	r3, [r7, #24]
 8006a7a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a80:	4a3a      	ldr	r2, [pc, #232]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a82:	f043 0304 	orr.w	r3, r3, #4
 8006a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8006a88:	4b38      	ldr	r3, [pc, #224]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	617b      	str	r3, [r7, #20]
 8006a92:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a94:	4b35      	ldr	r3, [pc, #212]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a98:	4a34      	ldr	r2, [pc, #208]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006a9a:	f043 0301 	orr.w	r3, r3, #1
 8006a9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8006aa0:	4b32      	ldr	r3, [pc, #200]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aa4:	f003 0301 	and.w	r3, r3, #1
 8006aa8:	613b      	str	r3, [r7, #16]
 8006aaa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006aac:	4b2f      	ldr	r3, [pc, #188]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006aae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006ab2:	f043 0302 	orr.w	r3, r3, #2
 8006ab6:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abc:	f003 0302 	and.w	r3, r3, #2
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8006ac4:	4b29      	ldr	r3, [pc, #164]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006ac6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ac8:	4a28      	ldr	r2, [pc, #160]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ace:	6313      	str	r3, [r2, #48]	@ 0x30
 8006ad0:	4b26      	ldr	r3, [pc, #152]	@ (8006b6c <HAL_ETH_MspInit+0x15c>)
 8006ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad8:	60bb      	str	r3, [r7, #8]
 8006ada:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006adc:	2332      	movs	r3, #50	@ 0x32
 8006ade:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006aec:	230b      	movs	r3, #11
 8006aee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006af0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006af4:	4619      	mov	r1, r3
 8006af6:	481e      	ldr	r0, [pc, #120]	@ (8006b70 <HAL_ETH_MspInit+0x160>)
 8006af8:	f7fc fa96 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006afc:	2386      	movs	r3, #134	@ 0x86
 8006afe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b00:	2302      	movs	r3, #2
 8006b02:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b04:	2300      	movs	r3, #0
 8006b06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b0c:	230b      	movs	r3, #11
 8006b0e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b14:	4619      	mov	r1, r3
 8006b16:	4817      	ldr	r0, [pc, #92]	@ (8006b74 <HAL_ETH_MspInit+0x164>)
 8006b18:	f7fc fa86 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006b1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b22:	2302      	movs	r3, #2
 8006b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b2e:	230b      	movs	r3, #11
 8006b30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8006b32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b36:	4619      	mov	r1, r3
 8006b38:	480f      	ldr	r0, [pc, #60]	@ (8006b78 <HAL_ETH_MspInit+0x168>)
 8006b3a:	f7fc fa75 	bl	8003028 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8006b3e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8006b42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b44:	2302      	movs	r3, #2
 8006b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006b50:	230b      	movs	r3, #11
 8006b52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4808      	ldr	r0, [pc, #32]	@ (8006b7c <HAL_ETH_MspInit+0x16c>)
 8006b5c:	f7fc fa64 	bl	8003028 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006b60:	bf00      	nop
 8006b62:	3738      	adds	r7, #56	@ 0x38
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40028000 	.word	0x40028000
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40020800 	.word	0x40020800
 8006b74:	40020000 	.word	0x40020000
 8006b78:	40020400 	.word	0x40020400
 8006b7c:	40021800 	.word	0x40021800

08006b80 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006b84:	4802      	ldr	r0, [pc, #8]	@ (8006b90 <ETH_PHY_IO_Init+0x10>)
 8006b86:	f7fb fded 	bl	8002764 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	2000698c 	.word	0x2000698c

08006b94 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return 0;
 8006b98:	2300      	movs	r3, #0
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr

08006ba4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	68f9      	ldr	r1, [r7, #12]
 8006bb6:	4807      	ldr	r0, [pc, #28]	@ (8006bd4 <ETH_PHY_IO_ReadReg+0x30>)
 8006bb8:	f7fb fc2e 	bl	8002418 <HAL_ETH_ReadPHYRegister>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d002      	beq.n	8006bc8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8006bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc6:	e000      	b.n	8006bca <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	2000698c 	.word	0x2000698c

08006bd8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	68f9      	ldr	r1, [r7, #12]
 8006bea:	4807      	ldr	r0, [pc, #28]	@ (8006c08 <ETH_PHY_IO_WriteReg+0x30>)
 8006bec:	f7fb fc5f 	bl	80024ae <HAL_ETH_WritePHYRegister>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8006bf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bfa:	e000      	b.n	8006bfe <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	2000698c 	.word	0x2000698c

08006c0c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006c10:	f7fa fc4c 	bl	80014ac <HAL_GetTick>
 8006c14:	4603      	mov	r3, r0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	bd80      	pop	{r7, pc}
	...

08006c1c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b0a0      	sub	sp, #128	@ 0x80
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006c24:	f107 030c 	add.w	r3, r7, #12
 8006c28:	2264      	movs	r2, #100	@ 0x64
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f006 fee0 	bl	800d9f2 <memset>
  int32_t PHYLinkState = 0;
 8006c32:	2300      	movs	r3, #0
 8006c34:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c3e:	2300      	movs	r3, #0
 8006c40:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006c42:	483a      	ldr	r0, [pc, #232]	@ (8006d2c <ethernet_link_check_state+0x110>)
 8006c44:	f7fa fb5a 	bl	80012fc <LAN8742_GetLinkState>
 8006c48:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006c50:	089b      	lsrs	r3, r3, #2
 8006c52:	f003 0301 	and.w	r3, r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00c      	beq.n	8006c76 <ethernet_link_check_state+0x5a>
 8006c5c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	dc09      	bgt.n	8006c76 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8006c62:	4833      	ldr	r0, [pc, #204]	@ (8006d30 <ethernet_link_check_state+0x114>)
 8006c64:	f7fb fa67 	bl	8002136 <HAL_ETH_Stop>
    netif_set_down(netif);
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f000 ffe9 	bl	8007c40 <netif_set_down>
    netif_set_link_down(netif);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f001 f850 	bl	8007d14 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8006c74:	e055      	b.n	8006d22 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006c7c:	f003 0304 	and.w	r3, r3, #4
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d14e      	bne.n	8006d22 <ethernet_link_check_state+0x106>
 8006c84:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	dd4b      	ble.n	8006d22 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8006c8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c8c:	3b02      	subs	r3, #2
 8006c8e:	2b03      	cmp	r3, #3
 8006c90:	d82a      	bhi.n	8006ce8 <ethernet_link_check_state+0xcc>
 8006c92:	a201      	add	r2, pc, #4	@ (adr r2, 8006c98 <ethernet_link_check_state+0x7c>)
 8006c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006cbb 	.word	0x08006cbb
 8006ca0:	08006ccb 	.word	0x08006ccb
 8006ca4:	08006cdb 	.word	0x08006cdb
      duplex = ETH_FULLDUPLEX_MODE;
 8006ca8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006cac:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006cae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006cb2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006cb8:	e017      	b.n	8006cea <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006cba:	2300      	movs	r3, #0
 8006cbc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8006cbe:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006cc2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006cc8:	e00f      	b.n	8006cea <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8006cca:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006cce:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006cd8:	e007      	b.n	8006cea <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8006ce6:	e000      	b.n	8006cea <ethernet_link_check_state+0xce>
      break;
 8006ce8:	bf00      	nop
    if(linkchanged)
 8006cea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d018      	beq.n	8006d22 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8006cf0:	f107 030c 	add.w	r3, r7, #12
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	480e      	ldr	r0, [pc, #56]	@ (8006d30 <ethernet_link_check_state+0x114>)
 8006cf8:	f7fb fc22 	bl	8002540 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006cfc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006cfe:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8006d00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006d02:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006d04:	f107 030c 	add.w	r3, r7, #12
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4809      	ldr	r0, [pc, #36]	@ (8006d30 <ethernet_link_check_state+0x114>)
 8006d0c:	f7fb fd0f 	bl	800272e <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006d10:	4807      	ldr	r0, [pc, #28]	@ (8006d30 <ethernet_link_check_state+0x114>)
 8006d12:	f7fb f9b1 	bl	8002078 <HAL_ETH_Start>
      netif_set_up(netif);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 ff26 	bl	8007b68 <netif_set_up>
      netif_set_link_up(netif);
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 ffc1 	bl	8007ca4 <netif_set_link_up>
}
 8006d22:	bf00      	nop
 8006d24:	3780      	adds	r7, #128	@ 0x80
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20006a74 	.word	0x20006a74
 8006d30:	2000698c 	.word	0x2000698c

08006d34 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006d3c:	4812      	ldr	r0, [pc, #72]	@ (8006d88 <HAL_ETH_RxAllocateCallback+0x54>)
 8006d3e:	f000 fc89 	bl	8007654 <memp_malloc_pool>
 8006d42:	60f8      	str	r0, [r7, #12]
  if (p)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d014      	beq.n	8006d74 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f103 0220 	add.w	r2, r3, #32
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4a0d      	ldr	r2, [pc, #52]	@ (8006d8c <HAL_ETH_RxAllocateCallback+0x58>)
 8006d58:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8006d62:	9201      	str	r2, [sp, #4]
 8006d64:	9300      	str	r3, [sp, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2241      	movs	r2, #65	@ 0x41
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	2000      	movs	r0, #0
 8006d6e:	f001 f973 	bl	8008058 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006d72:	e005      	b.n	8006d80 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006d74:	4b06      	ldr	r3, [pc, #24]	@ (8006d90 <HAL_ETH_RxAllocateCallback+0x5c>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	601a      	str	r2, [r3, #0]
}
 8006d80:	bf00      	nop
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	08010074 	.word	0x08010074
 8006d8c:	080069cd 	.word	0x080069cd
 8006d90:	20006988 	.word	0x20006988

08006d94 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8006d9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006da2:	021b      	lsls	r3, r3, #8
 8006da4:	b21a      	sxth	r2, r3
 8006da6:	88fb      	ldrh	r3, [r7, #6]
 8006da8:	0a1b      	lsrs	r3, r3, #8
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	b21b      	sxth	r3, r3
 8006dae:	4313      	orrs	r3, r2
 8006db0:	b21b      	sxth	r3, r3
 8006db2:	b29b      	uxth	r3, r3
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	370c      	adds	r7, #12
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	061a      	lsls	r2, r3, #24
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	021b      	lsls	r3, r3, #8
 8006dd0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006dd4:	431a      	orrs	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	0a1b      	lsrs	r3, r3, #8
 8006dda:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006dde:	431a      	orrs	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	0e1b      	lsrs	r3, r3, #24
 8006de4:	4313      	orrs	r3, r2
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	370c      	adds	r7, #12
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr

08006df2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8006dfc:	f000 f8d6 	bl	8006fac <mem_init>
  memp_init();
 8006e00:	f000 fbe4 	bl	80075cc <memp_init>
  pbuf_init();
  netif_init();
 8006e04:	f000 fce2 	bl	80077cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8006e08:	f001 fe66 	bl	8008ad8 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8006e0c:	f001 fe1c 	bl	8008a48 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8006e10:	bf00      	nop
 8006e12:	3708      	adds	r7, #8
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	4603      	mov	r3, r0
 8006e20:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8006e22:	4b05      	ldr	r3, [pc, #20]	@ (8006e38 <ptr_to_mem+0x20>)
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	88fb      	ldrh	r3, [r7, #6]
 8006e28:	4413      	add	r3, r2
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
 8006e36:	bf00      	nop
 8006e38:	20006aac 	.word	0x20006aac

08006e3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8006e44:	4b05      	ldr	r3, [pc, #20]	@ (8006e5c <mem_to_ptr+0x20>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	b29b      	uxth	r3, r3
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	20006aac 	.word	0x20006aac

08006e60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8006e60:	b590      	push	{r4, r7, lr}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8006e68:	4b47      	ldr	r3, [pc, #284]	@ (8006f88 <plug_holes+0x128>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d206      	bcs.n	8006e80 <plug_holes+0x20>
 8006e72:	4b46      	ldr	r3, [pc, #280]	@ (8006f8c <plug_holes+0x12c>)
 8006e74:	f240 12df 	movw	r2, #479	@ 0x1df
 8006e78:	4945      	ldr	r1, [pc, #276]	@ (8006f90 <plug_holes+0x130>)
 8006e7a:	4846      	ldr	r0, [pc, #280]	@ (8006f94 <plug_holes+0x134>)
 8006e7c:	f006 fd54 	bl	800d928 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8006e80:	4b45      	ldr	r3, [pc, #276]	@ (8006f98 <plug_holes+0x138>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d306      	bcc.n	8006e98 <plug_holes+0x38>
 8006e8a:	4b40      	ldr	r3, [pc, #256]	@ (8006f8c <plug_holes+0x12c>)
 8006e8c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8006e90:	4942      	ldr	r1, [pc, #264]	@ (8006f9c <plug_holes+0x13c>)
 8006e92:	4840      	ldr	r0, [pc, #256]	@ (8006f94 <plug_holes+0x134>)
 8006e94:	f006 fd48 	bl	800d928 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	791b      	ldrb	r3, [r3, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d006      	beq.n	8006eae <plug_holes+0x4e>
 8006ea0:	4b3a      	ldr	r3, [pc, #232]	@ (8006f8c <plug_holes+0x12c>)
 8006ea2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8006ea6:	493e      	ldr	r1, [pc, #248]	@ (8006fa0 <plug_holes+0x140>)
 8006ea8:	483a      	ldr	r0, [pc, #232]	@ (8006f94 <plug_holes+0x134>)
 8006eaa:	f006 fd3d 	bl	800d928 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	881b      	ldrh	r3, [r3, #0]
 8006eb2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d906      	bls.n	8006ec8 <plug_holes+0x68>
 8006eba:	4b34      	ldr	r3, [pc, #208]	@ (8006f8c <plug_holes+0x12c>)
 8006ebc:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8006ec0:	4938      	ldr	r1, [pc, #224]	@ (8006fa4 <plug_holes+0x144>)
 8006ec2:	4834      	ldr	r0, [pc, #208]	@ (8006f94 <plug_holes+0x134>)
 8006ec4:	f006 fd30 	bl	800d928 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff ffa3 	bl	8006e18 <ptr_to_mem>
 8006ed2:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8006ed4:	687a      	ldr	r2, [r7, #4]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d025      	beq.n	8006f28 <plug_holes+0xc8>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	791b      	ldrb	r3, [r3, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d121      	bne.n	8006f28 <plug_holes+0xc8>
 8006ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8006f98 <plug_holes+0x138>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d01c      	beq.n	8006f28 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8006eee:	4b2e      	ldr	r3, [pc, #184]	@ (8006fa8 <plug_holes+0x148>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	68fa      	ldr	r2, [r7, #12]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d102      	bne.n	8006efe <plug_holes+0x9e>
      lfree = mem;
 8006ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8006fa8 <plug_holes+0x148>)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	881a      	ldrh	r2, [r3, #0]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00a      	beq.n	8006f28 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	881b      	ldrh	r3, [r3, #0]
 8006f16:	4618      	mov	r0, r3
 8006f18:	f7ff ff7e 	bl	8006e18 <ptr_to_mem>
 8006f1c:	4604      	mov	r4, r0
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7ff ff8c 	bl	8006e3c <mem_to_ptr>
 8006f24:	4603      	mov	r3, r0
 8006f26:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	885b      	ldrh	r3, [r3, #2]
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7ff ff73 	bl	8006e18 <ptr_to_mem>
 8006f32:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8006f34:	68ba      	ldr	r2, [r7, #8]
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	429a      	cmp	r2, r3
 8006f3a:	d020      	beq.n	8006f7e <plug_holes+0x11e>
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	791b      	ldrb	r3, [r3, #4]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d11c      	bne.n	8006f7e <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8006f44:	4b18      	ldr	r3, [pc, #96]	@ (8006fa8 <plug_holes+0x148>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	687a      	ldr	r2, [r7, #4]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d102      	bne.n	8006f54 <plug_holes+0xf4>
      lfree = pmem;
 8006f4e:	4a16      	ldr	r2, [pc, #88]	@ (8006fa8 <plug_holes+0x148>)
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	881a      	ldrh	r2, [r3, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00a      	beq.n	8006f7e <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7ff ff53 	bl	8006e18 <ptr_to_mem>
 8006f72:	4604      	mov	r4, r0
 8006f74:	68b8      	ldr	r0, [r7, #8]
 8006f76:	f7ff ff61 	bl	8006e3c <mem_to_ptr>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8006f7e:	bf00      	nop
 8006f80:	3714      	adds	r7, #20
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd90      	pop	{r4, r7, pc}
 8006f86:	bf00      	nop
 8006f88:	20006aac 	.word	0x20006aac
 8006f8c:	0800e7a4 	.word	0x0800e7a4
 8006f90:	0800e7d4 	.word	0x0800e7d4
 8006f94:	0800e7ec 	.word	0x0800e7ec
 8006f98:	20006ab0 	.word	0x20006ab0
 8006f9c:	0800e814 	.word	0x0800e814
 8006fa0:	0800e830 	.word	0x0800e830
 8006fa4:	0800e84c 	.word	0x0800e84c
 8006fa8:	20006ab4 	.word	0x20006ab4

08006fac <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8006fb2:	4b16      	ldr	r3, [pc, #88]	@ (800700c <mem_init+0x60>)
 8006fb4:	4a16      	ldr	r2, [pc, #88]	@ (8007010 <mem_init+0x64>)
 8006fb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8006fb8:	4b14      	ldr	r3, [pc, #80]	@ (800700c <mem_init+0x60>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8006fc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8006fd2:	f246 10a8 	movw	r0, #25000	@ 0x61a8
 8006fd6:	f7ff ff1f 	bl	8006e18 <ptr_to_mem>
 8006fda:	4603      	mov	r3, r0
 8006fdc:	4a0d      	ldr	r2, [pc, #52]	@ (8007014 <mem_init+0x68>)
 8006fde:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8006fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8007014 <mem_init+0x68>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <mem_init+0x68>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8006ff0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8006ff2:	4b08      	ldr	r3, [pc, #32]	@ (8007014 <mem_init+0x68>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8006ffa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8006ffc:	4b03      	ldr	r3, [pc, #12]	@ (800700c <mem_init+0x60>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	4a05      	ldr	r2, [pc, #20]	@ (8007018 <mem_init+0x6c>)
 8007002:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8007004:	bf00      	nop
 8007006:	3708      	adds	r7, #8
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20006aac 	.word	0x20006aac
 8007010:	20048000 	.word	0x20048000
 8007014:	20006ab0 	.word	0x20006ab0
 8007018:	20006ab4 	.word	0x20006ab4

0800701c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f7ff ff09 	bl	8006e3c <mem_to_ptr>
 800702a:	4603      	mov	r3, r0
 800702c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	881b      	ldrh	r3, [r3, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f7ff fef0 	bl	8006e18 <ptr_to_mem>
 8007038:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	885b      	ldrh	r3, [r3, #2]
 800703e:	4618      	mov	r0, r3
 8007040:	f7ff feea 	bl	8006e18 <ptr_to_mem>
 8007044:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800704e:	4293      	cmp	r3, r2
 8007050:	d819      	bhi.n	8007086 <mem_link_valid+0x6a>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	885b      	ldrh	r3, [r3, #2]
 8007056:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800705a:	4293      	cmp	r3, r2
 800705c:	d813      	bhi.n	8007086 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8007062:	8afa      	ldrh	r2, [r7, #22]
 8007064:	429a      	cmp	r2, r3
 8007066:	d004      	beq.n	8007072 <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	8afa      	ldrh	r2, [r7, #22]
 800706e:	429a      	cmp	r2, r3
 8007070:	d109      	bne.n	8007086 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8007072:	4b08      	ldr	r3, [pc, #32]	@ (8007094 <mem_link_valid+0x78>)
 8007074:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8007076:	693a      	ldr	r2, [r7, #16]
 8007078:	429a      	cmp	r2, r3
 800707a:	d006      	beq.n	800708a <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	885b      	ldrh	r3, [r3, #2]
 8007080:	8afa      	ldrh	r2, [r7, #22]
 8007082:	429a      	cmp	r2, r3
 8007084:	d001      	beq.n	800708a <mem_link_valid+0x6e>
    return 0;
 8007086:	2300      	movs	r3, #0
 8007088:	e000      	b.n	800708c <mem_link_valid+0x70>
  }
  return 1;
 800708a:	2301      	movs	r3, #1
}
 800708c:	4618      	mov	r0, r3
 800708e:	3718      	adds	r7, #24
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20006ab0 	.word	0x20006ab0

08007098 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b084      	sub	sp, #16
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d04c      	beq.n	8007140 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f003 0303 	and.w	r3, r3, #3
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d007      	beq.n	80070c0 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80070b0:	4b25      	ldr	r3, [pc, #148]	@ (8007148 <mem_free+0xb0>)
 80070b2:	f240 2273 	movw	r2, #627	@ 0x273
 80070b6:	4925      	ldr	r1, [pc, #148]	@ (800714c <mem_free+0xb4>)
 80070b8:	4825      	ldr	r0, [pc, #148]	@ (8007150 <mem_free+0xb8>)
 80070ba:	f006 fc35 	bl	800d928 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80070be:	e040      	b.n	8007142 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	3b08      	subs	r3, #8
 80070c4:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80070c6:	4b23      	ldr	r3, [pc, #140]	@ (8007154 <mem_free+0xbc>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d306      	bcc.n	80070de <mem_free+0x46>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f103 020c 	add.w	r2, r3, #12
 80070d6:	4b20      	ldr	r3, [pc, #128]	@ (8007158 <mem_free+0xc0>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d907      	bls.n	80070ee <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80070de:	4b1a      	ldr	r3, [pc, #104]	@ (8007148 <mem_free+0xb0>)
 80070e0:	f240 227f 	movw	r2, #639	@ 0x27f
 80070e4:	491d      	ldr	r1, [pc, #116]	@ (800715c <mem_free+0xc4>)
 80070e6:	481a      	ldr	r0, [pc, #104]	@ (8007150 <mem_free+0xb8>)
 80070e8:	f006 fc1e 	bl	800d928 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80070ec:	e029      	b.n	8007142 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	791b      	ldrb	r3, [r3, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d107      	bne.n	8007106 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80070f6:	4b14      	ldr	r3, [pc, #80]	@ (8007148 <mem_free+0xb0>)
 80070f8:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 80070fc:	4918      	ldr	r1, [pc, #96]	@ (8007160 <mem_free+0xc8>)
 80070fe:	4814      	ldr	r0, [pc, #80]	@ (8007150 <mem_free+0xb8>)
 8007100:	f006 fc12 	bl	800d928 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007104:	e01d      	b.n	8007142 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff ff88 	bl	800701c <mem_link_valid>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d107      	bne.n	8007122 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8007112:	4b0d      	ldr	r3, [pc, #52]	@ (8007148 <mem_free+0xb0>)
 8007114:	f240 2295 	movw	r2, #661	@ 0x295
 8007118:	4912      	ldr	r1, [pc, #72]	@ (8007164 <mem_free+0xcc>)
 800711a:	480d      	ldr	r0, [pc, #52]	@ (8007150 <mem_free+0xb8>)
 800711c:	f006 fc04 	bl	800d928 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8007120:	e00f      	b.n	8007142 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8007128:	4b0f      	ldr	r3, [pc, #60]	@ (8007168 <mem_free+0xd0>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	429a      	cmp	r2, r3
 8007130:	d202      	bcs.n	8007138 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8007132:	4a0d      	ldr	r2, [pc, #52]	@ (8007168 <mem_free+0xd0>)
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff fe91 	bl	8006e60 <plug_holes>
 800713e:	e000      	b.n	8007142 <mem_free+0xaa>
    return;
 8007140:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8007142:	3710      	adds	r7, #16
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	0800e7a4 	.word	0x0800e7a4
 800714c:	0800e878 	.word	0x0800e878
 8007150:	0800e7ec 	.word	0x0800e7ec
 8007154:	20006aac 	.word	0x20006aac
 8007158:	20006ab0 	.word	0x20006ab0
 800715c:	0800e89c 	.word	0x0800e89c
 8007160:	0800e8b8 	.word	0x0800e8b8
 8007164:	0800e8e0 	.word	0x0800e8e0
 8007168:	20006ab4 	.word	0x20006ab4

0800716c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b088      	sub	sp, #32
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	460b      	mov	r3, r1
 8007176:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8007178:	887b      	ldrh	r3, [r7, #2]
 800717a:	3303      	adds	r3, #3
 800717c:	b29b      	uxth	r3, r3
 800717e:	f023 0303 	bic.w	r3, r3, #3
 8007182:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8007184:	8bfb      	ldrh	r3, [r7, #30]
 8007186:	2b0b      	cmp	r3, #11
 8007188:	d801      	bhi.n	800718e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800718a:	230c      	movs	r3, #12
 800718c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800718e:	8bfb      	ldrh	r3, [r7, #30]
 8007190:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8007194:	4293      	cmp	r3, r2
 8007196:	d803      	bhi.n	80071a0 <mem_trim+0x34>
 8007198:	8bfa      	ldrh	r2, [r7, #30]
 800719a:	887b      	ldrh	r3, [r7, #2]
 800719c:	429a      	cmp	r2, r3
 800719e:	d201      	bcs.n	80071a4 <mem_trim+0x38>
    return NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	e0d0      	b.n	8007346 <mem_trim+0x1da>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80071a4:	4b6a      	ldr	r3, [pc, #424]	@ (8007350 <mem_trim+0x1e4>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d304      	bcc.n	80071b8 <mem_trim+0x4c>
 80071ae:	4b69      	ldr	r3, [pc, #420]	@ (8007354 <mem_trim+0x1e8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	687a      	ldr	r2, [r7, #4]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d306      	bcc.n	80071c6 <mem_trim+0x5a>
 80071b8:	4b67      	ldr	r3, [pc, #412]	@ (8007358 <mem_trim+0x1ec>)
 80071ba:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80071be:	4967      	ldr	r1, [pc, #412]	@ (800735c <mem_trim+0x1f0>)
 80071c0:	4867      	ldr	r0, [pc, #412]	@ (8007360 <mem_trim+0x1f4>)
 80071c2:	f006 fbb1 	bl	800d928 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80071c6:	4b62      	ldr	r3, [pc, #392]	@ (8007350 <mem_trim+0x1e4>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d304      	bcc.n	80071da <mem_trim+0x6e>
 80071d0:	4b60      	ldr	r3, [pc, #384]	@ (8007354 <mem_trim+0x1e8>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d301      	bcc.n	80071de <mem_trim+0x72>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	e0b3      	b.n	8007346 <mem_trim+0x1da>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	3b08      	subs	r3, #8
 80071e2:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80071e4:	69b8      	ldr	r0, [r7, #24]
 80071e6:	f7ff fe29 	bl	8006e3c <mem_to_ptr>
 80071ea:	4603      	mov	r3, r0
 80071ec:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	881a      	ldrh	r2, [r3, #0]
 80071f2:	8afb      	ldrh	r3, [r7, #22]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b08      	subs	r3, #8
 80071fa:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80071fc:	8bfa      	ldrh	r2, [r7, #30]
 80071fe:	8abb      	ldrh	r3, [r7, #20]
 8007200:	429a      	cmp	r2, r3
 8007202:	d906      	bls.n	8007212 <mem_trim+0xa6>
 8007204:	4b54      	ldr	r3, [pc, #336]	@ (8007358 <mem_trim+0x1ec>)
 8007206:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800720a:	4956      	ldr	r1, [pc, #344]	@ (8007364 <mem_trim+0x1f8>)
 800720c:	4854      	ldr	r0, [pc, #336]	@ (8007360 <mem_trim+0x1f4>)
 800720e:	f006 fb8b 	bl	800d928 <iprintf>
  if (newsize > size) {
 8007212:	8bfa      	ldrh	r2, [r7, #30]
 8007214:	8abb      	ldrh	r3, [r7, #20]
 8007216:	429a      	cmp	r2, r3
 8007218:	d901      	bls.n	800721e <mem_trim+0xb2>
    /* not supported */
    return NULL;
 800721a:	2300      	movs	r3, #0
 800721c:	e093      	b.n	8007346 <mem_trim+0x1da>
  }
  if (newsize == size) {
 800721e:	8bfa      	ldrh	r2, [r7, #30]
 8007220:	8abb      	ldrh	r3, [r7, #20]
 8007222:	429a      	cmp	r2, r3
 8007224:	d101      	bne.n	800722a <mem_trim+0xbe>
    /* No change in size, simply return */
    return rmem;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	e08d      	b.n	8007346 <mem_trim+0x1da>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	881b      	ldrh	r3, [r3, #0]
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fdf2 	bl	8006e18 <ptr_to_mem>
 8007234:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	791b      	ldrb	r3, [r3, #4]
 800723a:	2b00      	cmp	r3, #0
 800723c:	d141      	bne.n	80072c2 <mem_trim+0x156>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800723e:	69bb      	ldr	r3, [r7, #24]
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8007246:	4293      	cmp	r3, r2
 8007248:	d106      	bne.n	8007258 <mem_trim+0xec>
 800724a:	4b43      	ldr	r3, [pc, #268]	@ (8007358 <mem_trim+0x1ec>)
 800724c:	f240 22f5 	movw	r2, #757	@ 0x2f5
 8007250:	4945      	ldr	r1, [pc, #276]	@ (8007368 <mem_trim+0x1fc>)
 8007252:	4843      	ldr	r0, [pc, #268]	@ (8007360 <mem_trim+0x1f4>)
 8007254:	f006 fb68 	bl	800d928 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	881b      	ldrh	r3, [r3, #0]
 800725c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800725e:	8afa      	ldrh	r2, [r7, #22]
 8007260:	8bfb      	ldrh	r3, [r7, #30]
 8007262:	4413      	add	r3, r2
 8007264:	b29b      	uxth	r3, r3
 8007266:	3308      	adds	r3, #8
 8007268:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800726a:	4b40      	ldr	r3, [pc, #256]	@ (800736c <mem_trim+0x200>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	693a      	ldr	r2, [r7, #16]
 8007270:	429a      	cmp	r2, r3
 8007272:	d106      	bne.n	8007282 <mem_trim+0x116>
      lfree = ptr_to_mem(ptr2);
 8007274:	89fb      	ldrh	r3, [r7, #14]
 8007276:	4618      	mov	r0, r3
 8007278:	f7ff fdce 	bl	8006e18 <ptr_to_mem>
 800727c:	4603      	mov	r3, r0
 800727e:	4a3b      	ldr	r2, [pc, #236]	@ (800736c <mem_trim+0x200>)
 8007280:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8007282:	89fb      	ldrh	r3, [r7, #14]
 8007284:	4618      	mov	r0, r3
 8007286:	f7ff fdc7 	bl	8006e18 <ptr_to_mem>
 800728a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	2200      	movs	r2, #0
 8007290:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	89ba      	ldrh	r2, [r7, #12]
 8007296:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	8afa      	ldrh	r2, [r7, #22]
 800729c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	89fa      	ldrh	r2, [r7, #14]
 80072a2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d049      	beq.n	8007344 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	881b      	ldrh	r3, [r3, #0]
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff fdaf 	bl	8006e18 <ptr_to_mem>
 80072ba:	4602      	mov	r2, r0
 80072bc:	89fb      	ldrh	r3, [r7, #14]
 80072be:	8053      	strh	r3, [r2, #2]
 80072c0:	e040      	b.n	8007344 <mem_trim+0x1d8>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80072c2:	8bfb      	ldrh	r3, [r7, #30]
 80072c4:	f103 0214 	add.w	r2, r3, #20
 80072c8:	8abb      	ldrh	r3, [r7, #20]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d83a      	bhi.n	8007344 <mem_trim+0x1d8>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80072ce:	8afa      	ldrh	r2, [r7, #22]
 80072d0:	8bfb      	ldrh	r3, [r7, #30]
 80072d2:	4413      	add	r3, r2
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	3308      	adds	r3, #8
 80072d8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	881b      	ldrh	r3, [r3, #0]
 80072de:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d106      	bne.n	80072f4 <mem_trim+0x188>
 80072e6:	4b1c      	ldr	r3, [pc, #112]	@ (8007358 <mem_trim+0x1ec>)
 80072e8:	f240 3216 	movw	r2, #790	@ 0x316
 80072ec:	491e      	ldr	r1, [pc, #120]	@ (8007368 <mem_trim+0x1fc>)
 80072ee:	481c      	ldr	r0, [pc, #112]	@ (8007360 <mem_trim+0x1f4>)
 80072f0:	f006 fb1a 	bl	800d928 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80072f4:	89fb      	ldrh	r3, [r7, #14]
 80072f6:	4618      	mov	r0, r3
 80072f8:	f7ff fd8e 	bl	8006e18 <ptr_to_mem>
 80072fc:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80072fe:	4b1b      	ldr	r3, [pc, #108]	@ (800736c <mem_trim+0x200>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	429a      	cmp	r2, r3
 8007306:	d202      	bcs.n	800730e <mem_trim+0x1a2>
      lfree = mem2;
 8007308:	4a18      	ldr	r2, [pc, #96]	@ (800736c <mem_trim+0x200>)
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	2200      	movs	r2, #0
 8007312:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8007314:	69bb      	ldr	r3, [r7, #24]
 8007316:	881a      	ldrh	r2, [r3, #0]
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	8afa      	ldrh	r2, [r7, #22]
 8007320:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	89fa      	ldrh	r2, [r7, #14]
 8007326:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8007330:	4293      	cmp	r3, r2
 8007332:	d007      	beq.n	8007344 <mem_trim+0x1d8>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	881b      	ldrh	r3, [r3, #0]
 8007338:	4618      	mov	r0, r3
 800733a:	f7ff fd6d 	bl	8006e18 <ptr_to_mem>
 800733e:	4602      	mov	r2, r0
 8007340:	89fb      	ldrh	r3, [r7, #14]
 8007342:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8007344:	687b      	ldr	r3, [r7, #4]
}
 8007346:	4618      	mov	r0, r3
 8007348:	3720      	adds	r7, #32
 800734a:	46bd      	mov	sp, r7
 800734c:	bd80      	pop	{r7, pc}
 800734e:	bf00      	nop
 8007350:	20006aac 	.word	0x20006aac
 8007354:	20006ab0 	.word	0x20006ab0
 8007358:	0800e7a4 	.word	0x0800e7a4
 800735c:	0800e914 	.word	0x0800e914
 8007360:	0800e7ec 	.word	0x0800e7ec
 8007364:	0800e92c 	.word	0x0800e92c
 8007368:	0800e94c 	.word	0x0800e94c
 800736c:	20006ab4 	.word	0x20006ab4

08007370 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	4603      	mov	r3, r0
 8007378:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800737a:	88fb      	ldrh	r3, [r7, #6]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <mem_malloc+0x14>
    return NULL;
 8007380:	2300      	movs	r3, #0
 8007382:	e0dd      	b.n	8007540 <mem_malloc+0x1d0>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8007384:	88fb      	ldrh	r3, [r7, #6]
 8007386:	3303      	adds	r3, #3
 8007388:	b29b      	uxth	r3, r3
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8007390:	8bbb      	ldrh	r3, [r7, #28]
 8007392:	2b0b      	cmp	r3, #11
 8007394:	d801      	bhi.n	800739a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8007396:	230c      	movs	r3, #12
 8007398:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800739a:	8bbb      	ldrh	r3, [r7, #28]
 800739c:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d803      	bhi.n	80073ac <mem_malloc+0x3c>
 80073a4:	8bba      	ldrh	r2, [r7, #28]
 80073a6:	88fb      	ldrh	r3, [r7, #6]
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d201      	bcs.n	80073b0 <mem_malloc+0x40>
    return NULL;
 80073ac:	2300      	movs	r3, #0
 80073ae:	e0c7      	b.n	8007540 <mem_malloc+0x1d0>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80073b0:	4b65      	ldr	r3, [pc, #404]	@ (8007548 <mem_malloc+0x1d8>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4618      	mov	r0, r3
 80073b6:	f7ff fd41 	bl	8006e3c <mem_to_ptr>
 80073ba:	4603      	mov	r3, r0
 80073bc:	83fb      	strh	r3, [r7, #30]
 80073be:	e0b6      	b.n	800752e <mem_malloc+0x1be>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80073c0:	8bfb      	ldrh	r3, [r7, #30]
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7ff fd28 	bl	8006e18 <ptr_to_mem>
 80073c8:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	791b      	ldrb	r3, [r3, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f040 80a6 	bne.w	8007520 <mem_malloc+0x1b0>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	881b      	ldrh	r3, [r3, #0]
 80073d8:	461a      	mov	r2, r3
 80073da:	8bfb      	ldrh	r3, [r7, #30]
 80073dc:	1ad3      	subs	r3, r2, r3
 80073de:	f1a3 0208 	sub.w	r2, r3, #8
 80073e2:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80073e4:	429a      	cmp	r2, r3
 80073e6:	f0c0 809b 	bcc.w	8007520 <mem_malloc+0x1b0>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	8bfb      	ldrh	r3, [r7, #30]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f1a3 0208 	sub.w	r2, r3, #8
 80073f8:	8bbb      	ldrh	r3, [r7, #28]
 80073fa:	3314      	adds	r3, #20
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d335      	bcc.n	800746c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8007400:	8bfa      	ldrh	r2, [r7, #30]
 8007402:	8bbb      	ldrh	r3, [r7, #28]
 8007404:	4413      	add	r3, r2
 8007406:	b29b      	uxth	r3, r3
 8007408:	3308      	adds	r3, #8
 800740a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800740c:	8a7b      	ldrh	r3, [r7, #18]
 800740e:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8007412:	4293      	cmp	r3, r2
 8007414:	d106      	bne.n	8007424 <mem_malloc+0xb4>
 8007416:	4b4d      	ldr	r3, [pc, #308]	@ (800754c <mem_malloc+0x1dc>)
 8007418:	f240 3287 	movw	r2, #903	@ 0x387
 800741c:	494c      	ldr	r1, [pc, #304]	@ (8007550 <mem_malloc+0x1e0>)
 800741e:	484d      	ldr	r0, [pc, #308]	@ (8007554 <mem_malloc+0x1e4>)
 8007420:	f006 fa82 	bl	800d928 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8007424:	8a7b      	ldrh	r3, [r7, #18]
 8007426:	4618      	mov	r0, r3
 8007428:	f7ff fcf6 	bl	8006e18 <ptr_to_mem>
 800742c:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	881a      	ldrh	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8bfa      	ldrh	r2, [r7, #30]
 8007440:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	8a7a      	ldrh	r2, [r7, #18]
 8007446:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2201      	movs	r2, #1
 800744c:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	881b      	ldrh	r3, [r3, #0]
 8007452:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8007456:	4293      	cmp	r3, r2
 8007458:	d00b      	beq.n	8007472 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fcda 	bl	8006e18 <ptr_to_mem>
 8007464:	4602      	mov	r2, r0
 8007466:	8a7b      	ldrh	r3, [r7, #18]
 8007468:	8053      	strh	r3, [r2, #2]
 800746a:	e002      	b.n	8007472 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2201      	movs	r2, #1
 8007470:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8007472:	4b35      	ldr	r3, [pc, #212]	@ (8007548 <mem_malloc+0x1d8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	429a      	cmp	r2, r3
 800747a:	d127      	bne.n	80074cc <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800747c:	4b32      	ldr	r3, [pc, #200]	@ (8007548 <mem_malloc+0x1d8>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8007482:	e005      	b.n	8007490 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	4618      	mov	r0, r3
 800748a:	f7ff fcc5 	bl	8006e18 <ptr_to_mem>
 800748e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	791b      	ldrb	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d004      	beq.n	80074a2 <mem_malloc+0x132>
 8007498:	4b2f      	ldr	r3, [pc, #188]	@ (8007558 <mem_malloc+0x1e8>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	69ba      	ldr	r2, [r7, #24]
 800749e:	429a      	cmp	r2, r3
 80074a0:	d1f0      	bne.n	8007484 <mem_malloc+0x114>
          }
          lfree = cur;
 80074a2:	4a29      	ldr	r2, [pc, #164]	@ (8007548 <mem_malloc+0x1d8>)
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80074a8:	4b27      	ldr	r3, [pc, #156]	@ (8007548 <mem_malloc+0x1d8>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	4b2a      	ldr	r3, [pc, #168]	@ (8007558 <mem_malloc+0x1e8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d00b      	beq.n	80074cc <mem_malloc+0x15c>
 80074b4:	4b24      	ldr	r3, [pc, #144]	@ (8007548 <mem_malloc+0x1d8>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	791b      	ldrb	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d006      	beq.n	80074cc <mem_malloc+0x15c>
 80074be:	4b23      	ldr	r3, [pc, #140]	@ (800754c <mem_malloc+0x1dc>)
 80074c0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80074c4:	4925      	ldr	r1, [pc, #148]	@ (800755c <mem_malloc+0x1ec>)
 80074c6:	4823      	ldr	r0, [pc, #140]	@ (8007554 <mem_malloc+0x1e4>)
 80074c8:	f006 fa2e 	bl	800d928 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80074cc:	8bba      	ldrh	r2, [r7, #28]
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	4413      	add	r3, r2
 80074d2:	3308      	adds	r3, #8
 80074d4:	4a20      	ldr	r2, [pc, #128]	@ (8007558 <mem_malloc+0x1e8>)
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	4293      	cmp	r3, r2
 80074da:	d906      	bls.n	80074ea <mem_malloc+0x17a>
 80074dc:	4b1b      	ldr	r3, [pc, #108]	@ (800754c <mem_malloc+0x1dc>)
 80074de:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80074e2:	491f      	ldr	r1, [pc, #124]	@ (8007560 <mem_malloc+0x1f0>)
 80074e4:	481b      	ldr	r0, [pc, #108]	@ (8007554 <mem_malloc+0x1e4>)
 80074e6:	f006 fa1f 	bl	800d928 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f003 0303 	and.w	r3, r3, #3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d006      	beq.n	8007502 <mem_malloc+0x192>
 80074f4:	4b15      	ldr	r3, [pc, #84]	@ (800754c <mem_malloc+0x1dc>)
 80074f6:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80074fa:	491a      	ldr	r1, [pc, #104]	@ (8007564 <mem_malloc+0x1f4>)
 80074fc:	4815      	ldr	r0, [pc, #84]	@ (8007554 <mem_malloc+0x1e4>)
 80074fe:	f006 fa13 	bl	800d928 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f003 0303 	and.w	r3, r3, #3
 8007508:	2b00      	cmp	r3, #0
 800750a:	d006      	beq.n	800751a <mem_malloc+0x1aa>
 800750c:	4b0f      	ldr	r3, [pc, #60]	@ (800754c <mem_malloc+0x1dc>)
 800750e:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8007512:	4915      	ldr	r1, [pc, #84]	@ (8007568 <mem_malloc+0x1f8>)
 8007514:	480f      	ldr	r0, [pc, #60]	@ (8007554 <mem_malloc+0x1e4>)
 8007516:	f006 fa07 	bl	800d928 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	3308      	adds	r3, #8
 800751e:	e00f      	b.n	8007540 <mem_malloc+0x1d0>
         ptr = ptr_to_mem(ptr)->next) {
 8007520:	8bfb      	ldrh	r3, [r7, #30]
 8007522:	4618      	mov	r0, r3
 8007524:	f7ff fc78 	bl	8006e18 <ptr_to_mem>
 8007528:	4603      	mov	r3, r0
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800752e:	8bfa      	ldrh	r2, [r7, #30]
 8007530:	8bb9      	ldrh	r1, [r7, #28]
 8007532:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8007536:	1a5b      	subs	r3, r3, r1
 8007538:	429a      	cmp	r2, r3
 800753a:	f4ff af41 	bcc.w	80073c0 <mem_malloc+0x50>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800753e:	2300      	movs	r3, #0
}
 8007540:	4618      	mov	r0, r3
 8007542:	3720      	adds	r7, #32
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	20006ab4 	.word	0x20006ab4
 800754c:	0800e7a4 	.word	0x0800e7a4
 8007550:	0800e94c 	.word	0x0800e94c
 8007554:	0800e7ec 	.word	0x0800e7ec
 8007558:	20006ab0 	.word	0x20006ab0
 800755c:	0800e960 	.word	0x0800e960
 8007560:	0800e97c 	.word	0x0800e97c
 8007564:	0800e9ac 	.word	0x0800e9ac
 8007568:	0800e9dc 	.word	0x0800e9dc

0800756c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	2200      	movs	r2, #0
 800757a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	3303      	adds	r3, #3
 8007582:	f023 0303 	bic.w	r3, r3, #3
 8007586:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8007588:	2300      	movs	r3, #0
 800758a:	60fb      	str	r3, [r7, #12]
 800758c:	e011      	b.n	80075b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	681a      	ldr	r2, [r3, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	461a      	mov	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4413      	add	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	3301      	adds	r3, #1
 80075b0:	60fb      	str	r3, [r7, #12]
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	885b      	ldrh	r3, [r3, #2]
 80075b6:	461a      	mov	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	4293      	cmp	r3, r2
 80075bc:	dbe7      	blt.n	800758e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80075be:	bf00      	nop
 80075c0:	bf00      	nop
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80075d2:	2300      	movs	r3, #0
 80075d4:	80fb      	strh	r3, [r7, #6]
 80075d6:	e009      	b.n	80075ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80075d8:	88fb      	ldrh	r3, [r7, #6]
 80075da:	4a08      	ldr	r2, [pc, #32]	@ (80075fc <memp_init+0x30>)
 80075dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff ffc3 	bl	800756c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80075e6:	88fb      	ldrh	r3, [r7, #6]
 80075e8:	3301      	adds	r3, #1
 80075ea:	80fb      	strh	r3, [r7, #6]
 80075ec:	88fb      	ldrh	r3, [r7, #6]
 80075ee:	2b05      	cmp	r3, #5
 80075f0:	d9f2      	bls.n	80075d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80075f2:	bf00      	nop
 80075f4:	bf00      	nop
 80075f6:	3708      	adds	r7, #8
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	080100c8 	.word	0x080100c8

08007600 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d012      	beq.n	800763c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	6812      	ldr	r2, [r2, #0]
 800761e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f003 0303 	and.w	r3, r3, #3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d006      	beq.n	8007638 <do_memp_malloc_pool+0x38>
 800762a:	4b07      	ldr	r3, [pc, #28]	@ (8007648 <do_memp_malloc_pool+0x48>)
 800762c:	f44f 728c 	mov.w	r2, #280	@ 0x118
 8007630:	4906      	ldr	r1, [pc, #24]	@ (800764c <do_memp_malloc_pool+0x4c>)
 8007632:	4807      	ldr	r0, [pc, #28]	@ (8007650 <do_memp_malloc_pool+0x50>)
 8007634:	f006 f978 	bl	800d928 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	e000      	b.n	800763e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	0800ea00 	.word	0x0800ea00
 800764c:	0800ea30 	.word	0x0800ea30
 8007650:	0800ea54 	.word	0x0800ea54

08007654 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d106      	bne.n	8007670 <memp_malloc_pool+0x1c>
 8007662:	4b0a      	ldr	r3, [pc, #40]	@ (800768c <memp_malloc_pool+0x38>)
 8007664:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 8007668:	4909      	ldr	r1, [pc, #36]	@ (8007690 <memp_malloc_pool+0x3c>)
 800766a:	480a      	ldr	r0, [pc, #40]	@ (8007694 <memp_malloc_pool+0x40>)
 800766c:	f006 f95c 	bl	800d928 <iprintf>
  if (desc == NULL) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <memp_malloc_pool+0x26>
    return NULL;
 8007676:	2300      	movs	r3, #0
 8007678:	e003      	b.n	8007682 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff ffc0 	bl	8007600 <do_memp_malloc_pool>
 8007680:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	0800ea00 	.word	0x0800ea00
 8007690:	0800ea7c 	.word	0x0800ea7c
 8007694:	0800ea54 	.word	0x0800ea54

08007698 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80076a2:	79fb      	ldrb	r3, [r7, #7]
 80076a4:	2b05      	cmp	r3, #5
 80076a6:	d908      	bls.n	80076ba <memp_malloc+0x22>
 80076a8:	4b0a      	ldr	r3, [pc, #40]	@ (80076d4 <memp_malloc+0x3c>)
 80076aa:	f240 1257 	movw	r2, #343	@ 0x157
 80076ae:	490a      	ldr	r1, [pc, #40]	@ (80076d8 <memp_malloc+0x40>)
 80076b0:	480a      	ldr	r0, [pc, #40]	@ (80076dc <memp_malloc+0x44>)
 80076b2:	f006 f939 	bl	800d928 <iprintf>
 80076b6:	2300      	movs	r3, #0
 80076b8:	e008      	b.n	80076cc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80076ba:	79fb      	ldrb	r3, [r7, #7]
 80076bc:	4a08      	ldr	r2, [pc, #32]	@ (80076e0 <memp_malloc+0x48>)
 80076be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff ff9c 	bl	8007600 <do_memp_malloc_pool>
 80076c8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80076ca:	68fb      	ldr	r3, [r7, #12]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3710      	adds	r7, #16
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	0800ea00 	.word	0x0800ea00
 80076d8:	0800ea90 	.word	0x0800ea90
 80076dc:	0800ea54 	.word	0x0800ea54
 80076e0:	080100c8 	.word	0x080100c8

080076e4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d006      	beq.n	8007706 <do_memp_free_pool+0x22>
 80076f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007724 <do_memp_free_pool+0x40>)
 80076fa:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80076fe:	490a      	ldr	r1, [pc, #40]	@ (8007728 <do_memp_free_pool+0x44>)
 8007700:	480a      	ldr	r0, [pc, #40]	@ (800772c <do_memp_free_pool+0x48>)
 8007702:	f006 f911 	bl	800d928 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800771c:	bf00      	nop
 800771e:	3710      	adds	r7, #16
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	0800ea00 	.word	0x0800ea00
 8007728:	0800eab0 	.word	0x0800eab0
 800772c:	0800ea54 	.word	0x0800ea54

08007730 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
 8007738:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d106      	bne.n	800774e <memp_free_pool+0x1e>
 8007740:	4b0a      	ldr	r3, [pc, #40]	@ (800776c <memp_free_pool+0x3c>)
 8007742:	f240 1295 	movw	r2, #405	@ 0x195
 8007746:	490a      	ldr	r1, [pc, #40]	@ (8007770 <memp_free_pool+0x40>)
 8007748:	480a      	ldr	r0, [pc, #40]	@ (8007774 <memp_free_pool+0x44>)
 800774a:	f006 f8ed 	bl	800d928 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d007      	beq.n	8007764 <memp_free_pool+0x34>
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d004      	beq.n	8007764 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7ff ffc1 	bl	80076e4 <do_memp_free_pool>
 8007762:	e000      	b.n	8007766 <memp_free_pool+0x36>
    return;
 8007764:	bf00      	nop
}
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}
 800776c:	0800ea00 	.word	0x0800ea00
 8007770:	0800ea7c 	.word	0x0800ea7c
 8007774:	0800ea54 	.word	0x0800ea54

08007778 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b082      	sub	sp, #8
 800777c:	af00      	add	r7, sp, #0
 800777e:	4603      	mov	r3, r0
 8007780:	6039      	str	r1, [r7, #0]
 8007782:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8007784:	79fb      	ldrb	r3, [r7, #7]
 8007786:	2b05      	cmp	r3, #5
 8007788:	d907      	bls.n	800779a <memp_free+0x22>
 800778a:	4b0c      	ldr	r3, [pc, #48]	@ (80077bc <memp_free+0x44>)
 800778c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8007790:	490b      	ldr	r1, [pc, #44]	@ (80077c0 <memp_free+0x48>)
 8007792:	480c      	ldr	r0, [pc, #48]	@ (80077c4 <memp_free+0x4c>)
 8007794:	f006 f8c8 	bl	800d928 <iprintf>
 8007798:	e00c      	b.n	80077b4 <memp_free+0x3c>

  if (mem == NULL) {
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d008      	beq.n	80077b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80077a0:	79fb      	ldrb	r3, [r7, #7]
 80077a2:	4a09      	ldr	r2, [pc, #36]	@ (80077c8 <memp_free+0x50>)
 80077a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7ff ff9a 	bl	80076e4 <do_memp_free_pool>
 80077b0:	e000      	b.n	80077b4 <memp_free+0x3c>
    return;
 80077b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	0800ea00 	.word	0x0800ea00
 80077c0:	0800ead0 	.word	0x0800ead0
 80077c4:	0800ea54 	.word	0x0800ea54
 80077c8:	080100c8 	.word	0x080100c8

080077cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80077d0:	bf00      	nop
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
	...

080077dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d108      	bne.n	8007802 <netif_add+0x26>
 80077f0:	4b5b      	ldr	r3, [pc, #364]	@ (8007960 <netif_add+0x184>)
 80077f2:	f240 1227 	movw	r2, #295	@ 0x127
 80077f6:	495b      	ldr	r1, [pc, #364]	@ (8007964 <netif_add+0x188>)
 80077f8:	485b      	ldr	r0, [pc, #364]	@ (8007968 <netif_add+0x18c>)
 80077fa:	f006 f895 	bl	800d928 <iprintf>
 80077fe:	2300      	movs	r3, #0
 8007800:	e0a9      	b.n	8007956 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d108      	bne.n	800781a <netif_add+0x3e>
 8007808:	4b55      	ldr	r3, [pc, #340]	@ (8007960 <netif_add+0x184>)
 800780a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800780e:	4957      	ldr	r1, [pc, #348]	@ (800796c <netif_add+0x190>)
 8007810:	4855      	ldr	r0, [pc, #340]	@ (8007968 <netif_add+0x18c>)
 8007812:	f006 f889 	bl	800d928 <iprintf>
 8007816:	2300      	movs	r3, #0
 8007818:	e09d      	b.n	8007956 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d101      	bne.n	8007824 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8007820:	4b53      	ldr	r3, [pc, #332]	@ (8007970 <netif_add+0x194>)
 8007822:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d101      	bne.n	800782e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800782a:	4b51      	ldr	r3, [pc, #324]	@ (8007970 <netif_add+0x194>)
 800782c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d101      	bne.n	8007838 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8007834:	4b4e      	ldr	r3, [pc, #312]	@ (8007970 <netif_add+0x194>)
 8007836:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a49      	ldr	r2, [pc, #292]	@ (8007974 <netif_add+0x198>)
 800784e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3324      	adds	r3, #36	@ 0x24
 8007862:	2204      	movs	r2, #4
 8007864:	2100      	movs	r1, #0
 8007866:	4618      	mov	r0, r3
 8007868:	f006 f8c3 	bl	800d9f2 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	6a3a      	ldr	r2, [r7, #32]
 8007876:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8007878:	4b3f      	ldr	r3, [pc, #252]	@ (8007978 <netif_add+0x19c>)
 800787a:	781a      	ldrb	r2, [r3, #0]
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007886:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	68b9      	ldr	r1, [r7, #8]
 800788e:	68f8      	ldr	r0, [r7, #12]
 8007890:	f000 f910 	bl	8007ab4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8007894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	4798      	blx	r3
 800789a:	4603      	mov	r3, r0
 800789c:	2b00      	cmp	r3, #0
 800789e:	d001      	beq.n	80078a4 <netif_add+0xc8>
    return NULL;
 80078a0:	2300      	movs	r3, #0
 80078a2:	e058      	b.n	8007956 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078aa:	2bff      	cmp	r3, #255	@ 0xff
 80078ac:	d103      	bne.n	80078b6 <netif_add+0xda>
        netif->num = 0;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80078ba:	4b30      	ldr	r3, [pc, #192]	@ (800797c <netif_add+0x1a0>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	617b      	str	r3, [r7, #20]
 80078c0:	e02b      	b.n	800791a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d106      	bne.n	80078d8 <netif_add+0xfc>
 80078ca:	4b25      	ldr	r3, [pc, #148]	@ (8007960 <netif_add+0x184>)
 80078cc:	f240 128b 	movw	r2, #395	@ 0x18b
 80078d0:	492b      	ldr	r1, [pc, #172]	@ (8007980 <netif_add+0x1a4>)
 80078d2:	4825      	ldr	r0, [pc, #148]	@ (8007968 <netif_add+0x18c>)
 80078d4:	f006 f828 	bl	800d928 <iprintf>
        num_netifs++;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	3301      	adds	r3, #1
 80078dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2bff      	cmp	r3, #255	@ 0xff
 80078e2:	dd06      	ble.n	80078f2 <netif_add+0x116>
 80078e4:	4b1e      	ldr	r3, [pc, #120]	@ (8007960 <netif_add+0x184>)
 80078e6:	f240 128d 	movw	r2, #397	@ 0x18d
 80078ea:	4926      	ldr	r1, [pc, #152]	@ (8007984 <netif_add+0x1a8>)
 80078ec:	481e      	ldr	r0, [pc, #120]	@ (8007968 <netif_add+0x18c>)
 80078ee:	f006 f81b 	bl	800d928 <iprintf>
        if (netif2->num == netif->num) {
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80078fe:	429a      	cmp	r2, r3
 8007900:	d108      	bne.n	8007914 <netif_add+0x138>
          netif->num++;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8007908:	3301      	adds	r3, #1
 800790a:	b2da      	uxtb	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8007912:	e005      	b.n	8007920 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	617b      	str	r3, [r7, #20]
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d1d0      	bne.n	80078c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1be      	bne.n	80078a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800792c:	2bfe      	cmp	r3, #254	@ 0xfe
 800792e:	d103      	bne.n	8007938 <netif_add+0x15c>
    netif_num = 0;
 8007930:	4b11      	ldr	r3, [pc, #68]	@ (8007978 <netif_add+0x19c>)
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
 8007936:	e006      	b.n	8007946 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800793e:	3301      	adds	r3, #1
 8007940:	b2da      	uxtb	r2, r3
 8007942:	4b0d      	ldr	r3, [pc, #52]	@ (8007978 <netif_add+0x19c>)
 8007944:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8007946:	4b0d      	ldr	r3, [pc, #52]	@ (800797c <netif_add+0x1a0>)
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800794e:	4a0b      	ldr	r2, [pc, #44]	@ (800797c <netif_add+0x1a0>)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8007954:	68fb      	ldr	r3, [r7, #12]
}
 8007956:	4618      	mov	r0, r3
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	0800eaec 	.word	0x0800eaec
 8007964:	0800eb80 	.word	0x0800eb80
 8007968:	0800eb3c 	.word	0x0800eb3c
 800796c:	0800eb9c 	.word	0x0800eb9c
 8007970:	08010100 	.word	0x08010100
 8007974:	08007d97 	.word	0x08007d97
 8007978:	200094b8 	.word	0x200094b8
 800797c:	200094b0 	.word	0x200094b0
 8007980:	0800ebc0 	.word	0x0800ebc0
 8007984:	0800ebd4 	.word	0x0800ebd4

08007988 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f001 fd2b 	bl	80093f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800799a:	bf00      	nop
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
	...

080079a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d106      	bne.n	80079c4 <netif_do_set_ipaddr+0x20>
 80079b6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a2c <netif_do_set_ipaddr+0x88>)
 80079b8:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80079bc:	491c      	ldr	r1, [pc, #112]	@ (8007a30 <netif_do_set_ipaddr+0x8c>)
 80079be:	481d      	ldr	r0, [pc, #116]	@ (8007a34 <netif_do_set_ipaddr+0x90>)
 80079c0:	f005 ffb2 	bl	800d928 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d106      	bne.n	80079d8 <netif_do_set_ipaddr+0x34>
 80079ca:	4b18      	ldr	r3, [pc, #96]	@ (8007a2c <netif_do_set_ipaddr+0x88>)
 80079cc:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80079d0:	4917      	ldr	r1, [pc, #92]	@ (8007a30 <netif_do_set_ipaddr+0x8c>)
 80079d2:	4818      	ldr	r0, [pc, #96]	@ (8007a34 <netif_do_set_ipaddr+0x90>)
 80079d4:	f005 ffa8 	bl	800d928 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3304      	adds	r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d01c      	beq.n	8007a20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	3304      	adds	r3, #4
 80079f0:	681a      	ldr	r2, [r3, #0]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80079f6:	f107 0314 	add.w	r3, r7, #20
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f7ff ffc3 	bl	8007988 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d002      	beq.n	8007a0e <netif_do_set_ipaddr+0x6a>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	e000      	b.n	8007a10 <netif_do_set_ipaddr+0x6c>
 8007a0e:	2300      	movs	r3, #0
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8007a14:	2101      	movs	r1, #1
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 f8d2 	bl	8007bc0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e000      	b.n	8007a22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3718      	adds	r7, #24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}
 8007a2a:	bf00      	nop
 8007a2c:	0800eaec 	.word	0x0800eaec
 8007a30:	0800ec04 	.word	0x0800ec04
 8007a34:	0800eb3c 	.word	0x0800eb3c

08007a38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8007a38:	b480      	push	{r7}
 8007a3a:	b085      	sub	sp, #20
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	60f8      	str	r0, [r7, #12]
 8007a40:	60b9      	str	r1, [r7, #8]
 8007a42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	681a      	ldr	r2, [r3, #0]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	3308      	adds	r3, #8
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d00a      	beq.n	8007a68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d002      	beq.n	8007a5e <netif_do_set_netmask+0x26>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	e000      	b.n	8007a60 <netif_do_set_netmask+0x28>
 8007a5e:	2300      	movs	r3, #0
 8007a60:	68fa      	ldr	r2, [r7, #12]
 8007a62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3714      	adds	r7, #20
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8007a76:	b480      	push	{r7}
 8007a78:	b085      	sub	sp, #20
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	60f8      	str	r0, [r7, #12]
 8007a7e:	60b9      	str	r1, [r7, #8]
 8007a80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	330c      	adds	r3, #12
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d00a      	beq.n	8007aa6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <netif_do_set_gw+0x26>
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	e000      	b.n	8007a9e <netif_do_set_gw+0x28>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	68fa      	ldr	r2, [r7, #12]
 8007aa0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e000      	b.n	8007aa8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b088      	sub	sp, #32
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d101      	bne.n	8007ad4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8007ad0:	4b1c      	ldr	r3, [pc, #112]	@ (8007b44 <netif_set_addr+0x90>)
 8007ad2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8007ada:	4b1a      	ldr	r3, [pc, #104]	@ (8007b44 <netif_set_addr+0x90>)
 8007adc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8007ae4:	4b17      	ldr	r3, [pc, #92]	@ (8007b44 <netif_set_addr+0x90>)
 8007ae6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <netif_set_addr+0x42>
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d101      	bne.n	8007afa <netif_set_addr+0x46>
 8007af6:	2301      	movs	r3, #1
 8007af8:	e000      	b.n	8007afc <netif_set_addr+0x48>
 8007afa:	2300      	movs	r3, #0
 8007afc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d006      	beq.n	8007b12 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007b04:	f107 0310 	add.w	r3, r7, #16
 8007b08:	461a      	mov	r2, r3
 8007b0a:	68b9      	ldr	r1, [r7, #8]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f7ff ff49 	bl	80079a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8007b12:	69fa      	ldr	r2, [r7, #28]
 8007b14:	6879      	ldr	r1, [r7, #4]
 8007b16:	68f8      	ldr	r0, [r7, #12]
 8007b18:	f7ff ff8e 	bl	8007a38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	68f8      	ldr	r0, [r7, #12]
 8007b22:	f7ff ffa8 	bl	8007a76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d106      	bne.n	8007b3a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8007b2c:	f107 0310 	add.w	r3, r7, #16
 8007b30:	461a      	mov	r2, r3
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff ff35 	bl	80079a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8007b3a:	bf00      	nop
 8007b3c:	3720      	adds	r7, #32
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	08010100 	.word	0x08010100

08007b48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8007b50:	4a04      	ldr	r2, [pc, #16]	@ (8007b64 <netif_set_default+0x1c>)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8007b56:	bf00      	nop
 8007b58:	370c      	adds	r7, #12
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b60:	4770      	bx	lr
 8007b62:	bf00      	nop
 8007b64:	200094b4 	.word	0x200094b4

08007b68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d107      	bne.n	8007b86 <netif_set_up+0x1e>
 8007b76:	4b0f      	ldr	r3, [pc, #60]	@ (8007bb4 <netif_set_up+0x4c>)
 8007b78:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007b7c:	490e      	ldr	r1, [pc, #56]	@ (8007bb8 <netif_set_up+0x50>)
 8007b7e:	480f      	ldr	r0, [pc, #60]	@ (8007bbc <netif_set_up+0x54>)
 8007b80:	f005 fed2 	bl	800d928 <iprintf>
 8007b84:	e013      	b.n	8007bae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d10c      	bne.n	8007bae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007ba6:	2103      	movs	r1, #3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f809 	bl	8007bc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	0800eaec 	.word	0x0800eaec
 8007bb8:	0800ec74 	.word	0x0800ec74
 8007bbc:	0800eb3c 	.word	0x0800eb3c

08007bc0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d106      	bne.n	8007be0 <netif_issue_reports+0x20>
 8007bd2:	4b18      	ldr	r3, [pc, #96]	@ (8007c34 <netif_issue_reports+0x74>)
 8007bd4:	f240 326d 	movw	r2, #877	@ 0x36d
 8007bd8:	4917      	ldr	r1, [pc, #92]	@ (8007c38 <netif_issue_reports+0x78>)
 8007bda:	4818      	ldr	r0, [pc, #96]	@ (8007c3c <netif_issue_reports+0x7c>)
 8007bdc:	f005 fea4 	bl	800d928 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007be6:	f003 0304 	and.w	r3, r3, #4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d01e      	beq.n	8007c2c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007bf4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d017      	beq.n	8007c2c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007bfc:	78fb      	ldrb	r3, [r7, #3]
 8007bfe:	f003 0301 	and.w	r3, r3, #1
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d013      	beq.n	8007c2e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	3304      	adds	r3, #4
 8007c0a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00e      	beq.n	8007c2e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c16:	f003 0308 	and.w	r3, r3, #8
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	3304      	adds	r3, #4
 8007c22:	4619      	mov	r1, r3
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f004 f9df 	bl	800bfe8 <etharp_request>
 8007c2a:	e000      	b.n	8007c2e <netif_issue_reports+0x6e>
    return;
 8007c2c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}
 8007c34:	0800eaec 	.word	0x0800eaec
 8007c38:	0800ec90 	.word	0x0800ec90
 8007c3c:	0800eb3c 	.word	0x0800eb3c

08007c40 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d107      	bne.n	8007c5e <netif_set_down+0x1e>
 8007c4e:	4b12      	ldr	r3, [pc, #72]	@ (8007c98 <netif_set_down+0x58>)
 8007c50:	f240 329b 	movw	r2, #923	@ 0x39b
 8007c54:	4911      	ldr	r1, [pc, #68]	@ (8007c9c <netif_set_down+0x5c>)
 8007c56:	4812      	ldr	r0, [pc, #72]	@ (8007ca0 <netif_set_down+0x60>)
 8007c58:	f005 fe66 	bl	800d928 <iprintf>
 8007c5c:	e019      	b.n	8007c92 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c64:	f003 0301 	and.w	r3, r3, #1
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d012      	beq.n	8007c92 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c72:	f023 0301 	bic.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007c84:	f003 0308 	and.w	r3, r3, #8
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d002      	beq.n	8007c92 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f003 fd65 	bl	800b75c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8007c92:	3708      	adds	r7, #8
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	0800eaec 	.word	0x0800eaec
 8007c9c:	0800ecb4 	.word	0x0800ecb4
 8007ca0:	0800eb3c 	.word	0x0800eb3c

08007ca4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d107      	bne.n	8007cc2 <netif_set_link_up+0x1e>
 8007cb2:	4b15      	ldr	r3, [pc, #84]	@ (8007d08 <netif_set_link_up+0x64>)
 8007cb4:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8007cb8:	4914      	ldr	r1, [pc, #80]	@ (8007d0c <netif_set_link_up+0x68>)
 8007cba:	4815      	ldr	r0, [pc, #84]	@ (8007d10 <netif_set_link_up+0x6c>)
 8007cbc:	f005 fe34 	bl	800d928 <iprintf>
 8007cc0:	e01e      	b.n	8007d00 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007cc8:	f003 0304 	and.w	r3, r3, #4
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d117      	bne.n	8007d00 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007cd6:	f043 0304 	orr.w	r3, r3, #4
 8007cda:	b2da      	uxtb	r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f001 ffb0 	bl	8009c48 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8007ce8:	2103      	movs	r1, #3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff ff68 	bl	8007bc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d003      	beq.n	8007d00 <netif_set_link_up+0x5c>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	0800eaec 	.word	0x0800eaec
 8007d0c:	0800ecd4 	.word	0x0800ecd4
 8007d10:	0800eb3c 	.word	0x0800eb3c

08007d14 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b082      	sub	sp, #8
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d107      	bne.n	8007d32 <netif_set_link_down+0x1e>
 8007d22:	4b11      	ldr	r3, [pc, #68]	@ (8007d68 <netif_set_link_down+0x54>)
 8007d24:	f240 4206 	movw	r2, #1030	@ 0x406
 8007d28:	4910      	ldr	r1, [pc, #64]	@ (8007d6c <netif_set_link_down+0x58>)
 8007d2a:	4811      	ldr	r0, [pc, #68]	@ (8007d70 <netif_set_link_down+0x5c>)
 8007d2c:	f005 fdfc 	bl	800d928 <iprintf>
 8007d30:	e017      	b.n	8007d62 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d010      	beq.n	8007d62 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007d46:	f023 0304 	bic.w	r3, r3, #4
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	69db      	ldr	r3, [r3, #28]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d003      	beq.n	8007d62 <netif_set_link_down+0x4e>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	0800eaec 	.word	0x0800eaec
 8007d6c:	0800ecf8 	.word	0x0800ecf8
 8007d70:	0800eb3c 	.word	0x0800eb3c

08007d74 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8007d74:	b480      	push	{r7}
 8007d76:	b083      	sub	sp, #12
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	6078      	str	r0, [r7, #4]
 8007d7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	683a      	ldr	r2, [r7, #0]
 8007d88:	61da      	str	r2, [r3, #28]
  }
}
 8007d8a:	bf00      	nop
 8007d8c:	370c      	adds	r7, #12
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d94:	4770      	bx	lr

08007d96 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b085      	sub	sp, #20
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	60f8      	str	r0, [r7, #12]
 8007d9e:	60b9      	str	r1, [r7, #8]
 8007da0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8007da2:	f06f 030b 	mvn.w	r3, #11
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b085      	sub	sp, #20
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	80fb      	strh	r3, [r7, #6]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	88fa      	ldrh	r2, [r7, #6]
 8007dd8:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	88ba      	ldrh	r2, [r7, #4]
 8007dde:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8007de0:	8b3b      	ldrh	r3, [r7, #24]
 8007de2:	b2da      	uxtb	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	7f3a      	ldrb	r2, [r7, #28]
 8007dec:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2201      	movs	r2, #1
 8007df2:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2200      	movs	r2, #0
 8007df8:	73da      	strb	r2, [r3, #15]
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08c      	sub	sp, #48	@ 0x30
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	4603      	mov	r3, r0
 8007e10:	71fb      	strb	r3, [r7, #7]
 8007e12:	460b      	mov	r3, r1
 8007e14:	80bb      	strh	r3, [r7, #4]
 8007e16:	4613      	mov	r3, r2
 8007e18:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8007e1a:	79fb      	ldrb	r3, [r7, #7]
 8007e1c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8007e1e:	887b      	ldrh	r3, [r7, #2]
 8007e20:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007e24:	d07d      	beq.n	8007f22 <pbuf_alloc+0x11a>
 8007e26:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8007e2a:	f300 80c6 	bgt.w	8007fba <pbuf_alloc+0x1b2>
 8007e2e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007e32:	d010      	beq.n	8007e56 <pbuf_alloc+0x4e>
 8007e34:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8007e38:	f300 80bf 	bgt.w	8007fba <pbuf_alloc+0x1b2>
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d002      	beq.n	8007e46 <pbuf_alloc+0x3e>
 8007e40:	2b41      	cmp	r3, #65	@ 0x41
 8007e42:	f040 80ba 	bne.w	8007fba <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8007e46:	887a      	ldrh	r2, [r7, #2]
 8007e48:	88bb      	ldrh	r3, [r7, #4]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	2000      	movs	r0, #0
 8007e4e:	f000 f8cf 	bl	8007ff0 <pbuf_alloc_reference>
 8007e52:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8007e54:	e0bb      	b.n	8007fce <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8007e56:	2300      	movs	r3, #0
 8007e58:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8007e5e:	88bb      	ldrh	r3, [r7, #4]
 8007e60:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8007e62:	2005      	movs	r0, #5
 8007e64:	f7ff fc18 	bl	8007698 <memp_malloc>
 8007e68:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d107      	bne.n	8007e80 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d002      	beq.n	8007e7c <pbuf_alloc+0x74>
            pbuf_free(p);
 8007e76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e78:	f000 faa8 	bl	80083cc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	e0a7      	b.n	8007fd0 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8007e80:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e82:	3303      	adds	r3, #3
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	f023 0303 	bic.w	r3, r3, #3
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	8b7a      	ldrh	r2, [r7, #26]
 8007e94:	4293      	cmp	r3, r2
 8007e96:	bf28      	it	cs
 8007e98:	4613      	movcs	r3, r2
 8007e9a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8007e9c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007e9e:	3310      	adds	r3, #16
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	3303      	adds	r3, #3
 8007ea6:	f023 0303 	bic.w	r3, r3, #3
 8007eaa:	4618      	mov	r0, r3
 8007eac:	89f9      	ldrh	r1, [r7, #14]
 8007eae:	8b7a      	ldrh	r2, [r7, #26]
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	9301      	str	r3, [sp, #4]
 8007eb4:	887b      	ldrh	r3, [r7, #2]
 8007eb6:	9300      	str	r3, [sp, #0]
 8007eb8:	460b      	mov	r3, r1
 8007eba:	4601      	mov	r1, r0
 8007ebc:	6938      	ldr	r0, [r7, #16]
 8007ebe:	f7ff ff78 	bl	8007db2 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	f003 0303 	and.w	r3, r3, #3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d006      	beq.n	8007edc <pbuf_alloc+0xd4>
 8007ece:	4b42      	ldr	r3, [pc, #264]	@ (8007fd8 <pbuf_alloc+0x1d0>)
 8007ed0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ed4:	4941      	ldr	r1, [pc, #260]	@ (8007fdc <pbuf_alloc+0x1d4>)
 8007ed6:	4842      	ldr	r0, [pc, #264]	@ (8007fe0 <pbuf_alloc+0x1d8>)
 8007ed8:	f005 fd26 	bl	800d928 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8007edc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007ede:	3303      	adds	r3, #3
 8007ee0:	f023 0303 	bic.w	r3, r3, #3
 8007ee4:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8007ee8:	d106      	bne.n	8007ef8 <pbuf_alloc+0xf0>
 8007eea:	4b3b      	ldr	r3, [pc, #236]	@ (8007fd8 <pbuf_alloc+0x1d0>)
 8007eec:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8007ef0:	493c      	ldr	r1, [pc, #240]	@ (8007fe4 <pbuf_alloc+0x1dc>)
 8007ef2:	483b      	ldr	r0, [pc, #236]	@ (8007fe0 <pbuf_alloc+0x1d8>)
 8007ef4:	f005 fd18 	bl	800d928 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d102      	bne.n	8007f04 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f02:	e002      	b.n	8007f0a <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	693a      	ldr	r2, [r7, #16]
 8007f08:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8007f0a:	693b      	ldr	r3, [r7, #16]
 8007f0c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8007f0e:	8b7a      	ldrh	r2, [r7, #26]
 8007f10:	89fb      	ldrh	r3, [r7, #14]
 8007f12:	1ad3      	subs	r3, r2, r3
 8007f14:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8007f16:	2300      	movs	r3, #0
 8007f18:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8007f1a:	8b7b      	ldrh	r3, [r7, #26]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d1a0      	bne.n	8007e62 <pbuf_alloc+0x5a>
      break;
 8007f20:	e055      	b.n	8007fce <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8007f22:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007f24:	3303      	adds	r3, #3
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	f023 0303 	bic.w	r3, r3, #3
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	88bb      	ldrh	r3, [r7, #4]
 8007f30:	3303      	adds	r3, #3
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	f023 0303 	bic.w	r3, r3, #3
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	4413      	add	r3, r2
 8007f3c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8007f3e:	8b3b      	ldrh	r3, [r7, #24]
 8007f40:	3310      	adds	r3, #16
 8007f42:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007f44:	8b3a      	ldrh	r2, [r7, #24]
 8007f46:	88bb      	ldrh	r3, [r7, #4]
 8007f48:	3303      	adds	r3, #3
 8007f4a:	f023 0303 	bic.w	r3, r3, #3
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d306      	bcc.n	8007f60 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8007f52:	8afa      	ldrh	r2, [r7, #22]
 8007f54:	88bb      	ldrh	r3, [r7, #4]
 8007f56:	3303      	adds	r3, #3
 8007f58:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8007f5c:	429a      	cmp	r2, r3
 8007f5e:	d201      	bcs.n	8007f64 <pbuf_alloc+0x15c>
        return NULL;
 8007f60:	2300      	movs	r3, #0
 8007f62:	e035      	b.n	8007fd0 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8007f64:	8afb      	ldrh	r3, [r7, #22]
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7ff fa02 	bl	8007370 <mem_malloc>
 8007f6c:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <pbuf_alloc+0x170>
        return NULL;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e02b      	b.n	8007fd0 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8007f78:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007f7a:	3310      	adds	r3, #16
 8007f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f7e:	4413      	add	r3, r2
 8007f80:	3303      	adds	r3, #3
 8007f82:	f023 0303 	bic.w	r3, r3, #3
 8007f86:	4618      	mov	r0, r3
 8007f88:	88b9      	ldrh	r1, [r7, #4]
 8007f8a:	88ba      	ldrh	r2, [r7, #4]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	9301      	str	r3, [sp, #4]
 8007f90:	887b      	ldrh	r3, [r7, #2]
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	460b      	mov	r3, r1
 8007f96:	4601      	mov	r1, r0
 8007f98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007f9a:	f7ff ff0a 	bl	8007db2 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8007f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	f003 0303 	and.w	r3, r3, #3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d010      	beq.n	8007fcc <pbuf_alloc+0x1c4>
 8007faa:	4b0b      	ldr	r3, [pc, #44]	@ (8007fd8 <pbuf_alloc+0x1d0>)
 8007fac:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8007fb0:	490d      	ldr	r1, [pc, #52]	@ (8007fe8 <pbuf_alloc+0x1e0>)
 8007fb2:	480b      	ldr	r0, [pc, #44]	@ (8007fe0 <pbuf_alloc+0x1d8>)
 8007fb4:	f005 fcb8 	bl	800d928 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8007fb8:	e008      	b.n	8007fcc <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8007fba:	4b07      	ldr	r3, [pc, #28]	@ (8007fd8 <pbuf_alloc+0x1d0>)
 8007fbc:	f240 1227 	movw	r2, #295	@ 0x127
 8007fc0:	490a      	ldr	r1, [pc, #40]	@ (8007fec <pbuf_alloc+0x1e4>)
 8007fc2:	4807      	ldr	r0, [pc, #28]	@ (8007fe0 <pbuf_alloc+0x1d8>)
 8007fc4:	f005 fcb0 	bl	800d928 <iprintf>
      return NULL;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	e001      	b.n	8007fd0 <pbuf_alloc+0x1c8>
      break;
 8007fcc:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8007fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3728      	adds	r7, #40	@ 0x28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	0800ed1c 	.word	0x0800ed1c
 8007fdc:	0800ed4c 	.word	0x0800ed4c
 8007fe0:	0800ed7c 	.word	0x0800ed7c
 8007fe4:	0800eda4 	.word	0x0800eda4
 8007fe8:	0800edd8 	.word	0x0800edd8
 8007fec:	0800ee04 	.word	0x0800ee04

08007ff0 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b086      	sub	sp, #24
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	460b      	mov	r3, r1
 8007ffa:	807b      	strh	r3, [r7, #2]
 8007ffc:	4613      	mov	r3, r2
 8007ffe:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8008000:	883b      	ldrh	r3, [r7, #0]
 8008002:	2b41      	cmp	r3, #65	@ 0x41
 8008004:	d009      	beq.n	800801a <pbuf_alloc_reference+0x2a>
 8008006:	883b      	ldrh	r3, [r7, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d006      	beq.n	800801a <pbuf_alloc_reference+0x2a>
 800800c:	4b0f      	ldr	r3, [pc, #60]	@ (800804c <pbuf_alloc_reference+0x5c>)
 800800e:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8008012:	490f      	ldr	r1, [pc, #60]	@ (8008050 <pbuf_alloc_reference+0x60>)
 8008014:	480f      	ldr	r0, [pc, #60]	@ (8008054 <pbuf_alloc_reference+0x64>)
 8008016:	f005 fc87 	bl	800d928 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800801a:	2004      	movs	r0, #4
 800801c:	f7ff fb3c 	bl	8007698 <memp_malloc>
 8008020:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d101      	bne.n	800802c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8008028:	2300      	movs	r3, #0
 800802a:	e00b      	b.n	8008044 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800802c:	8879      	ldrh	r1, [r7, #2]
 800802e:	887a      	ldrh	r2, [r7, #2]
 8008030:	2300      	movs	r3, #0
 8008032:	9301      	str	r3, [sp, #4]
 8008034:	883b      	ldrh	r3, [r7, #0]
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	460b      	mov	r3, r1
 800803a:	6879      	ldr	r1, [r7, #4]
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff feb8 	bl	8007db2 <pbuf_init_alloced_pbuf>
  return p;
 8008042:	68fb      	ldr	r3, [r7, #12]
}
 8008044:	4618      	mov	r0, r3
 8008046:	3710      	adds	r7, #16
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	0800ed1c 	.word	0x0800ed1c
 8008050:	0800ee20 	.word	0x0800ee20
 8008054:	0800ed7c 	.word	0x0800ed7c

08008058 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af02      	add	r7, sp, #8
 800805e:	607b      	str	r3, [r7, #4]
 8008060:	4603      	mov	r3, r0
 8008062:	73fb      	strb	r3, [r7, #15]
 8008064:	460b      	mov	r3, r1
 8008066:	81bb      	strh	r3, [r7, #12]
 8008068:	4613      	mov	r3, r2
 800806a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800806c:	7bfb      	ldrb	r3, [r7, #15]
 800806e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8008070:	8a7b      	ldrh	r3, [r7, #18]
 8008072:	3303      	adds	r3, #3
 8008074:	f023 0203 	bic.w	r2, r3, #3
 8008078:	89bb      	ldrh	r3, [r7, #12]
 800807a:	441a      	add	r2, r3
 800807c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800807e:	429a      	cmp	r2, r3
 8008080:	d901      	bls.n	8008086 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8008082:	2300      	movs	r3, #0
 8008084:	e018      	b.n	80080b8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8008086:	6a3b      	ldr	r3, [r7, #32]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d007      	beq.n	800809c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800808c:	8a7b      	ldrh	r3, [r7, #18]
 800808e:	3303      	adds	r3, #3
 8008090:	f023 0303 	bic.w	r3, r3, #3
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	4413      	add	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
 800809a:	e001      	b.n	80080a0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	89b9      	ldrh	r1, [r7, #12]
 80080a4:	89ba      	ldrh	r2, [r7, #12]
 80080a6:	2302      	movs	r3, #2
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	897b      	ldrh	r3, [r7, #10]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	460b      	mov	r3, r1
 80080b0:	6979      	ldr	r1, [r7, #20]
 80080b2:	f7ff fe7e 	bl	8007db2 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80080b6:	687b      	ldr	r3, [r7, #4]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3718      	adds	r7, #24
 80080bc:	46bd      	mov	sp, r7
 80080be:	bd80      	pop	{r7, pc}

080080c0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	460b      	mov	r3, r1
 80080ca:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d106      	bne.n	80080e0 <pbuf_realloc+0x20>
 80080d2:	4b3a      	ldr	r3, [pc, #232]	@ (80081bc <pbuf_realloc+0xfc>)
 80080d4:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 80080d8:	4939      	ldr	r1, [pc, #228]	@ (80081c0 <pbuf_realloc+0x100>)
 80080da:	483a      	ldr	r0, [pc, #232]	@ (80081c4 <pbuf_realloc+0x104>)
 80080dc:	f005 fc24 	bl	800d928 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	891b      	ldrh	r3, [r3, #8]
 80080e4:	887a      	ldrh	r2, [r7, #2]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d263      	bcs.n	80081b2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	891a      	ldrh	r2, [r3, #8]
 80080ee:	887b      	ldrh	r3, [r7, #2]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80080f4:	887b      	ldrh	r3, [r7, #2]
 80080f6:	817b      	strh	r3, [r7, #10]
  q = p;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80080fc:	e018      	b.n	8008130 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	895b      	ldrh	r3, [r3, #10]
 8008102:	897a      	ldrh	r2, [r7, #10]
 8008104:	1ad3      	subs	r3, r2, r3
 8008106:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	891a      	ldrh	r2, [r3, #8]
 800810c:	893b      	ldrh	r3, [r7, #8]
 800810e:	1ad3      	subs	r3, r2, r3
 8008110:	b29a      	uxth	r2, r3
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d106      	bne.n	8008130 <pbuf_realloc+0x70>
 8008122:	4b26      	ldr	r3, [pc, #152]	@ (80081bc <pbuf_realloc+0xfc>)
 8008124:	f240 12af 	movw	r2, #431	@ 0x1af
 8008128:	4927      	ldr	r1, [pc, #156]	@ (80081c8 <pbuf_realloc+0x108>)
 800812a:	4826      	ldr	r0, [pc, #152]	@ (80081c4 <pbuf_realloc+0x104>)
 800812c:	f005 fbfc 	bl	800d928 <iprintf>
  while (rem_len > q->len) {
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	895b      	ldrh	r3, [r3, #10]
 8008134:	897a      	ldrh	r2, [r7, #10]
 8008136:	429a      	cmp	r2, r3
 8008138:	d8e1      	bhi.n	80080fe <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	7b1b      	ldrb	r3, [r3, #12]
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	2b00      	cmp	r3, #0
 8008144:	d121      	bne.n	800818a <pbuf_realloc+0xca>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	895b      	ldrh	r3, [r3, #10]
 800814a:	897a      	ldrh	r2, [r7, #10]
 800814c:	429a      	cmp	r2, r3
 800814e:	d01c      	beq.n	800818a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	7b5b      	ldrb	r3, [r3, #13]
 8008154:	f003 0302 	and.w	r3, r3, #2
 8008158:	2b00      	cmp	r3, #0
 800815a:	d116      	bne.n	800818a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	685a      	ldr	r2, [r3, #4]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	1ad3      	subs	r3, r2, r3
 8008164:	b29a      	uxth	r2, r3
 8008166:	897b      	ldrh	r3, [r7, #10]
 8008168:	4413      	add	r3, r2
 800816a:	b29b      	uxth	r3, r3
 800816c:	4619      	mov	r1, r3
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	f7fe fffc 	bl	800716c <mem_trim>
 8008174:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2b00      	cmp	r3, #0
 800817a:	d106      	bne.n	800818a <pbuf_realloc+0xca>
 800817c:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <pbuf_realloc+0xfc>)
 800817e:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8008182:	4912      	ldr	r1, [pc, #72]	@ (80081cc <pbuf_realloc+0x10c>)
 8008184:	480f      	ldr	r0, [pc, #60]	@ (80081c4 <pbuf_realloc+0x104>)
 8008186:	f005 fbcf 	bl	800d928 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	897a      	ldrh	r2, [r7, #10]
 800818e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	895a      	ldrh	r2, [r3, #10]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f000 f911 	bl	80083cc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	601a      	str	r2, [r3, #0]
 80081b0:	e000      	b.n	80081b4 <pbuf_realloc+0xf4>
    return;
 80081b2:	bf00      	nop

}
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	0800ed1c 	.word	0x0800ed1c
 80081c0:	0800ee34 	.word	0x0800ee34
 80081c4:	0800ed7c 	.word	0x0800ed7c
 80081c8:	0800ee4c 	.word	0x0800ee4c
 80081cc:	0800ee64 	.word	0x0800ee64

080081d0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	60b9      	str	r1, [r7, #8]
 80081da:	4613      	mov	r3, r2
 80081dc:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d106      	bne.n	80081f2 <pbuf_add_header_impl+0x22>
 80081e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008294 <pbuf_add_header_impl+0xc4>)
 80081e6:	f240 12df 	movw	r2, #479	@ 0x1df
 80081ea:	492b      	ldr	r1, [pc, #172]	@ (8008298 <pbuf_add_header_impl+0xc8>)
 80081ec:	482b      	ldr	r0, [pc, #172]	@ (800829c <pbuf_add_header_impl+0xcc>)
 80081ee:	f005 fb9b 	bl	800d928 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <pbuf_add_header_impl+0x30>
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081fe:	d301      	bcc.n	8008204 <pbuf_add_header_impl+0x34>
    return 1;
 8008200:	2301      	movs	r3, #1
 8008202:	e043      	b.n	800828c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d101      	bne.n	800820e <pbuf_add_header_impl+0x3e>
    return 0;
 800820a:	2300      	movs	r3, #0
 800820c:	e03e      	b.n	800828c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	891a      	ldrh	r2, [r3, #8]
 8008216:	8a7b      	ldrh	r3, [r7, #18]
 8008218:	4413      	add	r3, r2
 800821a:	b29b      	uxth	r3, r3
 800821c:	8a7a      	ldrh	r2, [r7, #18]
 800821e:	429a      	cmp	r2, r3
 8008220:	d901      	bls.n	8008226 <pbuf_add_header_impl+0x56>
    return 1;
 8008222:	2301      	movs	r3, #1
 8008224:	e032      	b.n	800828c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	7b1b      	ldrb	r3, [r3, #12]
 800822a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800822c:	8a3b      	ldrh	r3, [r7, #16]
 800822e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00c      	beq.n	8008250 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	685a      	ldr	r2, [r3, #4]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	425b      	negs	r3, r3
 800823e:	4413      	add	r3, r2
 8008240:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3310      	adds	r3, #16
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	429a      	cmp	r2, r3
 800824a:	d20d      	bcs.n	8008268 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800824c:	2301      	movs	r3, #1
 800824e:	e01d      	b.n	800828c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d006      	beq.n	8008264 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	425b      	negs	r3, r3
 800825e:	4413      	add	r3, r2
 8008260:	617b      	str	r3, [r7, #20]
 8008262:	e001      	b.n	8008268 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8008264:	2301      	movs	r3, #1
 8008266:	e011      	b.n	800828c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	895a      	ldrh	r2, [r3, #10]
 8008272:	8a7b      	ldrh	r3, [r7, #18]
 8008274:	4413      	add	r3, r2
 8008276:	b29a      	uxth	r2, r3
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	891a      	ldrh	r2, [r3, #8]
 8008280:	8a7b      	ldrh	r3, [r7, #18]
 8008282:	4413      	add	r3, r2
 8008284:	b29a      	uxth	r2, r3
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	811a      	strh	r2, [r3, #8]


  return 0;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3718      	adds	r7, #24
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	0800ed1c 	.word	0x0800ed1c
 8008298:	0800ee80 	.word	0x0800ee80
 800829c:	0800ed7c 	.word	0x0800ed7c

080082a0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b082      	sub	sp, #8
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80082aa:	2200      	movs	r2, #0
 80082ac:	6839      	ldr	r1, [r7, #0]
 80082ae:	6878      	ldr	r0, [r7, #4]
 80082b0:	f7ff ff8e 	bl	80081d0 <pbuf_add_header_impl>
 80082b4:	4603      	mov	r3, r0
}
 80082b6:	4618      	mov	r0, r3
 80082b8:	3708      	adds	r7, #8
 80082ba:	46bd      	mov	sp, r7
 80082bc:	bd80      	pop	{r7, pc}
	...

080082c0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b084      	sub	sp, #16
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d106      	bne.n	80082de <pbuf_remove_header+0x1e>
 80082d0:	4b20      	ldr	r3, [pc, #128]	@ (8008354 <pbuf_remove_header+0x94>)
 80082d2:	f240 224b 	movw	r2, #587	@ 0x24b
 80082d6:	4920      	ldr	r1, [pc, #128]	@ (8008358 <pbuf_remove_header+0x98>)
 80082d8:	4820      	ldr	r0, [pc, #128]	@ (800835c <pbuf_remove_header+0x9c>)
 80082da:	f005 fb25 	bl	800d928 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <pbuf_remove_header+0x2c>
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082ea:	d301      	bcc.n	80082f0 <pbuf_remove_header+0x30>
    return 1;
 80082ec:	2301      	movs	r3, #1
 80082ee:	e02c      	b.n	800834a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d101      	bne.n	80082fa <pbuf_remove_header+0x3a>
    return 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e027      	b.n	800834a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	895b      	ldrh	r3, [r3, #10]
 8008302:	89fa      	ldrh	r2, [r7, #14]
 8008304:	429a      	cmp	r2, r3
 8008306:	d908      	bls.n	800831a <pbuf_remove_header+0x5a>
 8008308:	4b12      	ldr	r3, [pc, #72]	@ (8008354 <pbuf_remove_header+0x94>)
 800830a:	f240 2255 	movw	r2, #597	@ 0x255
 800830e:	4914      	ldr	r1, [pc, #80]	@ (8008360 <pbuf_remove_header+0xa0>)
 8008310:	4812      	ldr	r0, [pc, #72]	@ (800835c <pbuf_remove_header+0x9c>)
 8008312:	f005 fb09 	bl	800d928 <iprintf>
 8008316:	2301      	movs	r3, #1
 8008318:	e017      	b.n	800834a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	685a      	ldr	r2, [r3, #4]
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	441a      	add	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	895a      	ldrh	r2, [r3, #10]
 8008330:	89fb      	ldrh	r3, [r7, #14]
 8008332:	1ad3      	subs	r3, r2, r3
 8008334:	b29a      	uxth	r2, r3
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	891a      	ldrh	r2, [r3, #8]
 800833e:	89fb      	ldrh	r3, [r7, #14]
 8008340:	1ad3      	subs	r3, r2, r3
 8008342:	b29a      	uxth	r2, r3
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	0800ed1c 	.word	0x0800ed1c
 8008358:	0800ee80 	.word	0x0800ee80
 800835c:	0800ed7c 	.word	0x0800ed7c
 8008360:	0800ee8c 	.word	0x0800ee8c

08008364 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	460b      	mov	r3, r1
 800836e:	807b      	strh	r3, [r7, #2]
 8008370:	4613      	mov	r3, r2
 8008372:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8008374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008378:	2b00      	cmp	r3, #0
 800837a:	da08      	bge.n	800838e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800837c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008380:	425b      	negs	r3, r3
 8008382:	4619      	mov	r1, r3
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff9b 	bl	80082c0 <pbuf_remove_header>
 800838a:	4603      	mov	r3, r0
 800838c:	e007      	b.n	800839e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800838e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008392:	787a      	ldrb	r2, [r7, #1]
 8008394:	4619      	mov	r1, r3
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7ff ff1a 	bl	80081d0 <pbuf_add_header_impl>
 800839c:	4603      	mov	r3, r0
  }
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3708      	adds	r7, #8
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80083b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083b6:	2201      	movs	r2, #1
 80083b8:	4619      	mov	r1, r3
 80083ba:	6878      	ldr	r0, [r7, #4]
 80083bc:	f7ff ffd2 	bl	8008364 <pbuf_header_impl>
 80083c0:	4603      	mov	r3, r0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3708      	adds	r7, #8
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b086      	sub	sp, #24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10b      	bne.n	80083f2 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d106      	bne.n	80083ee <pbuf_free+0x22>
 80083e0:	4b38      	ldr	r3, [pc, #224]	@ (80084c4 <pbuf_free+0xf8>)
 80083e2:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80083e6:	4938      	ldr	r1, [pc, #224]	@ (80084c8 <pbuf_free+0xfc>)
 80083e8:	4838      	ldr	r0, [pc, #224]	@ (80084cc <pbuf_free+0x100>)
 80083ea:	f005 fa9d 	bl	800d928 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e063      	b.n	80084ba <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80083f2:	2300      	movs	r3, #0
 80083f4:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80083f6:	e05c      	b.n	80084b2 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	7b9b      	ldrb	r3, [r3, #14]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d106      	bne.n	800840e <pbuf_free+0x42>
 8008400:	4b30      	ldr	r3, [pc, #192]	@ (80084c4 <pbuf_free+0xf8>)
 8008402:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8008406:	4932      	ldr	r1, [pc, #200]	@ (80084d0 <pbuf_free+0x104>)
 8008408:	4830      	ldr	r0, [pc, #192]	@ (80084cc <pbuf_free+0x100>)
 800840a:	f005 fa8d 	bl	800d928 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	7b9b      	ldrb	r3, [r3, #14]
 8008412:	3b01      	subs	r3, #1
 8008414:	b2da      	uxtb	r2, r3
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	739a      	strb	r2, [r3, #14]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	7b9b      	ldrb	r3, [r3, #14]
 800841e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8008420:	7dbb      	ldrb	r3, [r7, #22]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d143      	bne.n	80084ae <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	7b1b      	ldrb	r3, [r3, #12]
 8008430:	f003 030f 	and.w	r3, r3, #15
 8008434:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	7b5b      	ldrb	r3, [r3, #13]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d011      	beq.n	8008466 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	691b      	ldr	r3, [r3, #16]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <pbuf_free+0x90>
 800844e:	4b1d      	ldr	r3, [pc, #116]	@ (80084c4 <pbuf_free+0xf8>)
 8008450:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8008454:	491f      	ldr	r1, [pc, #124]	@ (80084d4 <pbuf_free+0x108>)
 8008456:	481d      	ldr	r0, [pc, #116]	@ (80084cc <pbuf_free+0x100>)
 8008458:	f005 fa66 	bl	800d928 <iprintf>
        pc->custom_free_function(p);
 800845c:	68bb      	ldr	r3, [r7, #8]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	4798      	blx	r3
 8008464:	e01d      	b.n	80084a2 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8008466:	7bfb      	ldrb	r3, [r7, #15]
 8008468:	2b02      	cmp	r3, #2
 800846a:	d104      	bne.n	8008476 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800846c:	6879      	ldr	r1, [r7, #4]
 800846e:	2005      	movs	r0, #5
 8008470:	f7ff f982 	bl	8007778 <memp_free>
 8008474:	e015      	b.n	80084a2 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8008476:	7bfb      	ldrb	r3, [r7, #15]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d104      	bne.n	8008486 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800847c:	6879      	ldr	r1, [r7, #4]
 800847e:	2004      	movs	r0, #4
 8008480:	f7ff f97a 	bl	8007778 <memp_free>
 8008484:	e00d      	b.n	80084a2 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d103      	bne.n	8008494 <pbuf_free+0xc8>
          mem_free(p);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7fe fe03 	bl	8007098 <mem_free>
 8008492:	e006      	b.n	80084a2 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8008494:	4b0b      	ldr	r3, [pc, #44]	@ (80084c4 <pbuf_free+0xf8>)
 8008496:	f240 320f 	movw	r2, #783	@ 0x30f
 800849a:	490f      	ldr	r1, [pc, #60]	@ (80084d8 <pbuf_free+0x10c>)
 800849c:	480b      	ldr	r0, [pc, #44]	@ (80084cc <pbuf_free+0x100>)
 800849e:	f005 fa43 	bl	800d928 <iprintf>
        }
      }
      count++;
 80084a2:	7dfb      	ldrb	r3, [r7, #23]
 80084a4:	3301      	adds	r3, #1
 80084a6:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	607b      	str	r3, [r7, #4]
 80084ac:	e001      	b.n	80084b2 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d19f      	bne.n	80083f8 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80084b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80084ba:	4618      	mov	r0, r3
 80084bc:	3718      	adds	r7, #24
 80084be:	46bd      	mov	sp, r7
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	bf00      	nop
 80084c4:	0800ed1c 	.word	0x0800ed1c
 80084c8:	0800ee80 	.word	0x0800ee80
 80084cc:	0800ed7c 	.word	0x0800ed7c
 80084d0:	0800eeac 	.word	0x0800eeac
 80084d4:	0800eec4 	.word	0x0800eec4
 80084d8:	0800eee8 	.word	0x0800eee8

080084dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80084dc:	b480      	push	{r7}
 80084de:	b085      	sub	sp, #20
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80084e4:	2300      	movs	r3, #0
 80084e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80084e8:	e005      	b.n	80084f6 <pbuf_clen+0x1a>
    ++len;
 80084ea:	89fb      	ldrh	r3, [r7, #14]
 80084ec:	3301      	adds	r3, #1
 80084ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1f6      	bne.n	80084ea <pbuf_clen+0xe>
  }
  return len;
 80084fc:	89fb      	ldrh	r3, [r7, #14]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	3714      	adds	r7, #20
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b082      	sub	sp, #8
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d010      	beq.n	800853c <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	7b9b      	ldrb	r3, [r3, #14]
 800851e:	3301      	adds	r3, #1
 8008520:	b2da      	uxtb	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	7b9b      	ldrb	r3, [r3, #14]
 800852a:	2b00      	cmp	r3, #0
 800852c:	d106      	bne.n	800853c <pbuf_ref+0x30>
 800852e:	4b05      	ldr	r3, [pc, #20]	@ (8008544 <pbuf_ref+0x38>)
 8008530:	f240 3242 	movw	r2, #834	@ 0x342
 8008534:	4904      	ldr	r1, [pc, #16]	@ (8008548 <pbuf_ref+0x3c>)
 8008536:	4805      	ldr	r0, [pc, #20]	@ (800854c <pbuf_ref+0x40>)
 8008538:	f005 f9f6 	bl	800d928 <iprintf>
  }
}
 800853c:	bf00      	nop
 800853e:	3708      	adds	r7, #8
 8008540:	46bd      	mov	sp, r7
 8008542:	bd80      	pop	{r7, pc}
 8008544:	0800ed1c 	.word	0x0800ed1c
 8008548:	0800eefc 	.word	0x0800eefc
 800854c:	0800ed7c 	.word	0x0800ed7c

08008550 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b084      	sub	sp, #16
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <pbuf_cat+0x16>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d107      	bne.n	8008576 <pbuf_cat+0x26>
 8008566:	4b20      	ldr	r3, [pc, #128]	@ (80085e8 <pbuf_cat+0x98>)
 8008568:	f240 3259 	movw	r2, #857	@ 0x359
 800856c:	491f      	ldr	r1, [pc, #124]	@ (80085ec <pbuf_cat+0x9c>)
 800856e:	4820      	ldr	r0, [pc, #128]	@ (80085f0 <pbuf_cat+0xa0>)
 8008570:	f005 f9da 	bl	800d928 <iprintf>
 8008574:	e034      	b.n	80085e0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60fb      	str	r3, [r7, #12]
 800857a:	e00a      	b.n	8008592 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	891a      	ldrh	r2, [r3, #8]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	891b      	ldrh	r3, [r3, #8]
 8008584:	4413      	add	r3, r2
 8008586:	b29a      	uxth	r2, r3
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	60fb      	str	r3, [r7, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d1f0      	bne.n	800857c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	891a      	ldrh	r2, [r3, #8]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	895b      	ldrh	r3, [r3, #10]
 80085a2:	429a      	cmp	r2, r3
 80085a4:	d006      	beq.n	80085b4 <pbuf_cat+0x64>
 80085a6:	4b10      	ldr	r3, [pc, #64]	@ (80085e8 <pbuf_cat+0x98>)
 80085a8:	f240 3262 	movw	r2, #866	@ 0x362
 80085ac:	4911      	ldr	r1, [pc, #68]	@ (80085f4 <pbuf_cat+0xa4>)
 80085ae:	4810      	ldr	r0, [pc, #64]	@ (80085f0 <pbuf_cat+0xa0>)
 80085b0:	f005 f9ba 	bl	800d928 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <pbuf_cat+0x7a>
 80085bc:	4b0a      	ldr	r3, [pc, #40]	@ (80085e8 <pbuf_cat+0x98>)
 80085be:	f240 3263 	movw	r2, #867	@ 0x363
 80085c2:	490d      	ldr	r1, [pc, #52]	@ (80085f8 <pbuf_cat+0xa8>)
 80085c4:	480a      	ldr	r0, [pc, #40]	@ (80085f0 <pbuf_cat+0xa0>)
 80085c6:	f005 f9af 	bl	800d928 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	891a      	ldrh	r2, [r3, #8]
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	891b      	ldrh	r3, [r3, #8]
 80085d2:	4413      	add	r3, r2
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}
 80085e6:	bf00      	nop
 80085e8:	0800ed1c 	.word	0x0800ed1c
 80085ec:	0800ef10 	.word	0x0800ef10
 80085f0:	0800ed7c 	.word	0x0800ed7c
 80085f4:	0800ef48 	.word	0x0800ef48
 80085f8:	0800ef78 	.word	0x0800ef78

080085fc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b082      	sub	sp, #8
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8008606:	6839      	ldr	r1, [r7, #0]
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f7ff ffa1 	bl	8008550 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800860e:	6838      	ldr	r0, [r7, #0]
 8008610:	f7ff ff7c 	bl	800850c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8008626:	2300      	movs	r3, #0
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	2300      	movs	r3, #0
 800862c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2b00      	cmp	r3, #0
 8008632:	d008      	beq.n	8008646 <pbuf_copy+0x2a>
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d005      	beq.n	8008646 <pbuf_copy+0x2a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	891a      	ldrh	r2, [r3, #8]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	891b      	ldrh	r3, [r3, #8]
 8008642:	429a      	cmp	r2, r3
 8008644:	d209      	bcs.n	800865a <pbuf_copy+0x3e>
 8008646:	4b57      	ldr	r3, [pc, #348]	@ (80087a4 <pbuf_copy+0x188>)
 8008648:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800864c:	4956      	ldr	r1, [pc, #344]	@ (80087a8 <pbuf_copy+0x18c>)
 800864e:	4857      	ldr	r0, [pc, #348]	@ (80087ac <pbuf_copy+0x190>)
 8008650:	f005 f96a 	bl	800d928 <iprintf>
 8008654:	f06f 030f 	mvn.w	r3, #15
 8008658:	e09f      	b.n	800879a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	895b      	ldrh	r3, [r3, #10]
 800865e:	461a      	mov	r2, r3
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	1ad2      	subs	r2, r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	895b      	ldrh	r3, [r3, #10]
 8008668:	4619      	mov	r1, r3
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	1acb      	subs	r3, r1, r3
 800866e:	429a      	cmp	r2, r3
 8008670:	d306      	bcc.n	8008680 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	895b      	ldrh	r3, [r3, #10]
 8008676:	461a      	mov	r2, r3
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	1ad3      	subs	r3, r2, r3
 800867c:	60fb      	str	r3, [r7, #12]
 800867e:	e005      	b.n	800868c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	895b      	ldrh	r3, [r3, #10]
 8008684:	461a      	mov	r2, r3
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	1ad3      	subs	r3, r2, r3
 800868a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	18d0      	adds	r0, r2, r3
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	685a      	ldr	r2, [r3, #4]
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	4413      	add	r3, r2
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	4619      	mov	r1, r3
 80086a0:	f005 fa1d 	bl	800dade <memcpy>
    offset_to += len;
 80086a4:	697a      	ldr	r2, [r7, #20]
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80086ac:	693a      	ldr	r2, [r7, #16]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4413      	add	r3, r2
 80086b2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	895b      	ldrh	r3, [r3, #10]
 80086b8:	461a      	mov	r2, r3
 80086ba:	697b      	ldr	r3, [r7, #20]
 80086bc:	4293      	cmp	r3, r2
 80086be:	d906      	bls.n	80086ce <pbuf_copy+0xb2>
 80086c0:	4b38      	ldr	r3, [pc, #224]	@ (80087a4 <pbuf_copy+0x188>)
 80086c2:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80086c6:	493a      	ldr	r1, [pc, #232]	@ (80087b0 <pbuf_copy+0x194>)
 80086c8:	4838      	ldr	r0, [pc, #224]	@ (80087ac <pbuf_copy+0x190>)
 80086ca:	f005 f92d 	bl	800d928 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	895b      	ldrh	r3, [r3, #10]
 80086d2:	461a      	mov	r2, r3
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d906      	bls.n	80086e8 <pbuf_copy+0xcc>
 80086da:	4b32      	ldr	r3, [pc, #200]	@ (80087a4 <pbuf_copy+0x188>)
 80086dc:	f240 32da 	movw	r2, #986	@ 0x3da
 80086e0:	4934      	ldr	r1, [pc, #208]	@ (80087b4 <pbuf_copy+0x198>)
 80086e2:	4832      	ldr	r0, [pc, #200]	@ (80087ac <pbuf_copy+0x190>)
 80086e4:	f005 f920 	bl	800d928 <iprintf>
    if (offset_from >= p_from->len) {
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	895b      	ldrh	r3, [r3, #10]
 80086ec:	461a      	mov	r2, r3
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d304      	bcc.n	80086fe <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80086f4:	2300      	movs	r3, #0
 80086f6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	895b      	ldrh	r3, [r3, #10]
 8008702:	461a      	mov	r2, r3
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	4293      	cmp	r3, r2
 8008708:	d114      	bne.n	8008734 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d10c      	bne.n	8008734 <pbuf_copy+0x118>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d009      	beq.n	8008734 <pbuf_copy+0x118>
 8008720:	4b20      	ldr	r3, [pc, #128]	@ (80087a4 <pbuf_copy+0x188>)
 8008722:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 8008726:	4924      	ldr	r1, [pc, #144]	@ (80087b8 <pbuf_copy+0x19c>)
 8008728:	4820      	ldr	r0, [pc, #128]	@ (80087ac <pbuf_copy+0x190>)
 800872a:	f005 f8fd 	bl	800d928 <iprintf>
 800872e:	f06f 030f 	mvn.w	r3, #15
 8008732:	e032      	b.n	800879a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d013      	beq.n	8008762 <pbuf_copy+0x146>
 800873a:	683b      	ldr	r3, [r7, #0]
 800873c:	895a      	ldrh	r2, [r3, #10]
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	891b      	ldrh	r3, [r3, #8]
 8008742:	429a      	cmp	r2, r3
 8008744:	d10d      	bne.n	8008762 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d009      	beq.n	8008762 <pbuf_copy+0x146>
 800874e:	4b15      	ldr	r3, [pc, #84]	@ (80087a4 <pbuf_copy+0x188>)
 8008750:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8008754:	4919      	ldr	r1, [pc, #100]	@ (80087bc <pbuf_copy+0x1a0>)
 8008756:	4815      	ldr	r0, [pc, #84]	@ (80087ac <pbuf_copy+0x190>)
 8008758:	f005 f8e6 	bl	800d928 <iprintf>
 800875c:	f06f 0305 	mvn.w	r3, #5
 8008760:	e01b      	b.n	800879a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d013      	beq.n	8008790 <pbuf_copy+0x174>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	895a      	ldrh	r2, [r3, #10]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	891b      	ldrh	r3, [r3, #8]
 8008770:	429a      	cmp	r2, r3
 8008772:	d10d      	bne.n	8008790 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d009      	beq.n	8008790 <pbuf_copy+0x174>
 800877c:	4b09      	ldr	r3, [pc, #36]	@ (80087a4 <pbuf_copy+0x188>)
 800877e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8008782:	490e      	ldr	r1, [pc, #56]	@ (80087bc <pbuf_copy+0x1a0>)
 8008784:	4809      	ldr	r0, [pc, #36]	@ (80087ac <pbuf_copy+0x190>)
 8008786:	f005 f8cf 	bl	800d928 <iprintf>
 800878a:	f06f 0305 	mvn.w	r3, #5
 800878e:	e004      	b.n	800879a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	f47f af61 	bne.w	800865a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8008798:	2300      	movs	r3, #0
}
 800879a:	4618      	mov	r0, r3
 800879c:	3718      	adds	r7, #24
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	0800ed1c 	.word	0x0800ed1c
 80087a8:	0800efc4 	.word	0x0800efc4
 80087ac:	0800ed7c 	.word	0x0800ed7c
 80087b0:	0800eff4 	.word	0x0800eff4
 80087b4:	0800f00c 	.word	0x0800f00c
 80087b8:	0800f028 	.word	0x0800f028
 80087bc:	0800f038 	.word	0x0800f038

080087c0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4611      	mov	r1, r2
 80087cc:	461a      	mov	r2, r3
 80087ce:	460b      	mov	r3, r1
 80087d0:	80fb      	strh	r3, [r7, #6]
 80087d2:	4613      	mov	r3, r2
 80087d4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80087d6:	2300      	movs	r3, #0
 80087d8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80087da:	2300      	movs	r3, #0
 80087dc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d108      	bne.n	80087f6 <pbuf_copy_partial+0x36>
 80087e4:	4b2b      	ldr	r3, [pc, #172]	@ (8008894 <pbuf_copy_partial+0xd4>)
 80087e6:	f240 420a 	movw	r2, #1034	@ 0x40a
 80087ea:	492b      	ldr	r1, [pc, #172]	@ (8008898 <pbuf_copy_partial+0xd8>)
 80087ec:	482b      	ldr	r0, [pc, #172]	@ (800889c <pbuf_copy_partial+0xdc>)
 80087ee:	f005 f89b 	bl	800d928 <iprintf>
 80087f2:	2300      	movs	r3, #0
 80087f4:	e04a      	b.n	800888c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d108      	bne.n	800880e <pbuf_copy_partial+0x4e>
 80087fc:	4b25      	ldr	r3, [pc, #148]	@ (8008894 <pbuf_copy_partial+0xd4>)
 80087fe:	f240 420b 	movw	r2, #1035	@ 0x40b
 8008802:	4927      	ldr	r1, [pc, #156]	@ (80088a0 <pbuf_copy_partial+0xe0>)
 8008804:	4825      	ldr	r0, [pc, #148]	@ (800889c <pbuf_copy_partial+0xdc>)
 8008806:	f005 f88f 	bl	800d928 <iprintf>
 800880a:	2300      	movs	r3, #0
 800880c:	e03e      	b.n	800888c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	61fb      	str	r3, [r7, #28]
 8008812:	e034      	b.n	800887e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8008814:	88bb      	ldrh	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <pbuf_copy_partial+0x70>
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	895b      	ldrh	r3, [r3, #10]
 800881e:	88ba      	ldrh	r2, [r7, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d305      	bcc.n	8008830 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	895b      	ldrh	r3, [r3, #10]
 8008828:	88ba      	ldrh	r2, [r7, #4]
 800882a:	1ad3      	subs	r3, r2, r3
 800882c:	80bb      	strh	r3, [r7, #4]
 800882e:	e023      	b.n	8008878 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8008830:	69fb      	ldr	r3, [r7, #28]
 8008832:	895a      	ldrh	r2, [r3, #10]
 8008834:	88bb      	ldrh	r3, [r7, #4]
 8008836:	1ad3      	subs	r3, r2, r3
 8008838:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800883a:	8b3a      	ldrh	r2, [r7, #24]
 800883c:	88fb      	ldrh	r3, [r7, #6]
 800883e:	429a      	cmp	r2, r3
 8008840:	d901      	bls.n	8008846 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8008842:	88fb      	ldrh	r3, [r7, #6]
 8008844:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8008846:	8b7b      	ldrh	r3, [r7, #26]
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	18d0      	adds	r0, r2, r3
 800884c:	69fb      	ldr	r3, [r7, #28]
 800884e:	685a      	ldr	r2, [r3, #4]
 8008850:	88bb      	ldrh	r3, [r7, #4]
 8008852:	4413      	add	r3, r2
 8008854:	8b3a      	ldrh	r2, [r7, #24]
 8008856:	4619      	mov	r1, r3
 8008858:	f005 f941 	bl	800dade <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800885c:	8afa      	ldrh	r2, [r7, #22]
 800885e:	8b3b      	ldrh	r3, [r7, #24]
 8008860:	4413      	add	r3, r2
 8008862:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8008864:	8b7a      	ldrh	r2, [r7, #26]
 8008866:	8b3b      	ldrh	r3, [r7, #24]
 8008868:	4413      	add	r3, r2
 800886a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800886c:	88fa      	ldrh	r2, [r7, #6]
 800886e:	8b3b      	ldrh	r3, [r7, #24]
 8008870:	1ad3      	subs	r3, r2, r3
 8008872:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8008874:	2300      	movs	r3, #0
 8008876:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8008878:	69fb      	ldr	r3, [r7, #28]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	61fb      	str	r3, [r7, #28]
 800887e:	88fb      	ldrh	r3, [r7, #6]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d002      	beq.n	800888a <pbuf_copy_partial+0xca>
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1c4      	bne.n	8008814 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800888a:	8afb      	ldrh	r3, [r7, #22]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3720      	adds	r7, #32
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}
 8008894:	0800ed1c 	.word	0x0800ed1c
 8008898:	0800f064 	.word	0x0800f064
 800889c:	0800ed7c 	.word	0x0800ed7c
 80088a0:	0800f084 	.word	0x0800f084

080088a4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	4603      	mov	r3, r0
 80088ac:	603a      	str	r2, [r7, #0]
 80088ae:	71fb      	strb	r3, [r7, #7]
 80088b0:	460b      	mov	r3, r1
 80088b2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	8919      	ldrh	r1, [r3, #8]
 80088b8:	88ba      	ldrh	r2, [r7, #4]
 80088ba:	79fb      	ldrb	r3, [r7, #7]
 80088bc:	4618      	mov	r0, r3
 80088be:	f7ff faa3 	bl	8007e08 <pbuf_alloc>
 80088c2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <pbuf_clone+0x2a>
    return NULL;
 80088ca:	2300      	movs	r3, #0
 80088cc:	e011      	b.n	80088f2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	68f8      	ldr	r0, [r7, #12]
 80088d2:	f7ff fea3 	bl	800861c <pbuf_copy>
 80088d6:	4603      	mov	r3, r0
 80088d8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80088da:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d006      	beq.n	80088f0 <pbuf_clone+0x4c>
 80088e2:	4b06      	ldr	r3, [pc, #24]	@ (80088fc <pbuf_clone+0x58>)
 80088e4:	f240 5224 	movw	r2, #1316	@ 0x524
 80088e8:	4905      	ldr	r1, [pc, #20]	@ (8008900 <pbuf_clone+0x5c>)
 80088ea:	4806      	ldr	r0, [pc, #24]	@ (8008904 <pbuf_clone+0x60>)
 80088ec:	f005 f81c 	bl	800d928 <iprintf>
  return q;
 80088f0:	68fb      	ldr	r3, [r7, #12]
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3710      	adds	r7, #16
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	0800ed1c 	.word	0x0800ed1c
 8008900:	0800f190 	.word	0x0800f190
 8008904:	0800ed7c 	.word	0x0800ed7c

08008908 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8008914:	2003      	movs	r0, #3
 8008916:	f7fe febf 	bl	8007698 <memp_malloc>
 800891a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d151      	bne.n	80089cc <sys_timeout_abs+0xc4>
 8008928:	4b2a      	ldr	r3, [pc, #168]	@ (80089d4 <sys_timeout_abs+0xcc>)
 800892a:	22be      	movs	r2, #190	@ 0xbe
 800892c:	492a      	ldr	r1, [pc, #168]	@ (80089d8 <sys_timeout_abs+0xd0>)
 800892e:	482b      	ldr	r0, [pc, #172]	@ (80089dc <sys_timeout_abs+0xd4>)
 8008930:	f004 fffa 	bl	800d928 <iprintf>
    return;
 8008934:	e04a      	b.n	80089cc <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	2200      	movs	r2, #0
 800893a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	68ba      	ldr	r2, [r7, #8]
 8008940:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	68fa      	ldr	r2, [r7, #12]
 800894c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800894e:	4b24      	ldr	r3, [pc, #144]	@ (80089e0 <sys_timeout_abs+0xd8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d103      	bne.n	800895e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8008956:	4a22      	ldr	r2, [pc, #136]	@ (80089e0 <sys_timeout_abs+0xd8>)
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	6013      	str	r3, [r2, #0]
    return;
 800895c:	e037      	b.n	80089ce <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	685a      	ldr	r2, [r3, #4]
 8008962:	4b1f      	ldr	r3, [pc, #124]	@ (80089e0 <sys_timeout_abs+0xd8>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	1ad3      	subs	r3, r2, r3
 800896a:	0fdb      	lsrs	r3, r3, #31
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	b2db      	uxtb	r3, r3
 8008972:	2b00      	cmp	r3, #0
 8008974:	d007      	beq.n	8008986 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8008976:	4b1a      	ldr	r3, [pc, #104]	@ (80089e0 <sys_timeout_abs+0xd8>)
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800897e:	4a18      	ldr	r2, [pc, #96]	@ (80089e0 <sys_timeout_abs+0xd8>)
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	6013      	str	r3, [r2, #0]
 8008984:	e023      	b.n	80089ce <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8008986:	4b16      	ldr	r3, [pc, #88]	@ (80089e0 <sys_timeout_abs+0xd8>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	617b      	str	r3, [r7, #20]
 800898c:	e01a      	b.n	80089c4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00b      	beq.n	80089ae <sys_timeout_abs+0xa6>
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	685a      	ldr	r2, [r3, #4]
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	685b      	ldr	r3, [r3, #4]
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	0fdb      	lsrs	r3, r3, #31
 80089a4:	f003 0301 	and.w	r3, r3, #1
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d007      	beq.n	80089be <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	681a      	ldr	r2, [r3, #0]
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	693a      	ldr	r2, [r7, #16]
 80089ba:	601a      	str	r2, [r3, #0]
        break;
 80089bc:	e007      	b.n	80089ce <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e1      	bne.n	800898e <sys_timeout_abs+0x86>
 80089ca:	e000      	b.n	80089ce <sys_timeout_abs+0xc6>
    return;
 80089cc:	bf00      	nop
      }
    }
  }
}
 80089ce:	3718      	adds	r7, #24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	0800f1a4 	.word	0x0800f1a4
 80089d8:	0800f1d8 	.word	0x0800f1d8
 80089dc:	0800f218 	.word	0x0800f218
 80089e0:	200094bc 	.word	0x200094bc

080089e4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b086      	sub	sp, #24
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	4798      	blx	r3

  now = sys_now();
 80089f6:	f7fe f803 	bl	8006a00 <sys_now>
 80089fa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	681a      	ldr	r2, [r3, #0]
 8008a00:	4b0f      	ldr	r3, [pc, #60]	@ (8008a40 <lwip_cyclic_timer+0x5c>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4413      	add	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	0fdb      	lsrs	r3, r3, #31
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d009      	beq.n	8008a2e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	4413      	add	r3, r2
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	4907      	ldr	r1, [pc, #28]	@ (8008a44 <lwip_cyclic_timer+0x60>)
 8008a26:	4618      	mov	r0, r3
 8008a28:	f7ff ff6e 	bl	8008908 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8008a2c:	e004      	b.n	8008a38 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	4904      	ldr	r1, [pc, #16]	@ (8008a44 <lwip_cyclic_timer+0x60>)
 8008a32:	68f8      	ldr	r0, [r7, #12]
 8008a34:	f7ff ff68 	bl	8008908 <sys_timeout_abs>
}
 8008a38:	bf00      	nop
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}
 8008a40:	200094c0 	.word	0x200094c0
 8008a44:	080089e5 	.word	0x080089e5

08008a48 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b082      	sub	sp, #8
 8008a4c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008a4e:	2300      	movs	r3, #0
 8008a50:	607b      	str	r3, [r7, #4]
 8008a52:	e00e      	b.n	8008a72 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8008a54:	4a0b      	ldr	r2, [pc, #44]	@ (8008a84 <sys_timeouts_init+0x3c>)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	00db      	lsls	r3, r3, #3
 8008a60:	4a08      	ldr	r2, [pc, #32]	@ (8008a84 <sys_timeouts_init+0x3c>)
 8008a62:	4413      	add	r3, r2
 8008a64:	461a      	mov	r2, r3
 8008a66:	4908      	ldr	r1, [pc, #32]	@ (8008a88 <sys_timeouts_init+0x40>)
 8008a68:	f000 f810 	bl	8008a8c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	607b      	str	r3, [r7, #4]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b03      	cmp	r3, #3
 8008a76:	d9ed      	bls.n	8008a54 <sys_timeouts_init+0xc>
  }
}
 8008a78:	bf00      	nop
 8008a7a:	bf00      	nop
 8008a7c:	3708      	adds	r7, #8
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	080100e0 	.word	0x080100e0
 8008a88:	080089e5 	.word	0x080089e5

08008a8c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a9e:	d306      	bcc.n	8008aae <sys_timeout+0x22>
 8008aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8008acc <sys_timeout+0x40>)
 8008aa2:	f240 1229 	movw	r2, #297	@ 0x129
 8008aa6:	490a      	ldr	r1, [pc, #40]	@ (8008ad0 <sys_timeout+0x44>)
 8008aa8:	480a      	ldr	r0, [pc, #40]	@ (8008ad4 <sys_timeout+0x48>)
 8008aaa:	f004 ff3d 	bl	800d928 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8008aae:	f7fd ffa7 	bl	8006a00 <sys_now>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	6978      	ldr	r0, [r7, #20]
 8008ac0:	f7ff ff22 	bl	8008908 <sys_timeout_abs>
#endif
}
 8008ac4:	bf00      	nop
 8008ac6:	3718      	adds	r7, #24
 8008ac8:	46bd      	mov	sp, r7
 8008aca:	bd80      	pop	{r7, pc}
 8008acc:	0800f1a4 	.word	0x0800f1a4
 8008ad0:	0800f240 	.word	0x0800f240
 8008ad4:	0800f218 	.word	0x0800f218

08008ad8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8008ad8:	b580      	push	{r7, lr}
 8008ada:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8008adc:	f004 fe24 	bl	800d728 <rand>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008ae8:	b29b      	uxth	r3, r3
 8008aea:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	4b01      	ldr	r3, [pc, #4]	@ (8008af8 <udp_init+0x20>)
 8008af2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8008af4:	bf00      	nop
 8008af6:	bd80      	pop	{r7, pc}
 8008af8:	20000020 	.word	0x20000020

08008afc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8008b02:	2300      	movs	r3, #0
 8008b04:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8008b06:	4b17      	ldr	r3, [pc, #92]	@ (8008b64 <udp_new_port+0x68>)
 8008b08:	881b      	ldrh	r3, [r3, #0]
 8008b0a:	1c5a      	adds	r2, r3, #1
 8008b0c:	b291      	uxth	r1, r2
 8008b0e:	4a15      	ldr	r2, [pc, #84]	@ (8008b64 <udp_new_port+0x68>)
 8008b10:	8011      	strh	r1, [r2, #0]
 8008b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d103      	bne.n	8008b22 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8008b1a:	4b12      	ldr	r3, [pc, #72]	@ (8008b64 <udp_new_port+0x68>)
 8008b1c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8008b20:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b22:	4b11      	ldr	r3, [pc, #68]	@ (8008b68 <udp_new_port+0x6c>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	603b      	str	r3, [r7, #0]
 8008b28:	e011      	b.n	8008b4e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	8a5a      	ldrh	r2, [r3, #18]
 8008b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b64 <udp_new_port+0x68>)
 8008b30:	881b      	ldrh	r3, [r3, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d108      	bne.n	8008b48 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8008b36:	88fb      	ldrh	r3, [r7, #6]
 8008b38:	3301      	adds	r3, #1
 8008b3a:	80fb      	strh	r3, [r7, #6]
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008b42:	d3e0      	bcc.n	8008b06 <udp_new_port+0xa>
        return 0;
 8008b44:	2300      	movs	r3, #0
 8008b46:	e007      	b.n	8008b58 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008b48:	683b      	ldr	r3, [r7, #0]
 8008b4a:	68db      	ldr	r3, [r3, #12]
 8008b4c:	603b      	str	r3, [r7, #0]
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d1ea      	bne.n	8008b2a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8008b54:	4b03      	ldr	r3, [pc, #12]	@ (8008b64 <udp_new_port+0x68>)
 8008b56:	881b      	ldrh	r3, [r3, #0]
}
 8008b58:	4618      	mov	r0, r3
 8008b5a:	370c      	adds	r7, #12
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b62:	4770      	bx	lr
 8008b64:	20000020 	.word	0x20000020
 8008b68:	200094c4 	.word	0x200094c4

08008b6c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	4613      	mov	r3, r2
 8008b78:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d105      	bne.n	8008b8c <udp_input_local_match+0x20>
 8008b80:	4b27      	ldr	r3, [pc, #156]	@ (8008c20 <udp_input_local_match+0xb4>)
 8008b82:	2287      	movs	r2, #135	@ 0x87
 8008b84:	4927      	ldr	r1, [pc, #156]	@ (8008c24 <udp_input_local_match+0xb8>)
 8008b86:	4828      	ldr	r0, [pc, #160]	@ (8008c28 <udp_input_local_match+0xbc>)
 8008b88:	f004 fece 	bl	800d928 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d105      	bne.n	8008b9e <udp_input_local_match+0x32>
 8008b92:	4b23      	ldr	r3, [pc, #140]	@ (8008c20 <udp_input_local_match+0xb4>)
 8008b94:	2288      	movs	r2, #136	@ 0x88
 8008b96:	4925      	ldr	r1, [pc, #148]	@ (8008c2c <udp_input_local_match+0xc0>)
 8008b98:	4823      	ldr	r0, [pc, #140]	@ (8008c28 <udp_input_local_match+0xbc>)
 8008b9a:	f004 fec5 	bl	800d928 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	7a1b      	ldrb	r3, [r3, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00b      	beq.n	8008bbe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	7a1a      	ldrb	r2, [r3, #8]
 8008baa:	4b21      	ldr	r3, [pc, #132]	@ (8008c30 <udp_input_local_match+0xc4>)
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d001      	beq.n	8008bbe <udp_input_local_match+0x52>
    return 0;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	e02b      	b.n	8008c16 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d018      	beq.n	8008bf6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d013      	beq.n	8008bf2 <udp_input_local_match+0x86>
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d00f      	beq.n	8008bf2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008bd2:	4b17      	ldr	r3, [pc, #92]	@ (8008c30 <udp_input_local_match+0xc4>)
 8008bd4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bda:	d00a      	beq.n	8008bf2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	4b13      	ldr	r3, [pc, #76]	@ (8008c30 <udp_input_local_match+0xc4>)
 8008be2:	695b      	ldr	r3, [r3, #20]
 8008be4:	405a      	eors	r2, r3
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3308      	adds	r3, #8
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d110      	bne.n	8008c14 <udp_input_local_match+0xa8>
          return 1;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e00f      	b.n	8008c16 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d009      	beq.n	8008c10 <udp_input_local_match+0xa4>
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d005      	beq.n	8008c10 <udp_input_local_match+0xa4>
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	4b09      	ldr	r3, [pc, #36]	@ (8008c30 <udp_input_local_match+0xc4>)
 8008c0a:	695b      	ldr	r3, [r3, #20]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d101      	bne.n	8008c14 <udp_input_local_match+0xa8>
        return 1;
 8008c10:	2301      	movs	r3, #1
 8008c12:	e000      	b.n	8008c16 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3710      	adds	r7, #16
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	0800f28c 	.word	0x0800f28c
 8008c24:	0800f2bc 	.word	0x0800f2bc
 8008c28:	0800f2e0 	.word	0x0800f2e0
 8008c2c:	0800f308 	.word	0x0800f308
 8008c30:	20006a94 	.word	0x20006a94

08008c34 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8008c34:	b590      	push	{r4, r7, lr}
 8008c36:	b08d      	sub	sp, #52	@ 0x34
 8008c38:	af02      	add	r7, sp, #8
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d105      	bne.n	8008c54 <udp_input+0x20>
 8008c48:	4b7c      	ldr	r3, [pc, #496]	@ (8008e3c <udp_input+0x208>)
 8008c4a:	22cf      	movs	r2, #207	@ 0xcf
 8008c4c:	497c      	ldr	r1, [pc, #496]	@ (8008e40 <udp_input+0x20c>)
 8008c4e:	487d      	ldr	r0, [pc, #500]	@ (8008e44 <udp_input+0x210>)
 8008c50:	f004 fe6a 	bl	800d928 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d105      	bne.n	8008c66 <udp_input+0x32>
 8008c5a:	4b78      	ldr	r3, [pc, #480]	@ (8008e3c <udp_input+0x208>)
 8008c5c:	22d0      	movs	r2, #208	@ 0xd0
 8008c5e:	497a      	ldr	r1, [pc, #488]	@ (8008e48 <udp_input+0x214>)
 8008c60:	4878      	ldr	r0, [pc, #480]	@ (8008e44 <udp_input+0x210>)
 8008c62:	f004 fe61 	bl	800d928 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	895b      	ldrh	r3, [r3, #10]
 8008c6a:	2b07      	cmp	r3, #7
 8008c6c:	d803      	bhi.n	8008c76 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f7ff fbac 	bl	80083cc <pbuf_free>
    goto end;
 8008c74:	e0de      	b.n	8008e34 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8008c7c:	4b73      	ldr	r3, [pc, #460]	@ (8008e4c <udp_input+0x218>)
 8008c7e:	695b      	ldr	r3, [r3, #20]
 8008c80:	4a72      	ldr	r2, [pc, #456]	@ (8008e4c <udp_input+0x218>)
 8008c82:	6812      	ldr	r2, [r2, #0]
 8008c84:	4611      	mov	r1, r2
 8008c86:	4618      	mov	r0, r3
 8008c88:	f003 fdf8 	bl	800c87c <ip4_addr_isbroadcast_u32>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	881b      	ldrh	r3, [r3, #0]
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	4618      	mov	r0, r3
 8008c98:	f7fe f87c 	bl	8006d94 <lwip_htons>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	885b      	ldrh	r3, [r3, #2]
 8008ca4:	b29b      	uxth	r3, r3
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe f874 	bl	8006d94 <lwip_htons>
 8008cac:	4603      	mov	r3, r0
 8008cae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008cbc:	4b64      	ldr	r3, [pc, #400]	@ (8008e50 <udp_input+0x21c>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cc2:	e054      	b.n	8008d6e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8008cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cc6:	8a5b      	ldrh	r3, [r3, #18]
 8008cc8:	89fa      	ldrh	r2, [r7, #14]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d14a      	bne.n	8008d64 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8008cce:	7cfb      	ldrb	r3, [r7, #19]
 8008cd0:	461a      	mov	r2, r3
 8008cd2:	6839      	ldr	r1, [r7, #0]
 8008cd4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008cd6:	f7ff ff49 	bl	8008b6c <udp_input_local_match>
 8008cda:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d041      	beq.n	8008d64 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8008ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce2:	7c1b      	ldrb	r3, [r3, #16]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d11d      	bne.n	8008d28 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8008cec:	69fb      	ldr	r3, [r7, #28]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d102      	bne.n	8008cf8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8008cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cf4:	61fb      	str	r3, [r7, #28]
 8008cf6:	e017      	b.n	8008d28 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8008cf8:	7cfb      	ldrb	r3, [r7, #19]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d014      	beq.n	8008d28 <udp_input+0xf4>
 8008cfe:	4b53      	ldr	r3, [pc, #332]	@ (8008e4c <udp_input+0x218>)
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d06:	d10f      	bne.n	8008d28 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	3304      	adds	r3, #4
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d008      	beq.n	8008d28 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8008d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d101      	bne.n	8008d28 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8008d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d26:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8008d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2a:	8a9b      	ldrh	r3, [r3, #20]
 8008d2c:	8a3a      	ldrh	r2, [r7, #16]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d118      	bne.n	8008d64 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d34:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d005      	beq.n	8008d46 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8008d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3c:	685a      	ldr	r2, [r3, #4]
 8008d3e:	4b43      	ldr	r3, [pc, #268]	@ (8008e4c <udp_input+0x218>)
 8008d40:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d10e      	bne.n	8008d64 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8008d46:	6a3b      	ldr	r3, [r7, #32]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d014      	beq.n	8008d76 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8008d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d4e:	68da      	ldr	r2, [r3, #12]
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8008d54:	4b3e      	ldr	r3, [pc, #248]	@ (8008e50 <udp_input+0x21c>)
 8008d56:	681a      	ldr	r2, [r3, #0]
 8008d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8008d5c:	4a3c      	ldr	r2, [pc, #240]	@ (8008e50 <udp_input+0x21c>)
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d60:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8008d62:	e008      	b.n	8008d76 <udp_input+0x142>
      }
    }

    prev = pcb;
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8008d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d1a7      	bne.n	8008cc4 <udp_input+0x90>
 8008d74:	e000      	b.n	8008d78 <udp_input+0x144>
        break;
 8008d76:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8008d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d101      	bne.n	8008d82 <udp_input+0x14e>
    pcb = uncon_pcb;
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8008d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <udp_input+0x15a>
    for_us = 1;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	76fb      	strb	r3, [r7, #27]
 8008d8c:	e00a      	b.n	8008da4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	3304      	adds	r3, #4
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b2d      	ldr	r3, [pc, #180]	@ (8008e4c <udp_input+0x218>)
 8008d96:	695b      	ldr	r3, [r3, #20]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	bf0c      	ite	eq
 8008d9c:	2301      	moveq	r3, #1
 8008d9e:	2300      	movne	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8008da4:	7efb      	ldrb	r3, [r7, #27]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d041      	beq.n	8008e2e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8008daa:	2108      	movs	r1, #8
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f7ff fa87 	bl	80082c0 <pbuf_remove_header>
 8008db2:	4603      	mov	r3, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00a      	beq.n	8008dce <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8008db8:	4b20      	ldr	r3, [pc, #128]	@ (8008e3c <udp_input+0x208>)
 8008dba:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8008dbe:	4925      	ldr	r1, [pc, #148]	@ (8008e54 <udp_input+0x220>)
 8008dc0:	4820      	ldr	r0, [pc, #128]	@ (8008e44 <udp_input+0x210>)
 8008dc2:	f004 fdb1 	bl	800d928 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f7ff fb00 	bl	80083cc <pbuf_free>
      goto end;
 8008dcc:	e032      	b.n	8008e34 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8008dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d012      	beq.n	8008dfa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dd6:	699b      	ldr	r3, [r3, #24]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d00a      	beq.n	8008df2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008dde:	699c      	ldr	r4, [r3, #24]
 8008de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008de2:	69d8      	ldr	r0, [r3, #28]
 8008de4:	8a3b      	ldrh	r3, [r7, #16]
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4b1b      	ldr	r3, [pc, #108]	@ (8008e58 <udp_input+0x224>)
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008dee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8008df0:	e021      	b.n	8008e36 <udp_input+0x202>
        pbuf_free(p);
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff faea 	bl	80083cc <pbuf_free>
        goto end;
 8008df8:	e01c      	b.n	8008e34 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8008dfa:	7cfb      	ldrb	r3, [r7, #19]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d112      	bne.n	8008e26 <udp_input+0x1f2>
 8008e00:	4b12      	ldr	r3, [pc, #72]	@ (8008e4c <udp_input+0x218>)
 8008e02:	695b      	ldr	r3, [r3, #20]
 8008e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e08:	2be0      	cmp	r3, #224	@ 0xe0
 8008e0a:	d00c      	beq.n	8008e26 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8008e0c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e4c <udp_input+0x218>)
 8008e0e:	899b      	ldrh	r3, [r3, #12]
 8008e10:	3308      	adds	r3, #8
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	b21b      	sxth	r3, r3
 8008e16:	4619      	mov	r1, r3
 8008e18:	6878      	ldr	r0, [r7, #4]
 8008e1a:	f7ff fac4 	bl	80083a6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8008e1e:	2103      	movs	r1, #3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f003 f9f7 	bl	800c214 <icmp_dest_unreach>
      pbuf_free(p);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7ff fad0 	bl	80083cc <pbuf_free>
  return;
 8008e2c:	e003      	b.n	8008e36 <udp_input+0x202>
    pbuf_free(p);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7ff facc 	bl	80083cc <pbuf_free>
  return;
 8008e34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8008e36:	372c      	adds	r7, #44	@ 0x2c
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd90      	pop	{r4, r7, pc}
 8008e3c:	0800f28c 	.word	0x0800f28c
 8008e40:	0800f330 	.word	0x0800f330
 8008e44:	0800f2e0 	.word	0x0800f2e0
 8008e48:	0800f348 	.word	0x0800f348
 8008e4c:	20006a94 	.word	0x20006a94
 8008e50:	200094c4 	.word	0x200094c4
 8008e54:	0800f364 	.word	0x0800f364
 8008e58:	20006aa4 	.word	0x20006aa4

08008e5c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b088      	sub	sp, #32
 8008e60:	af02      	add	r7, sp, #8
 8008e62:	60f8      	str	r0, [r7, #12]
 8008e64:	60b9      	str	r1, [r7, #8]
 8008e66:	607a      	str	r2, [r7, #4]
 8008e68:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d109      	bne.n	8008e84 <udp_sendto_if+0x28>
 8008e70:	4b2e      	ldr	r3, [pc, #184]	@ (8008f2c <udp_sendto_if+0xd0>)
 8008e72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8008e76:	492e      	ldr	r1, [pc, #184]	@ (8008f30 <udp_sendto_if+0xd4>)
 8008e78:	482e      	ldr	r0, [pc, #184]	@ (8008f34 <udp_sendto_if+0xd8>)
 8008e7a:	f004 fd55 	bl	800d928 <iprintf>
 8008e7e:	f06f 030f 	mvn.w	r3, #15
 8008e82:	e04f      	b.n	8008f24 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d109      	bne.n	8008e9e <udp_sendto_if+0x42>
 8008e8a:	4b28      	ldr	r3, [pc, #160]	@ (8008f2c <udp_sendto_if+0xd0>)
 8008e8c:	f240 2281 	movw	r2, #641	@ 0x281
 8008e90:	4929      	ldr	r1, [pc, #164]	@ (8008f38 <udp_sendto_if+0xdc>)
 8008e92:	4828      	ldr	r0, [pc, #160]	@ (8008f34 <udp_sendto_if+0xd8>)
 8008e94:	f004 fd48 	bl	800d928 <iprintf>
 8008e98:	f06f 030f 	mvn.w	r3, #15
 8008e9c:	e042      	b.n	8008f24 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d109      	bne.n	8008eb8 <udp_sendto_if+0x5c>
 8008ea4:	4b21      	ldr	r3, [pc, #132]	@ (8008f2c <udp_sendto_if+0xd0>)
 8008ea6:	f240 2282 	movw	r2, #642	@ 0x282
 8008eaa:	4924      	ldr	r1, [pc, #144]	@ (8008f3c <udp_sendto_if+0xe0>)
 8008eac:	4821      	ldr	r0, [pc, #132]	@ (8008f34 <udp_sendto_if+0xd8>)
 8008eae:	f004 fd3b 	bl	800d928 <iprintf>
 8008eb2:	f06f 030f 	mvn.w	r3, #15
 8008eb6:	e035      	b.n	8008f24 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d109      	bne.n	8008ed2 <udp_sendto_if+0x76>
 8008ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8008f2c <udp_sendto_if+0xd0>)
 8008ec0:	f240 2283 	movw	r2, #643	@ 0x283
 8008ec4:	491e      	ldr	r1, [pc, #120]	@ (8008f40 <udp_sendto_if+0xe4>)
 8008ec6:	481b      	ldr	r0, [pc, #108]	@ (8008f34 <udp_sendto_if+0xd8>)
 8008ec8:	f004 fd2e 	bl	800d928 <iprintf>
 8008ecc:	f06f 030f 	mvn.w	r3, #15
 8008ed0:	e028      	b.n	8008f24 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d009      	beq.n	8008eec <udp_sendto_if+0x90>
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d005      	beq.n	8008eec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8008ee8:	2be0      	cmp	r3, #224	@ 0xe0
 8008eea:	d103      	bne.n	8008ef4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8008eec:	6a3b      	ldr	r3, [r7, #32]
 8008eee:	3304      	adds	r3, #4
 8008ef0:	617b      	str	r3, [r7, #20]
 8008ef2:	e00b      	b.n	8008f0c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	3304      	adds	r3, #4
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d002      	beq.n	8008f08 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8008f02:	f06f 0303 	mvn.w	r3, #3
 8008f06:	e00d      	b.n	8008f24 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8008f0c:	887a      	ldrh	r2, [r7, #2]
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	9301      	str	r3, [sp, #4]
 8008f12:	6a3b      	ldr	r3, [r7, #32]
 8008f14:	9300      	str	r3, [sp, #0]
 8008f16:	4613      	mov	r3, r2
 8008f18:	687a      	ldr	r2, [r7, #4]
 8008f1a:	68b9      	ldr	r1, [r7, #8]
 8008f1c:	68f8      	ldr	r0, [r7, #12]
 8008f1e:	f000 f811 	bl	8008f44 <udp_sendto_if_src>
 8008f22:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3718      	adds	r7, #24
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	0800f28c 	.word	0x0800f28c
 8008f30:	0800f400 	.word	0x0800f400
 8008f34:	0800f2e0 	.word	0x0800f2e0
 8008f38:	0800f41c 	.word	0x0800f41c
 8008f3c:	0800f438 	.word	0x0800f438
 8008f40:	0800f458 	.word	0x0800f458

08008f44 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b08c      	sub	sp, #48	@ 0x30
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
 8008f50:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d109      	bne.n	8008f6c <udp_sendto_if_src+0x28>
 8008f58:	4b65      	ldr	r3, [pc, #404]	@ (80090f0 <udp_sendto_if_src+0x1ac>)
 8008f5a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8008f5e:	4965      	ldr	r1, [pc, #404]	@ (80090f4 <udp_sendto_if_src+0x1b0>)
 8008f60:	4865      	ldr	r0, [pc, #404]	@ (80090f8 <udp_sendto_if_src+0x1b4>)
 8008f62:	f004 fce1 	bl	800d928 <iprintf>
 8008f66:	f06f 030f 	mvn.w	r3, #15
 8008f6a:	e0bc      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d109      	bne.n	8008f86 <udp_sendto_if_src+0x42>
 8008f72:	4b5f      	ldr	r3, [pc, #380]	@ (80090f0 <udp_sendto_if_src+0x1ac>)
 8008f74:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8008f78:	4960      	ldr	r1, [pc, #384]	@ (80090fc <udp_sendto_if_src+0x1b8>)
 8008f7a:	485f      	ldr	r0, [pc, #380]	@ (80090f8 <udp_sendto_if_src+0x1b4>)
 8008f7c:	f004 fcd4 	bl	800d928 <iprintf>
 8008f80:	f06f 030f 	mvn.w	r3, #15
 8008f84:	e0af      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d109      	bne.n	8008fa0 <udp_sendto_if_src+0x5c>
 8008f8c:	4b58      	ldr	r3, [pc, #352]	@ (80090f0 <udp_sendto_if_src+0x1ac>)
 8008f8e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8008f92:	495b      	ldr	r1, [pc, #364]	@ (8009100 <udp_sendto_if_src+0x1bc>)
 8008f94:	4858      	ldr	r0, [pc, #352]	@ (80090f8 <udp_sendto_if_src+0x1b4>)
 8008f96:	f004 fcc7 	bl	800d928 <iprintf>
 8008f9a:	f06f 030f 	mvn.w	r3, #15
 8008f9e:	e0a2      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8008fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d109      	bne.n	8008fba <udp_sendto_if_src+0x76>
 8008fa6:	4b52      	ldr	r3, [pc, #328]	@ (80090f0 <udp_sendto_if_src+0x1ac>)
 8008fa8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8008fac:	4955      	ldr	r1, [pc, #340]	@ (8009104 <udp_sendto_if_src+0x1c0>)
 8008fae:	4852      	ldr	r0, [pc, #328]	@ (80090f8 <udp_sendto_if_src+0x1b4>)
 8008fb0:	f004 fcba 	bl	800d928 <iprintf>
 8008fb4:	f06f 030f 	mvn.w	r3, #15
 8008fb8:	e095      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8008fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d109      	bne.n	8008fd4 <udp_sendto_if_src+0x90>
 8008fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80090f0 <udp_sendto_if_src+0x1ac>)
 8008fc2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8008fc6:	4950      	ldr	r1, [pc, #320]	@ (8009108 <udp_sendto_if_src+0x1c4>)
 8008fc8:	484b      	ldr	r0, [pc, #300]	@ (80090f8 <udp_sendto_if_src+0x1b4>)
 8008fca:	f004 fcad 	bl	800d928 <iprintf>
 8008fce:	f06f 030f 	mvn.w	r3, #15
 8008fd2:	e088      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	8a5b      	ldrh	r3, [r3, #18]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10f      	bne.n	8008ffc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8008fdc:	68f9      	ldr	r1, [r7, #12]
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8a5b      	ldrh	r3, [r3, #18]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f000 f893 	bl	8009110 <udp_bind>
 8008fea:	4603      	mov	r3, r0
 8008fec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8008fee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8008ff6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8008ffa:	e074      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	891b      	ldrh	r3, [r3, #8]
 8009000:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8009004:	4293      	cmp	r3, r2
 8009006:	d902      	bls.n	800900e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8009008:	f04f 33ff 	mov.w	r3, #4294967295
 800900c:	e06b      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800900e:	2108      	movs	r1, #8
 8009010:	68b8      	ldr	r0, [r7, #8]
 8009012:	f7ff f945 	bl	80082a0 <pbuf_add_header>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d015      	beq.n	8009048 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800901c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8009020:	2108      	movs	r1, #8
 8009022:	2022      	movs	r0, #34	@ 0x22
 8009024:	f7fe fef0 	bl	8007e08 <pbuf_alloc>
 8009028:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d102      	bne.n	8009036 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8009030:	f04f 33ff 	mov.w	r3, #4294967295
 8009034:	e057      	b.n	80090e6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	891b      	ldrh	r3, [r3, #8]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d006      	beq.n	800904c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800903e:	68b9      	ldr	r1, [r7, #8]
 8009040:	69f8      	ldr	r0, [r7, #28]
 8009042:	f7ff fadb 	bl	80085fc <pbuf_chain>
 8009046:	e001      	b.n	800904c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	895b      	ldrh	r3, [r3, #10]
 8009050:	2b07      	cmp	r3, #7
 8009052:	d806      	bhi.n	8009062 <udp_sendto_if_src+0x11e>
 8009054:	4b26      	ldr	r3, [pc, #152]	@ (80090f0 <udp_sendto_if_src+0x1ac>)
 8009056:	f240 320d 	movw	r2, #781	@ 0x30d
 800905a:	492c      	ldr	r1, [pc, #176]	@ (800910c <udp_sendto_if_src+0x1c8>)
 800905c:	4826      	ldr	r0, [pc, #152]	@ (80090f8 <udp_sendto_if_src+0x1b4>)
 800905e:	f004 fc63 	bl	800d928 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8009062:	69fb      	ldr	r3, [r7, #28]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	8a5b      	ldrh	r3, [r3, #18]
 800906c:	4618      	mov	r0, r3
 800906e:	f7fd fe91 	bl	8006d94 <lwip_htons>
 8009072:	4603      	mov	r3, r0
 8009074:	461a      	mov	r2, r3
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800907a:	887b      	ldrh	r3, [r7, #2]
 800907c:	4618      	mov	r0, r3
 800907e:	f7fd fe89 	bl	8006d94 <lwip_htons>
 8009082:	4603      	mov	r3, r0
 8009084:	461a      	mov	r2, r3
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	2200      	movs	r2, #0
 800908e:	719a      	strb	r2, [r3, #6]
 8009090:	2200      	movs	r2, #0
 8009092:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	891b      	ldrh	r3, [r3, #8]
 8009098:	4618      	mov	r0, r3
 800909a:	f7fd fe7b 	bl	8006d94 <lwip_htons>
 800909e:	4603      	mov	r3, r0
 80090a0:	461a      	mov	r2, r3
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80090a6:	2311      	movs	r3, #17
 80090a8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	7adb      	ldrb	r3, [r3, #11]
 80090ae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	7a9b      	ldrb	r3, [r3, #10]
 80090b4:	7cb9      	ldrb	r1, [r7, #18]
 80090b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090b8:	9202      	str	r2, [sp, #8]
 80090ba:	7cfa      	ldrb	r2, [r7, #19]
 80090bc:	9201      	str	r2, [sp, #4]
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	460b      	mov	r3, r1
 80090c2:	687a      	ldr	r2, [r7, #4]
 80090c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090c6:	69f8      	ldr	r0, [r7, #28]
 80090c8:	f003 fb2a 	bl	800c720 <ip4_output_if_src>
 80090cc:	4603      	mov	r3, r0
 80090ce:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80090d0:	69fa      	ldr	r2, [r7, #28]
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d004      	beq.n	80090e2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80090d8:	69f8      	ldr	r0, [r7, #28]
 80090da:	f7ff f977 	bl	80083cc <pbuf_free>
    q = NULL;
 80090de:	2300      	movs	r3, #0
 80090e0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80090e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3720      	adds	r7, #32
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	0800f28c 	.word	0x0800f28c
 80090f4:	0800f478 	.word	0x0800f478
 80090f8:	0800f2e0 	.word	0x0800f2e0
 80090fc:	0800f498 	.word	0x0800f498
 8009100:	0800f4b8 	.word	0x0800f4b8
 8009104:	0800f4dc 	.word	0x0800f4dc
 8009108:	0800f500 	.word	0x0800f500
 800910c:	0800f524 	.word	0x0800f524

08009110 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	60f8      	str	r0, [r7, #12]
 8009118:	60b9      	str	r1, [r7, #8]
 800911a:	4613      	mov	r3, r2
 800911c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8009124:	4b39      	ldr	r3, [pc, #228]	@ (800920c <udp_bind+0xfc>)
 8009126:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d109      	bne.n	8009142 <udp_bind+0x32>
 800912e:	4b38      	ldr	r3, [pc, #224]	@ (8009210 <udp_bind+0x100>)
 8009130:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8009134:	4937      	ldr	r1, [pc, #220]	@ (8009214 <udp_bind+0x104>)
 8009136:	4838      	ldr	r0, [pc, #224]	@ (8009218 <udp_bind+0x108>)
 8009138:	f004 fbf6 	bl	800d928 <iprintf>
 800913c:	f06f 030f 	mvn.w	r3, #15
 8009140:	e060      	b.n	8009204 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8009142:	2300      	movs	r3, #0
 8009144:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009146:	4b35      	ldr	r3, [pc, #212]	@ (800921c <udp_bind+0x10c>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	617b      	str	r3, [r7, #20]
 800914c:	e009      	b.n	8009162 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	697b      	ldr	r3, [r7, #20]
 8009152:	429a      	cmp	r2, r3
 8009154:	d102      	bne.n	800915c <udp_bind+0x4c>
      rebind = 1;
 8009156:	2301      	movs	r3, #1
 8009158:	74fb      	strb	r3, [r7, #19]
      break;
 800915a:	e005      	b.n	8009168 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	68db      	ldr	r3, [r3, #12]
 8009160:	617b      	str	r3, [r7, #20]
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d1f2      	bne.n	800914e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8009168:	88fb      	ldrh	r3, [r7, #6]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d109      	bne.n	8009182 <udp_bind+0x72>
    port = udp_new_port();
 800916e:	f7ff fcc5 	bl	8008afc <udp_new_port>
 8009172:	4603      	mov	r3, r0
 8009174:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8009176:	88fb      	ldrh	r3, [r7, #6]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d12c      	bne.n	80091d6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800917c:	f06f 0307 	mvn.w	r3, #7
 8009180:	e040      	b.n	8009204 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8009182:	4b26      	ldr	r3, [pc, #152]	@ (800921c <udp_bind+0x10c>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	617b      	str	r3, [r7, #20]
 8009188:	e022      	b.n	80091d0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800918a:	68fa      	ldr	r2, [r7, #12]
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	429a      	cmp	r2, r3
 8009190:	d01b      	beq.n	80091ca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	8a5b      	ldrh	r3, [r3, #18]
 8009196:	88fa      	ldrh	r2, [r7, #6]
 8009198:	429a      	cmp	r2, r3
 800919a:	d116      	bne.n	80091ca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681a      	ldr	r2, [r3, #0]
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d00d      	beq.n	80091c4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d00a      	beq.n	80091c4 <udp_bind+0xb4>
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d006      	beq.n	80091c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80091b6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80091bc:	697b      	ldr	r3, [r7, #20]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d102      	bne.n	80091ca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80091c4:	f06f 0307 	mvn.w	r3, #7
 80091c8:	e01c      	b.n	8009204 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	617b      	str	r3, [r7, #20]
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d1d9      	bne.n	800918a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d002      	beq.n	80091e2 <udp_bind+0xd2>
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	e000      	b.n	80091e4 <udp_bind+0xd4>
 80091e2:	2300      	movs	r3, #0
 80091e4:	68fa      	ldr	r2, [r7, #12]
 80091e6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	88fa      	ldrh	r2, [r7, #6]
 80091ec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80091ee:	7cfb      	ldrb	r3, [r7, #19]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d106      	bne.n	8009202 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80091f4:	4b09      	ldr	r3, [pc, #36]	@ (800921c <udp_bind+0x10c>)
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80091fc:	4a07      	ldr	r2, [pc, #28]	@ (800921c <udp_bind+0x10c>)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3718      	adds	r7, #24
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	08010100 	.word	0x08010100
 8009210:	0800f28c 	.word	0x0800f28c
 8009214:	0800f554 	.word	0x0800f554
 8009218:	0800f2e0 	.word	0x0800f2e0
 800921c:	200094c4 	.word	0x200094c4

08009220 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b086      	sub	sp, #24
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	60b9      	str	r1, [r7, #8]
 800922a:	4613      	mov	r3, r2
 800922c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d109      	bne.n	8009248 <udp_connect+0x28>
 8009234:	4b2c      	ldr	r3, [pc, #176]	@ (80092e8 <udp_connect+0xc8>)
 8009236:	f240 4235 	movw	r2, #1077	@ 0x435
 800923a:	492c      	ldr	r1, [pc, #176]	@ (80092ec <udp_connect+0xcc>)
 800923c:	482c      	ldr	r0, [pc, #176]	@ (80092f0 <udp_connect+0xd0>)
 800923e:	f004 fb73 	bl	800d928 <iprintf>
 8009242:	f06f 030f 	mvn.w	r3, #15
 8009246:	e04b      	b.n	80092e0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d109      	bne.n	8009262 <udp_connect+0x42>
 800924e:	4b26      	ldr	r3, [pc, #152]	@ (80092e8 <udp_connect+0xc8>)
 8009250:	f240 4236 	movw	r2, #1078	@ 0x436
 8009254:	4927      	ldr	r1, [pc, #156]	@ (80092f4 <udp_connect+0xd4>)
 8009256:	4826      	ldr	r0, [pc, #152]	@ (80092f0 <udp_connect+0xd0>)
 8009258:	f004 fb66 	bl	800d928 <iprintf>
 800925c:	f06f 030f 	mvn.w	r3, #15
 8009260:	e03e      	b.n	80092e0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8a5b      	ldrh	r3, [r3, #18]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10f      	bne.n	800928a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800926a:	68f9      	ldr	r1, [r7, #12]
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8a5b      	ldrh	r3, [r3, #18]
 8009270:	461a      	mov	r2, r3
 8009272:	68f8      	ldr	r0, [r7, #12]
 8009274:	f7ff ff4c 	bl	8009110 <udp_bind>
 8009278:	4603      	mov	r3, r0
 800927a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800927c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <udp_connect+0x6a>
      return err;
 8009284:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009288:	e02a      	b.n	80092e0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d002      	beq.n	8009296 <udp_connect+0x76>
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	e000      	b.n	8009298 <udp_connect+0x78>
 8009296:	2300      	movs	r3, #0
 8009298:	68fa      	ldr	r2, [r7, #12]
 800929a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	88fa      	ldrh	r2, [r7, #6]
 80092a0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	7c1b      	ldrb	r3, [r3, #16]
 80092a6:	f043 0304 	orr.w	r3, r3, #4
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80092b0:	4b11      	ldr	r3, [pc, #68]	@ (80092f8 <udp_connect+0xd8>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	e008      	b.n	80092ca <udp_connect+0xaa>
    if (pcb == ipcb) {
 80092b8:	68fa      	ldr	r2, [r7, #12]
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d101      	bne.n	80092c4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80092c0:	2300      	movs	r3, #0
 80092c2:	e00d      	b.n	80092e0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	617b      	str	r3, [r7, #20]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d1f3      	bne.n	80092b8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80092d0:	4b09      	ldr	r3, [pc, #36]	@ (80092f8 <udp_connect+0xd8>)
 80092d2:	681a      	ldr	r2, [r3, #0]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80092d8:	4a07      	ldr	r2, [pc, #28]	@ (80092f8 <udp_connect+0xd8>)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	0800f28c 	.word	0x0800f28c
 80092ec:	0800f56c 	.word	0x0800f56c
 80092f0:	0800f2e0 	.word	0x0800f2e0
 80092f4:	0800f588 	.word	0x0800f588
 80092f8:	200094c4 	.word	0x200094c4

080092fc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	60f8      	str	r0, [r7, #12]
 8009304:	60b9      	str	r1, [r7, #8]
 8009306:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d107      	bne.n	800931e <udp_recv+0x22>
 800930e:	4b08      	ldr	r3, [pc, #32]	@ (8009330 <udp_recv+0x34>)
 8009310:	f240 428a 	movw	r2, #1162	@ 0x48a
 8009314:	4907      	ldr	r1, [pc, #28]	@ (8009334 <udp_recv+0x38>)
 8009316:	4808      	ldr	r0, [pc, #32]	@ (8009338 <udp_recv+0x3c>)
 8009318:	f004 fb06 	bl	800d928 <iprintf>
 800931c:	e005      	b.n	800932a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	68ba      	ldr	r2, [r7, #8]
 8009322:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	61da      	str	r2, [r3, #28]
}
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	0800f28c 	.word	0x0800f28c
 8009334:	0800f5c0 	.word	0x0800f5c0
 8009338:	0800f2e0 	.word	0x0800f2e0

0800933c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d107      	bne.n	800935a <udp_remove+0x1e>
 800934a:	4b19      	ldr	r3, [pc, #100]	@ (80093b0 <udp_remove+0x74>)
 800934c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8009350:	4918      	ldr	r1, [pc, #96]	@ (80093b4 <udp_remove+0x78>)
 8009352:	4819      	ldr	r0, [pc, #100]	@ (80093b8 <udp_remove+0x7c>)
 8009354:	f004 fae8 	bl	800d928 <iprintf>
 8009358:	e026      	b.n	80093a8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800935a:	4b18      	ldr	r3, [pc, #96]	@ (80093bc <udp_remove+0x80>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	687a      	ldr	r2, [r7, #4]
 8009360:	429a      	cmp	r2, r3
 8009362:	d105      	bne.n	8009370 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8009364:	4b15      	ldr	r3, [pc, #84]	@ (80093bc <udp_remove+0x80>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	68db      	ldr	r3, [r3, #12]
 800936a:	4a14      	ldr	r2, [pc, #80]	@ (80093bc <udp_remove+0x80>)
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	e017      	b.n	80093a0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8009370:	4b12      	ldr	r3, [pc, #72]	@ (80093bc <udp_remove+0x80>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	e010      	b.n	800939a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d009      	beq.n	8009394 <udp_remove+0x58>
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	68db      	ldr	r3, [r3, #12]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	429a      	cmp	r2, r3
 8009388:	d104      	bne.n	8009394 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68da      	ldr	r2, [r3, #12]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	60da      	str	r2, [r3, #12]
        break;
 8009392:	e005      	b.n	80093a0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	68db      	ldr	r3, [r3, #12]
 8009398:	60fb      	str	r3, [r7, #12]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1eb      	bne.n	8009378 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80093a0:	6879      	ldr	r1, [r7, #4]
 80093a2:	2000      	movs	r0, #0
 80093a4:	f7fe f9e8 	bl	8007778 <memp_free>
}
 80093a8:	3710      	adds	r7, #16
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}
 80093ae:	bf00      	nop
 80093b0:	0800f28c 	.word	0x0800f28c
 80093b4:	0800f5d8 	.word	0x0800f5d8
 80093b8:	0800f2e0 	.word	0x0800f2e0
 80093bc:	200094c4 	.word	0x200094c4

080093c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b082      	sub	sp, #8
 80093c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80093c6:	2000      	movs	r0, #0
 80093c8:	f7fe f966 	bl	8007698 <memp_malloc>
 80093cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d007      	beq.n	80093e4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80093d4:	2220      	movs	r2, #32
 80093d6:	2100      	movs	r1, #0
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f004 fb0a 	bl	800d9f2 <memset>
    pcb->ttl = UDP_TTL;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	22ff      	movs	r2, #255	@ 0xff
 80093e2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80093e4:	687b      	ldr	r3, [r7, #4]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3708      	adds	r7, #8
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d01e      	beq.n	800943e <udp_netif_ip_addr_changed+0x4e>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d01a      	beq.n	800943e <udp_netif_ip_addr_changed+0x4e>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d017      	beq.n	800943e <udp_netif_ip_addr_changed+0x4e>
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d013      	beq.n	800943e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009416:	4b0d      	ldr	r3, [pc, #52]	@ (800944c <udp_netif_ip_addr_changed+0x5c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	60fb      	str	r3, [r7, #12]
 800941c:	e00c      	b.n	8009438 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	429a      	cmp	r2, r3
 8009428:	d103      	bne.n	8009432 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800942a:	683b      	ldr	r3, [r7, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	68db      	ldr	r3, [r3, #12]
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1ef      	bne.n	800941e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800943e:	bf00      	nop
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr
 800944a:	bf00      	nop
 800944c:	200094c4 	.word	0x200094c4

08009450 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8009450:	b580      	push	{r7, lr}
 8009452:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8009454:	4b20      	ldr	r3, [pc, #128]	@ (80094d8 <dhcp_inc_pcb_refcount+0x88>)
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d133      	bne.n	80094c4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800945c:	4b1f      	ldr	r3, [pc, #124]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d005      	beq.n	8009470 <dhcp_inc_pcb_refcount+0x20>
 8009464:	4b1e      	ldr	r3, [pc, #120]	@ (80094e0 <dhcp_inc_pcb_refcount+0x90>)
 8009466:	22e5      	movs	r2, #229	@ 0xe5
 8009468:	491e      	ldr	r1, [pc, #120]	@ (80094e4 <dhcp_inc_pcb_refcount+0x94>)
 800946a:	481f      	ldr	r0, [pc, #124]	@ (80094e8 <dhcp_inc_pcb_refcount+0x98>)
 800946c:	f004 fa5c 	bl	800d928 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8009470:	f7ff ffa6 	bl	80093c0 <udp_new>
 8009474:	4603      	mov	r3, r0
 8009476:	4a19      	ldr	r2, [pc, #100]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 8009478:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 800947a:	4b18      	ldr	r3, [pc, #96]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d102      	bne.n	8009488 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8009482:	f04f 33ff 	mov.w	r3, #4294967295
 8009486:	e024      	b.n	80094d2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8009488:	4b14      	ldr	r3, [pc, #80]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	7a5a      	ldrb	r2, [r3, #9]
 800948e:	4b13      	ldr	r3, [pc, #76]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f042 0220 	orr.w	r2, r2, #32
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800949a:	4b10      	ldr	r3, [pc, #64]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2244      	movs	r2, #68	@ 0x44
 80094a0:	4912      	ldr	r1, [pc, #72]	@ (80094ec <dhcp_inc_pcb_refcount+0x9c>)
 80094a2:	4618      	mov	r0, r3
 80094a4:	f7ff fe34 	bl	8009110 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80094a8:	4b0c      	ldr	r3, [pc, #48]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2243      	movs	r2, #67	@ 0x43
 80094ae:	490f      	ldr	r1, [pc, #60]	@ (80094ec <dhcp_inc_pcb_refcount+0x9c>)
 80094b0:	4618      	mov	r0, r3
 80094b2:	f7ff feb5 	bl	8009220 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80094b6:	4b09      	ldr	r3, [pc, #36]	@ (80094dc <dhcp_inc_pcb_refcount+0x8c>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	2200      	movs	r2, #0
 80094bc:	490c      	ldr	r1, [pc, #48]	@ (80094f0 <dhcp_inc_pcb_refcount+0xa0>)
 80094be:	4618      	mov	r0, r3
 80094c0:	f7ff ff1c 	bl	80092fc <udp_recv>
  }

  dhcp_pcb_refcount++;
 80094c4:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <dhcp_inc_pcb_refcount+0x88>)
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	3301      	adds	r3, #1
 80094ca:	b2da      	uxtb	r2, r3
 80094cc:	4b02      	ldr	r3, [pc, #8]	@ (80094d8 <dhcp_inc_pcb_refcount+0x88>)
 80094ce:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80094d0:	2300      	movs	r3, #0
}
 80094d2:	4618      	mov	r0, r3
 80094d4:	bd80      	pop	{r7, pc}
 80094d6:	bf00      	nop
 80094d8:	200094f4 	.word	0x200094f4
 80094dc:	200094f0 	.word	0x200094f0
 80094e0:	0800f5f0 	.word	0x0800f5f0
 80094e4:	0800f628 	.word	0x0800f628
 80094e8:	0800f650 	.word	0x0800f650
 80094ec:	08010100 	.word	0x08010100
 80094f0:	0800ad7d 	.word	0x0800ad7d

080094f4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80094f8:	4b0e      	ldr	r3, [pc, #56]	@ (8009534 <dhcp_dec_pcb_refcount+0x40>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d105      	bne.n	800950c <dhcp_dec_pcb_refcount+0x18>
 8009500:	4b0d      	ldr	r3, [pc, #52]	@ (8009538 <dhcp_dec_pcb_refcount+0x44>)
 8009502:	22ff      	movs	r2, #255	@ 0xff
 8009504:	490d      	ldr	r1, [pc, #52]	@ (800953c <dhcp_dec_pcb_refcount+0x48>)
 8009506:	480e      	ldr	r0, [pc, #56]	@ (8009540 <dhcp_dec_pcb_refcount+0x4c>)
 8009508:	f004 fa0e 	bl	800d928 <iprintf>
  dhcp_pcb_refcount--;
 800950c:	4b09      	ldr	r3, [pc, #36]	@ (8009534 <dhcp_dec_pcb_refcount+0x40>)
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	3b01      	subs	r3, #1
 8009512:	b2da      	uxtb	r2, r3
 8009514:	4b07      	ldr	r3, [pc, #28]	@ (8009534 <dhcp_dec_pcb_refcount+0x40>)
 8009516:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8009518:	4b06      	ldr	r3, [pc, #24]	@ (8009534 <dhcp_dec_pcb_refcount+0x40>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d107      	bne.n	8009530 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8009520:	4b08      	ldr	r3, [pc, #32]	@ (8009544 <dhcp_dec_pcb_refcount+0x50>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f7ff ff09 	bl	800933c <udp_remove>
    dhcp_pcb = NULL;
 800952a:	4b06      	ldr	r3, [pc, #24]	@ (8009544 <dhcp_dec_pcb_refcount+0x50>)
 800952c:	2200      	movs	r2, #0
 800952e:	601a      	str	r2, [r3, #0]
  }
}
 8009530:	bf00      	nop
 8009532:	bd80      	pop	{r7, pc}
 8009534:	200094f4 	.word	0x200094f4
 8009538:	0800f5f0 	.word	0x0800f5f0
 800953c:	0800f678 	.word	0x0800f678
 8009540:	0800f650 	.word	0x0800f650
 8009544:	200094f0 	.word	0x200094f0

08009548 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009554:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009556:	210c      	movs	r1, #12
 8009558:	68f8      	ldr	r0, [r7, #12]
 800955a:	f001 f851 	bl	800a600 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800955e:	4b06      	ldr	r3, [pc, #24]	@ (8009578 <dhcp_handle_nak+0x30>)
 8009560:	4a05      	ldr	r2, [pc, #20]	@ (8009578 <dhcp_handle_nak+0x30>)
 8009562:	4905      	ldr	r1, [pc, #20]	@ (8009578 <dhcp_handle_nak+0x30>)
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7fe faa5 	bl	8007ab4 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f000 fc4a 	bl	8009e04 <dhcp_discover>
}
 8009570:	bf00      	nop
 8009572:	3710      	adds	r7, #16
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}
 8009578:	08010100 	.word	0x08010100

0800957c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009588:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800958a:	2108      	movs	r1, #8
 800958c:	68f8      	ldr	r0, [r7, #12]
 800958e:	f001 f837 	bl	800a600 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	331c      	adds	r3, #28
 8009596:	2200      	movs	r2, #0
 8009598:	4619      	mov	r1, r3
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f002 fb38 	bl	800bc10 <etharp_query>
 80095a0:	4603      	mov	r3, r0
 80095a2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	799b      	ldrb	r3, [r3, #6]
 80095a8:	2bff      	cmp	r3, #255	@ 0xff
 80095aa:	d005      	beq.n	80095b8 <dhcp_check+0x3c>
    dhcp->tries++;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	799b      	ldrb	r3, [r3, #6]
 80095b0:	3301      	adds	r3, #1
 80095b2:	b2da      	uxtb	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80095b8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80095bc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80095be:	893b      	ldrh	r3, [r7, #8]
 80095c0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80095c4:	4a06      	ldr	r2, [pc, #24]	@ (80095e0 <dhcp_check+0x64>)
 80095c6:	fb82 1203 	smull	r1, r2, r2, r3
 80095ca:	1152      	asrs	r2, r2, #5
 80095cc:	17db      	asrs	r3, r3, #31
 80095ce:	1ad3      	subs	r3, r2, r3
 80095d0:	b29a      	uxth	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80095d6:	bf00      	nop
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	10624dd3 	.word	0x10624dd3

080095e4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b084      	sub	sp, #16
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80095f4:	4b0c      	ldr	r3, [pc, #48]	@ (8009628 <dhcp_handle_offer+0x44>)
 80095f6:	789b      	ldrb	r3, [r3, #2]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d011      	beq.n	8009620 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2200      	movs	r2, #0
 8009600:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8009602:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <dhcp_handle_offer+0x48>)
 8009604:	689b      	ldr	r3, [r3, #8]
 8009606:	4618      	mov	r0, r3
 8009608:	f7fd fbda 	bl	8006dc0 <lwip_htonl>
 800960c:	4602      	mov	r2, r0
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	691a      	ldr	r2, [r3, #16]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f808 	bl	8009630 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8009620:	bf00      	nop
 8009622:	3710      	adds	r7, #16
 8009624:	46bd      	mov	sp, r7
 8009626:	bd80      	pop	{r7, pc}
 8009628:	200094e8 	.word	0x200094e8
 800962c:	200094c8 	.word	0x200094c8

08009630 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8009630:	b5b0      	push	{r4, r5, r7, lr}
 8009632:	b08a      	sub	sp, #40	@ 0x28
 8009634:	af02      	add	r7, sp, #8
 8009636:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <dhcp_select+0x22>
 800963e:	4b71      	ldr	r3, [pc, #452]	@ (8009804 <dhcp_select+0x1d4>)
 8009640:	f240 1277 	movw	r2, #375	@ 0x177
 8009644:	4970      	ldr	r1, [pc, #448]	@ (8009808 <dhcp_select+0x1d8>)
 8009646:	4871      	ldr	r0, [pc, #452]	@ (800980c <dhcp_select+0x1dc>)
 8009648:	f004 f96e 	bl	800d928 <iprintf>
 800964c:	f06f 030f 	mvn.w	r3, #15
 8009650:	e0d3      	b.n	80097fa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009656:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8009658:	69bb      	ldr	r3, [r7, #24]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d109      	bne.n	8009672 <dhcp_select+0x42>
 800965e:	4b69      	ldr	r3, [pc, #420]	@ (8009804 <dhcp_select+0x1d4>)
 8009660:	f240 1279 	movw	r2, #377	@ 0x179
 8009664:	496a      	ldr	r1, [pc, #424]	@ (8009810 <dhcp_select+0x1e0>)
 8009666:	4869      	ldr	r0, [pc, #420]	@ (800980c <dhcp_select+0x1dc>)
 8009668:	f004 f95e 	bl	800d928 <iprintf>
 800966c:	f06f 0305 	mvn.w	r3, #5
 8009670:	e0c3      	b.n	80097fa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8009672:	2101      	movs	r1, #1
 8009674:	69b8      	ldr	r0, [r7, #24]
 8009676:	f000 ffc3 	bl	800a600 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800967a:	f107 030c 	add.w	r3, r7, #12
 800967e:	2203      	movs	r2, #3
 8009680:	69b9      	ldr	r1, [r7, #24]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f001 fc48 	bl	800af18 <dhcp_create_msg>
 8009688:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b00      	cmp	r3, #0
 800968e:	f000 8085 	beq.w	800979c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009698:	89b8      	ldrh	r0, [r7, #12]
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80096a0:	2302      	movs	r3, #2
 80096a2:	2239      	movs	r2, #57	@ 0x39
 80096a4:	f000 ffc6 	bl	800a634 <dhcp_option>
 80096a8:	4603      	mov	r3, r0
 80096aa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80096ac:	89b8      	ldrh	r0, [r7, #12]
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80096b8:	461a      	mov	r2, r3
 80096ba:	f001 f815 	bl	800a6e8 <dhcp_option_short>
 80096be:	4603      	mov	r3, r0
 80096c0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80096c2:	89b8      	ldrh	r0, [r7, #12]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80096ca:	2304      	movs	r3, #4
 80096cc:	2232      	movs	r2, #50	@ 0x32
 80096ce:	f000 ffb1 	bl	800a634 <dhcp_option>
 80096d2:	4603      	mov	r3, r0
 80096d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80096d6:	89bc      	ldrh	r4, [r7, #12]
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80096de:	69bb      	ldr	r3, [r7, #24]
 80096e0:	69db      	ldr	r3, [r3, #28]
 80096e2:	4618      	mov	r0, r3
 80096e4:	f7fd fb6c 	bl	8006dc0 <lwip_htonl>
 80096e8:	4603      	mov	r3, r0
 80096ea:	461a      	mov	r2, r3
 80096ec:	4629      	mov	r1, r5
 80096ee:	4620      	mov	r0, r4
 80096f0:	f001 f82c 	bl	800a74c <dhcp_option_long>
 80096f4:	4603      	mov	r3, r0
 80096f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80096f8:	89b8      	ldrh	r0, [r7, #12]
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009700:	2304      	movs	r3, #4
 8009702:	2236      	movs	r2, #54	@ 0x36
 8009704:	f000 ff96 	bl	800a634 <dhcp_option>
 8009708:	4603      	mov	r3, r0
 800970a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800970c:	89bc      	ldrh	r4, [r7, #12]
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	699b      	ldr	r3, [r3, #24]
 8009718:	4618      	mov	r0, r3
 800971a:	f7fd fb51 	bl	8006dc0 <lwip_htonl>
 800971e:	4603      	mov	r3, r0
 8009720:	461a      	mov	r2, r3
 8009722:	4629      	mov	r1, r5
 8009724:	4620      	mov	r0, r4
 8009726:	f001 f811 	bl	800a74c <dhcp_option_long>
 800972a:	4603      	mov	r3, r0
 800972c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800972e:	89b8      	ldrh	r0, [r7, #12]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009736:	2303      	movs	r3, #3
 8009738:	2237      	movs	r2, #55	@ 0x37
 800973a:	f000 ff7b 	bl	800a634 <dhcp_option>
 800973e:	4603      	mov	r3, r0
 8009740:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009742:	2300      	movs	r3, #0
 8009744:	77bb      	strb	r3, [r7, #30]
 8009746:	e00e      	b.n	8009766 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009748:	89b8      	ldrh	r0, [r7, #12]
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009750:	7fbb      	ldrb	r3, [r7, #30]
 8009752:	4a30      	ldr	r2, [pc, #192]	@ (8009814 <dhcp_select+0x1e4>)
 8009754:	5cd3      	ldrb	r3, [r2, r3]
 8009756:	461a      	mov	r2, r3
 8009758:	f000 ffa0 	bl	800a69c <dhcp_option_byte>
 800975c:	4603      	mov	r3, r0
 800975e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009760:	7fbb      	ldrb	r3, [r7, #30]
 8009762:	3301      	adds	r3, #1
 8009764:	77bb      	strb	r3, [r7, #30]
 8009766:	7fbb      	ldrb	r3, [r7, #30]
 8009768:	2b02      	cmp	r3, #2
 800976a:	d9ed      	bls.n	8009748 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800976c:	89b8      	ldrh	r0, [r7, #12]
 800976e:	693b      	ldr	r3, [r7, #16]
 8009770:	33f0      	adds	r3, #240	@ 0xf0
 8009772:	697a      	ldr	r2, [r7, #20]
 8009774:	4619      	mov	r1, r3
 8009776:	f001 fca5 	bl	800b0c4 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800977a:	4b27      	ldr	r3, [pc, #156]	@ (8009818 <dhcp_select+0x1e8>)
 800977c:	6818      	ldr	r0, [r3, #0]
 800977e:	4b27      	ldr	r3, [pc, #156]	@ (800981c <dhcp_select+0x1ec>)
 8009780:	9301      	str	r3, [sp, #4]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	2343      	movs	r3, #67	@ 0x43
 8009788:	4a25      	ldr	r2, [pc, #148]	@ (8009820 <dhcp_select+0x1f0>)
 800978a:	6979      	ldr	r1, [r7, #20]
 800978c:	f7ff fbda 	bl	8008f44 <udp_sendto_if_src>
 8009790:	4603      	mov	r3, r0
 8009792:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8009794:	6978      	ldr	r0, [r7, #20]
 8009796:	f7fe fe19 	bl	80083cc <pbuf_free>
 800979a:	e001      	b.n	80097a0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800979c:	23ff      	movs	r3, #255	@ 0xff
 800979e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80097a0:	69bb      	ldr	r3, [r7, #24]
 80097a2:	799b      	ldrb	r3, [r3, #6]
 80097a4:	2bff      	cmp	r3, #255	@ 0xff
 80097a6:	d005      	beq.n	80097b4 <dhcp_select+0x184>
    dhcp->tries++;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	799b      	ldrb	r3, [r3, #6]
 80097ac:	3301      	adds	r3, #1
 80097ae:	b2da      	uxtb	r2, r3
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80097b4:	69bb      	ldr	r3, [r7, #24]
 80097b6:	799b      	ldrb	r3, [r3, #6]
 80097b8:	2b05      	cmp	r3, #5
 80097ba:	d80d      	bhi.n	80097d8 <dhcp_select+0x1a8>
 80097bc:	69bb      	ldr	r3, [r7, #24]
 80097be:	799b      	ldrb	r3, [r3, #6]
 80097c0:	461a      	mov	r2, r3
 80097c2:	2301      	movs	r3, #1
 80097c4:	4093      	lsls	r3, r2
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	461a      	mov	r2, r3
 80097ca:	0152      	lsls	r2, r2, #5
 80097cc:	1ad2      	subs	r2, r2, r3
 80097ce:	0092      	lsls	r2, r2, #2
 80097d0:	4413      	add	r3, r2
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	b29b      	uxth	r3, r3
 80097d6:	e001      	b.n	80097dc <dhcp_select+0x1ac>
 80097d8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80097dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80097de:	89fb      	ldrh	r3, [r7, #14]
 80097e0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80097e4:	4a0f      	ldr	r2, [pc, #60]	@ (8009824 <dhcp_select+0x1f4>)
 80097e6:	fb82 1203 	smull	r1, r2, r2, r3
 80097ea:	1152      	asrs	r2, r2, #5
 80097ec:	17db      	asrs	r3, r3, #31
 80097ee:	1ad3      	subs	r3, r2, r3
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80097f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80097fa:	4618      	mov	r0, r3
 80097fc:	3720      	adds	r7, #32
 80097fe:	46bd      	mov	sp, r7
 8009800:	bdb0      	pop	{r4, r5, r7, pc}
 8009802:	bf00      	nop
 8009804:	0800f5f0 	.word	0x0800f5f0
 8009808:	0800f69c 	.word	0x0800f69c
 800980c:	0800f650 	.word	0x0800f650
 8009810:	0800f6b8 	.word	0x0800f6b8
 8009814:	20000024 	.word	0x20000024
 8009818:	200094f0 	.word	0x200094f0
 800981c:	08010100 	.word	0x08010100
 8009820:	08010104 	.word	0x08010104
 8009824:	10624dd3 	.word	0x10624dd3

08009828 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800982e:	4b27      	ldr	r3, [pc, #156]	@ (80098cc <dhcp_coarse_tmr+0xa4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	607b      	str	r3, [r7, #4]
 8009834:	e042      	b.n	80098bc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800983a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d039      	beq.n	80098b6 <dhcp_coarse_tmr+0x8e>
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	795b      	ldrb	r3, [r3, #5]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d035      	beq.n	80098b6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	8a9b      	ldrh	r3, [r3, #20]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d012      	beq.n	8009878 <dhcp_coarse_tmr+0x50>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	8a5b      	ldrh	r3, [r3, #18]
 8009856:	3301      	adds	r3, #1
 8009858:	b29a      	uxth	r2, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	825a      	strh	r2, [r3, #18]
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	8a5a      	ldrh	r2, [r3, #18]
 8009862:	683b      	ldr	r3, [r7, #0]
 8009864:	8a9b      	ldrh	r3, [r3, #20]
 8009866:	429a      	cmp	r2, r3
 8009868:	d106      	bne.n	8009878 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f000 fe2e 	bl	800a4cc <dhcp_release_and_stop>
        dhcp_start(netif);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f96b 	bl	8009b4c <dhcp_start>
 8009876:	e01e      	b.n	80098b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	8a1b      	ldrh	r3, [r3, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00b      	beq.n	8009898 <dhcp_coarse_tmr+0x70>
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	8a1b      	ldrh	r3, [r3, #16]
 8009884:	1e5a      	subs	r2, r3, #1
 8009886:	b291      	uxth	r1, r2
 8009888:	683a      	ldr	r2, [r7, #0]
 800988a:	8211      	strh	r1, [r2, #16]
 800988c:	2b01      	cmp	r3, #1
 800988e:	d103      	bne.n	8009898 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f8c7 	bl	8009a24 <dhcp_t2_timeout>
 8009896:	e00e      	b.n	80098b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	89db      	ldrh	r3, [r3, #14]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00a      	beq.n	80098b6 <dhcp_coarse_tmr+0x8e>
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	89db      	ldrh	r3, [r3, #14]
 80098a4:	1e5a      	subs	r2, r3, #1
 80098a6:	b291      	uxth	r1, r2
 80098a8:	683a      	ldr	r2, [r7, #0]
 80098aa:	81d1      	strh	r1, [r2, #14]
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d102      	bne.n	80098b6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f000 f888 	bl	80099c6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	607b      	str	r3, [r7, #4]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1b9      	bne.n	8009836 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80098c2:	bf00      	nop
 80098c4:	bf00      	nop
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	200094b0 	.word	0x200094b0

080098d0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80098d6:	4b16      	ldr	r3, [pc, #88]	@ (8009930 <dhcp_fine_tmr+0x60>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	607b      	str	r3, [r7, #4]
 80098dc:	e020      	b.n	8009920 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098e2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d017      	beq.n	800991a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	891b      	ldrh	r3, [r3, #8]
 80098ee:	2b01      	cmp	r3, #1
 80098f0:	d906      	bls.n	8009900 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	891b      	ldrh	r3, [r3, #8]
 80098f6:	3b01      	subs	r3, #1
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	811a      	strh	r2, [r3, #8]
 80098fe:	e00c      	b.n	800991a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8009900:	683b      	ldr	r3, [r7, #0]
 8009902:	891b      	ldrh	r3, [r3, #8]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d108      	bne.n	800991a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	891b      	ldrh	r3, [r3, #8]
 800990c:	3b01      	subs	r3, #1
 800990e:	b29a      	uxth	r2, r3
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f80d 	bl	8009934 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	607b      	str	r3, [r7, #4]
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d1db      	bne.n	80098de <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8009926:	bf00      	nop
 8009928:	bf00      	nop
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	200094b0 	.word	0x200094b0

08009934 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009940:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	795b      	ldrb	r3, [r3, #5]
 8009946:	2b0c      	cmp	r3, #12
 8009948:	d003      	beq.n	8009952 <dhcp_timeout+0x1e>
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	795b      	ldrb	r3, [r3, #5]
 800994e:	2b06      	cmp	r3, #6
 8009950:	d103      	bne.n	800995a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 fa56 	bl	8009e04 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8009958:	e031      	b.n	80099be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	795b      	ldrb	r3, [r3, #5]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d10e      	bne.n	8009980 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	799b      	ldrb	r3, [r3, #6]
 8009966:	2b05      	cmp	r3, #5
 8009968:	d803      	bhi.n	8009972 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800996a:	6878      	ldr	r0, [r7, #4]
 800996c:	f7ff fe60 	bl	8009630 <dhcp_select>
}
 8009970:	e025      	b.n	80099be <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8009972:	6878      	ldr	r0, [r7, #4]
 8009974:	f000 fdaa 	bl	800a4cc <dhcp_release_and_stop>
      dhcp_start(netif);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 f8e7 	bl	8009b4c <dhcp_start>
}
 800997e:	e01e      	b.n	80099be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	795b      	ldrb	r3, [r3, #5]
 8009984:	2b08      	cmp	r3, #8
 8009986:	d10b      	bne.n	80099a0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	799b      	ldrb	r3, [r3, #6]
 800998c:	2b01      	cmp	r3, #1
 800998e:	d803      	bhi.n	8009998 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff fdf3 	bl	800957c <dhcp_check>
}
 8009996:	e012      	b.n	80099be <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fad5 	bl	8009f48 <dhcp_bind>
}
 800999e:	e00e      	b.n	80099be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	795b      	ldrb	r3, [r3, #5]
 80099a4:	2b03      	cmp	r3, #3
 80099a6:	d10a      	bne.n	80099be <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	799b      	ldrb	r3, [r3, #6]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d803      	bhi.n	80099b8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f000 fcd7 	bl	800a364 <dhcp_reboot>
}
 80099b6:	e002      	b.n	80099be <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fa23 	bl	8009e04 <dhcp_discover>
}
 80099be:	bf00      	nop
 80099c0:	3710      	adds	r7, #16
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b084      	sub	sp, #16
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	795b      	ldrb	r3, [r3, #5]
 80099d8:	2b01      	cmp	r3, #1
 80099da:	d007      	beq.n	80099ec <dhcp_t1_timeout+0x26>
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	795b      	ldrb	r3, [r3, #5]
 80099e0:	2b0a      	cmp	r3, #10
 80099e2:	d003      	beq.n	80099ec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80099e8:	2b05      	cmp	r3, #5
 80099ea:	d117      	bne.n	8009a1c <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fb85 	bl	800a0fc <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	899b      	ldrh	r3, [r3, #12]
 80099f6:	461a      	mov	r2, r3
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8a5b      	ldrh	r3, [r3, #18]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	dd0c      	ble.n	8009a1c <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	899b      	ldrh	r3, [r3, #12]
 8009a06:	461a      	mov	r2, r3
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8a5b      	ldrh	r3, [r3, #18]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	da00      	bge.n	8009a14 <dhcp_t1_timeout+0x4e>
 8009a12:	3301      	adds	r3, #1
 8009a14:	105b      	asrs	r3, r3, #1
 8009a16:	b29a      	uxth	r2, r3
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	795b      	ldrb	r3, [r3, #5]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d00b      	beq.n	8009a52 <dhcp_t2_timeout+0x2e>
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	795b      	ldrb	r3, [r3, #5]
 8009a3e:	2b0a      	cmp	r3, #10
 8009a40:	d007      	beq.n	8009a52 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8009a46:	2b05      	cmp	r3, #5
 8009a48:	d003      	beq.n	8009a52 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	795b      	ldrb	r3, [r3, #5]
 8009a4e:	2b04      	cmp	r3, #4
 8009a50:	d117      	bne.n	8009a82 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fbec 	bl	800a230 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	8a9b      	ldrh	r3, [r3, #20]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8a5b      	ldrh	r3, [r3, #18]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	dd0c      	ble.n	8009a82 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	8a9b      	ldrh	r3, [r3, #20]
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	8a5b      	ldrh	r3, [r3, #18]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	da00      	bge.n	8009a7a <dhcp_t2_timeout+0x56>
 8009a78:	3301      	adds	r3, #1
 8009a7a:	105b      	asrs	r3, r3, #1
 8009a7c:	b29a      	uxth	r2, r3
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8009a82:	bf00      	nop
 8009a84:	3710      	adds	r7, #16
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
	...

08009a8c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b084      	sub	sp, #16
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]
 8009a94:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a9a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8009aa8:	4b26      	ldr	r3, [pc, #152]	@ (8009b44 <dhcp_handle_ack+0xb8>)
 8009aaa:	78db      	ldrb	r3, [r3, #3]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d003      	beq.n	8009ab8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8009ab0:	4b25      	ldr	r3, [pc, #148]	@ (8009b48 <dhcp_handle_ack+0xbc>)
 8009ab2:	68da      	ldr	r2, [r3, #12]
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8009ab8:	4b22      	ldr	r3, [pc, #136]	@ (8009b44 <dhcp_handle_ack+0xb8>)
 8009aba:	791b      	ldrb	r3, [r3, #4]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d004      	beq.n	8009aca <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8009ac0:	4b21      	ldr	r3, [pc, #132]	@ (8009b48 <dhcp_handle_ack+0xbc>)
 8009ac2:	691a      	ldr	r2, [r3, #16]
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009ac8:	e004      	b.n	8009ad4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ace:	085a      	lsrs	r2, r3, #1
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8009ad4:	4b1b      	ldr	r3, [pc, #108]	@ (8009b44 <dhcp_handle_ack+0xb8>)
 8009ad6:	795b      	ldrb	r3, [r3, #5]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d004      	beq.n	8009ae6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8009adc:	4b1a      	ldr	r3, [pc, #104]	@ (8009b48 <dhcp_handle_ack+0xbc>)
 8009ade:	695a      	ldr	r2, [r3, #20]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	631a      	str	r2, [r3, #48]	@ 0x30
 8009ae4:	e007      	b.n	8009af6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009aea:	4613      	mov	r3, r2
 8009aec:	00db      	lsls	r3, r3, #3
 8009aee:	1a9b      	subs	r3, r3, r2
 8009af0:	08da      	lsrs	r2, r3, #3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	691a      	ldr	r2, [r3, #16]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8009afe:	4b11      	ldr	r3, [pc, #68]	@ (8009b44 <dhcp_handle_ack+0xb8>)
 8009b00:	799b      	ldrb	r3, [r3, #6]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d00b      	beq.n	8009b1e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8009b06:	4b10      	ldr	r3, [pc, #64]	@ (8009b48 <dhcp_handle_ack+0xbc>)
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fd f958 	bl	8006dc0 <lwip_htonl>
 8009b10:	4602      	mov	r2, r0
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	71da      	strb	r2, [r3, #7]
 8009b1c:	e002      	b.n	8009b24 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8009b24:	4b07      	ldr	r3, [pc, #28]	@ (8009b44 <dhcp_handle_ack+0xb8>)
 8009b26:	79db      	ldrb	r3, [r3, #7]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d007      	beq.n	8009b3c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8009b2c:	4b06      	ldr	r3, [pc, #24]	@ (8009b48 <dhcp_handle_ack+0xbc>)
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7fd f945 	bl	8006dc0 <lwip_htonl>
 8009b36:	4602      	mov	r2, r0
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	625a      	str	r2, [r3, #36]	@ 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8009b3c:	bf00      	nop
 8009b3e:	3710      	adds	r7, #16
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200094e8 	.word	0x200094e8
 8009b48:	200094c8 	.word	0x200094c8

08009b4c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d109      	bne.n	8009b6e <dhcp_start+0x22>
 8009b5a:	4b37      	ldr	r3, [pc, #220]	@ (8009c38 <dhcp_start+0xec>)
 8009b5c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8009b60:	4936      	ldr	r1, [pc, #216]	@ (8009c3c <dhcp_start+0xf0>)
 8009b62:	4837      	ldr	r0, [pc, #220]	@ (8009c40 <dhcp_start+0xf4>)
 8009b64:	f003 fee0 	bl	800d928 <iprintf>
 8009b68:	f06f 030f 	mvn.w	r3, #15
 8009b6c:	e060      	b.n	8009c30 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009b74:	f003 0301 	and.w	r3, r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d109      	bne.n	8009b90 <dhcp_start+0x44>
 8009b7c:	4b2e      	ldr	r3, [pc, #184]	@ (8009c38 <dhcp_start+0xec>)
 8009b7e:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8009b82:	4930      	ldr	r1, [pc, #192]	@ (8009c44 <dhcp_start+0xf8>)
 8009b84:	482e      	ldr	r0, [pc, #184]	@ (8009c40 <dhcp_start+0xf4>)
 8009b86:	f003 fecf 	bl	800d928 <iprintf>
 8009b8a:	f06f 030f 	mvn.w	r3, #15
 8009b8e:	e04f      	b.n	8009c30 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009b94:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b9a:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8009b9e:	d202      	bcs.n	8009ba6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8009ba0:	f04f 33ff 	mov.w	r3, #4294967295
 8009ba4:	e044      	b.n	8009c30 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d10d      	bne.n	8009bc8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8009bac:	2034      	movs	r0, #52	@ 0x34
 8009bae:	f7fd fbdf 	bl	8007370 <mem_malloc>
 8009bb2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d102      	bne.n	8009bc0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8009bba:	f04f 33ff 	mov.w	r3, #4294967295
 8009bbe:	e037      	b.n	8009c30 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	68fa      	ldr	r2, [r7, #12]
 8009bc4:	625a      	str	r2, [r3, #36]	@ 0x24
 8009bc6:	e005      	b.n	8009bd4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	791b      	ldrb	r3, [r3, #4]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d001      	beq.n	8009bd4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8009bd0:	f7ff fc90 	bl	80094f4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8009bd4:	2234      	movs	r2, #52	@ 0x34
 8009bd6:	2100      	movs	r1, #0
 8009bd8:	68f8      	ldr	r0, [r7, #12]
 8009bda:	f003 ff0a 	bl	800d9f2 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8009bde:	f7ff fc37 	bl	8009450 <dhcp_inc_pcb_refcount>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d002      	beq.n	8009bee <dhcp_start+0xa2>
    return ERR_MEM;
 8009be8:	f04f 33ff 	mov.w	r3, #4294967295
 8009bec:	e020      	b.n	8009c30 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009bfa:	f003 0304 	and.w	r3, r3, #4
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d105      	bne.n	8009c0e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8009c02:	2102      	movs	r1, #2
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f000 fcfb 	bl	800a600 <dhcp_set_state>
    return ERR_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e010      	b.n	8009c30 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f8f8 	bl	8009e04 <dhcp_discover>
 8009c14:	4603      	mov	r3, r0
 8009c16:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8009c18:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d005      	beq.n	8009c2c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8009c20:	6878      	ldr	r0, [r7, #4]
 8009c22:	f000 fc53 	bl	800a4cc <dhcp_release_and_stop>
    return ERR_MEM;
 8009c26:	f04f 33ff 	mov.w	r3, #4294967295
 8009c2a:	e001      	b.n	8009c30 <dhcp_start+0xe4>
  }
  return result;
 8009c2c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	0800f5f0 	.word	0x0800f5f0
 8009c3c:	0800f6d4 	.word	0x0800f6d4
 8009c40:	0800f650 	.word	0x0800f650
 8009c44:	0800f718 	.word	0x0800f718

08009c48 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8009c48:	b580      	push	{r7, lr}
 8009c4a:	b084      	sub	sp, #16
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c54:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d025      	beq.n	8009ca8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	795b      	ldrb	r3, [r3, #5]
 8009c60:	2b0a      	cmp	r3, #10
 8009c62:	d008      	beq.n	8009c76 <dhcp_network_changed+0x2e>
 8009c64:	2b0a      	cmp	r3, #10
 8009c66:	dc0d      	bgt.n	8009c84 <dhcp_network_changed+0x3c>
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d01f      	beq.n	8009cac <dhcp_network_changed+0x64>
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	db09      	blt.n	8009c84 <dhcp_network_changed+0x3c>
 8009c70:	3b03      	subs	r3, #3
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d806      	bhi.n	8009c84 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 fb71 	bl	800a364 <dhcp_reboot>
      break;
 8009c82:	e014      	b.n	8009cae <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	795b      	ldrb	r3, [r3, #5]
 8009c88:	2b0c      	cmp	r3, #12
 8009c8a:	d906      	bls.n	8009c9a <dhcp_network_changed+0x52>
 8009c8c:	4b09      	ldr	r3, [pc, #36]	@ (8009cb4 <dhcp_network_changed+0x6c>)
 8009c8e:	f240 326d 	movw	r2, #877	@ 0x36d
 8009c92:	4909      	ldr	r1, [pc, #36]	@ (8009cb8 <dhcp_network_changed+0x70>)
 8009c94:	4809      	ldr	r0, [pc, #36]	@ (8009cbc <dhcp_network_changed+0x74>)
 8009c96:	f003 fe47 	bl	800d928 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f8af 	bl	8009e04 <dhcp_discover>
      break;
 8009ca6:	e002      	b.n	8009cae <dhcp_network_changed+0x66>
    return;
 8009ca8:	bf00      	nop
 8009caa:	e000      	b.n	8009cae <dhcp_network_changed+0x66>
      break;
 8009cac:	bf00      	nop
  }
}
 8009cae:	3710      	adds	r7, #16
 8009cb0:	46bd      	mov	sp, r7
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	0800f5f0 	.word	0x0800f5f0
 8009cb8:	0800f73c 	.word	0x0800f73c
 8009cbc:	0800f650 	.word	0x0800f650

08009cc0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d107      	bne.n	8009ce0 <dhcp_arp_reply+0x20>
 8009cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8009d0c <dhcp_arp_reply+0x4c>)
 8009cd2:	f240 328b 	movw	r2, #907	@ 0x38b
 8009cd6:	490e      	ldr	r1, [pc, #56]	@ (8009d10 <dhcp_arp_reply+0x50>)
 8009cd8:	480e      	ldr	r0, [pc, #56]	@ (8009d14 <dhcp_arp_reply+0x54>)
 8009cda:	f003 fe25 	bl	800d928 <iprintf>
 8009cde:	e012      	b.n	8009d06 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ce4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d00c      	beq.n	8009d06 <dhcp_arp_reply+0x46>
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	795b      	ldrb	r3, [r3, #5]
 8009cf0:	2b08      	cmp	r3, #8
 8009cf2:	d108      	bne.n	8009d06 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681a      	ldr	r2, [r3, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	69db      	ldr	r3, [r3, #28]
 8009cfc:	429a      	cmp	r2, r3
 8009cfe:	d102      	bne.n	8009d06 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8009d00:	6878      	ldr	r0, [r7, #4]
 8009d02:	f000 f809 	bl	8009d18 <dhcp_decline>
    }
  }
}
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	0800f5f0 	.word	0x0800f5f0
 8009d10:	0800f6d4 	.word	0x0800f6d4
 8009d14:	0800f650 	.word	0x0800f650

08009d18 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8009d18:	b5b0      	push	{r4, r5, r7, lr}
 8009d1a:	b08a      	sub	sp, #40	@ 0x28
 8009d1c:	af02      	add	r7, sp, #8
 8009d1e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d24:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8009d26:	210c      	movs	r1, #12
 8009d28:	69b8      	ldr	r0, [r7, #24]
 8009d2a:	f000 fc69 	bl	800a600 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8009d2e:	f107 030c 	add.w	r3, r7, #12
 8009d32:	2204      	movs	r2, #4
 8009d34:	69b9      	ldr	r1, [r7, #24]
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f001 f8ee 	bl	800af18 <dhcp_create_msg>
 8009d3c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8009d3e:	697b      	ldr	r3, [r7, #20]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d035      	beq.n	8009db0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	685b      	ldr	r3, [r3, #4]
 8009d48:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8009d4a:	89b8      	ldrh	r0, [r7, #12]
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009d52:	2304      	movs	r3, #4
 8009d54:	2232      	movs	r2, #50	@ 0x32
 8009d56:	f000 fc6d 	bl	800a634 <dhcp_option>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8009d5e:	89bc      	ldrh	r4, [r7, #12]
 8009d60:	693b      	ldr	r3, [r7, #16]
 8009d62:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8009d66:	69bb      	ldr	r3, [r7, #24]
 8009d68:	69db      	ldr	r3, [r3, #28]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7fd f828 	bl	8006dc0 <lwip_htonl>
 8009d70:	4603      	mov	r3, r0
 8009d72:	461a      	mov	r2, r3
 8009d74:	4629      	mov	r1, r5
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 fce8 	bl	800a74c <dhcp_option_long>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009d80:	89b8      	ldrh	r0, [r7, #12]
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	33f0      	adds	r3, #240	@ 0xf0
 8009d86:	697a      	ldr	r2, [r7, #20]
 8009d88:	4619      	mov	r1, r3
 8009d8a:	f001 f99b 	bl	800b0c4 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8009d8e:	4b19      	ldr	r3, [pc, #100]	@ (8009df4 <dhcp_decline+0xdc>)
 8009d90:	6818      	ldr	r0, [r3, #0]
 8009d92:	4b19      	ldr	r3, [pc, #100]	@ (8009df8 <dhcp_decline+0xe0>)
 8009d94:	9301      	str	r3, [sp, #4]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	9300      	str	r3, [sp, #0]
 8009d9a:	2343      	movs	r3, #67	@ 0x43
 8009d9c:	4a17      	ldr	r2, [pc, #92]	@ (8009dfc <dhcp_decline+0xe4>)
 8009d9e:	6979      	ldr	r1, [r7, #20]
 8009da0:	f7ff f8d0 	bl	8008f44 <udp_sendto_if_src>
 8009da4:	4603      	mov	r3, r0
 8009da6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8009da8:	6978      	ldr	r0, [r7, #20]
 8009daa:	f7fe fb0f 	bl	80083cc <pbuf_free>
 8009dae:	e001      	b.n	8009db4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8009db0:	23ff      	movs	r3, #255	@ 0xff
 8009db2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8009db4:	69bb      	ldr	r3, [r7, #24]
 8009db6:	799b      	ldrb	r3, [r3, #6]
 8009db8:	2bff      	cmp	r3, #255	@ 0xff
 8009dba:	d005      	beq.n	8009dc8 <dhcp_decline+0xb0>
    dhcp->tries++;
 8009dbc:	69bb      	ldr	r3, [r7, #24]
 8009dbe:	799b      	ldrb	r3, [r3, #6]
 8009dc0:	3301      	adds	r3, #1
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	69bb      	ldr	r3, [r7, #24]
 8009dc6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8009dc8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8009dcc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009dce:	89fb      	ldrh	r3, [r7, #14]
 8009dd0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8009dd4:	4a0a      	ldr	r2, [pc, #40]	@ (8009e00 <dhcp_decline+0xe8>)
 8009dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8009dda:	1152      	asrs	r2, r2, #5
 8009ddc:	17db      	asrs	r3, r3, #31
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	b29a      	uxth	r2, r3
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009de6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3720      	adds	r7, #32
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bdb0      	pop	{r4, r5, r7, pc}
 8009df2:	bf00      	nop
 8009df4:	200094f0 	.word	0x200094f0
 8009df8:	08010100 	.word	0x08010100
 8009dfc:	08010104 	.word	0x08010104
 8009e00:	10624dd3 	.word	0x10624dd3

08009e04 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b08a      	sub	sp, #40	@ 0x28
 8009e08:	af02      	add	r7, sp, #8
 8009e0a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e10:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8009e1c:	2106      	movs	r1, #6
 8009e1e:	69b8      	ldr	r0, [r7, #24]
 8009e20:	f000 fbee 	bl	800a600 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8009e24:	f107 0308 	add.w	r3, r7, #8
 8009e28:	2201      	movs	r2, #1
 8009e2a:	69b9      	ldr	r1, [r7, #24]
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f001 f873 	bl	800af18 <dhcp_create_msg>
 8009e32:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d04b      	beq.n	8009ed2 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8009e40:	8938      	ldrh	r0, [r7, #8]
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009e48:	2302      	movs	r3, #2
 8009e4a:	2239      	movs	r2, #57	@ 0x39
 8009e4c:	f000 fbf2 	bl	800a634 <dhcp_option>
 8009e50:	4603      	mov	r3, r0
 8009e52:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8009e54:	8938      	ldrh	r0, [r7, #8]
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e60:	461a      	mov	r2, r3
 8009e62:	f000 fc41 	bl	800a6e8 <dhcp_option_short>
 8009e66:	4603      	mov	r3, r0
 8009e68:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8009e6a:	8938      	ldrh	r0, [r7, #8]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009e72:	2303      	movs	r3, #3
 8009e74:	2237      	movs	r2, #55	@ 0x37
 8009e76:	f000 fbdd 	bl	800a634 <dhcp_option>
 8009e7a:	4603      	mov	r3, r0
 8009e7c:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009e7e:	2300      	movs	r3, #0
 8009e80:	77fb      	strb	r3, [r7, #31]
 8009e82:	e00e      	b.n	8009ea2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8009e84:	8938      	ldrh	r0, [r7, #8]
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8009e8c:	7ffb      	ldrb	r3, [r7, #31]
 8009e8e:	4a29      	ldr	r2, [pc, #164]	@ (8009f34 <dhcp_discover+0x130>)
 8009e90:	5cd3      	ldrb	r3, [r2, r3]
 8009e92:	461a      	mov	r2, r3
 8009e94:	f000 fc02 	bl	800a69c <dhcp_option_byte>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8009e9c:	7ffb      	ldrb	r3, [r7, #31]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	77fb      	strb	r3, [r7, #31]
 8009ea2:	7ffb      	ldrb	r3, [r7, #31]
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d9ed      	bls.n	8009e84 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8009ea8:	8938      	ldrh	r0, [r7, #8]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	33f0      	adds	r3, #240	@ 0xf0
 8009eae:	693a      	ldr	r2, [r7, #16]
 8009eb0:	4619      	mov	r1, r3
 8009eb2:	f001 f907 	bl	800b0c4 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8009eb6:	4b20      	ldr	r3, [pc, #128]	@ (8009f38 <dhcp_discover+0x134>)
 8009eb8:	6818      	ldr	r0, [r3, #0]
 8009eba:	4b20      	ldr	r3, [pc, #128]	@ (8009f3c <dhcp_discover+0x138>)
 8009ebc:	9301      	str	r3, [sp, #4]
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	9300      	str	r3, [sp, #0]
 8009ec2:	2343      	movs	r3, #67	@ 0x43
 8009ec4:	4a1e      	ldr	r2, [pc, #120]	@ (8009f40 <dhcp_discover+0x13c>)
 8009ec6:	6939      	ldr	r1, [r7, #16]
 8009ec8:	f7ff f83c 	bl	8008f44 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8009ecc:	6938      	ldr	r0, [r7, #16]
 8009ece:	f7fe fa7d 	bl	80083cc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	799b      	ldrb	r3, [r3, #6]
 8009ed6:	2bff      	cmp	r3, #255	@ 0xff
 8009ed8:	d005      	beq.n	8009ee6 <dhcp_discover+0xe2>
    dhcp->tries++;
 8009eda:	69bb      	ldr	r3, [r7, #24]
 8009edc:	799b      	ldrb	r3, [r3, #6]
 8009ede:	3301      	adds	r3, #1
 8009ee0:	b2da      	uxtb	r2, r3
 8009ee2:	69bb      	ldr	r3, [r7, #24]
 8009ee4:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	799b      	ldrb	r3, [r3, #6]
 8009eea:	2b05      	cmp	r3, #5
 8009eec:	d80d      	bhi.n	8009f0a <dhcp_discover+0x106>
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	799b      	ldrb	r3, [r3, #6]
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	4093      	lsls	r3, r2
 8009ef8:	b29b      	uxth	r3, r3
 8009efa:	461a      	mov	r2, r3
 8009efc:	0152      	lsls	r2, r2, #5
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	0092      	lsls	r2, r2, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	00db      	lsls	r3, r3, #3
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	e001      	b.n	8009f0e <dhcp_discover+0x10a>
 8009f0a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8009f0e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8009f10:	897b      	ldrh	r3, [r7, #10]
 8009f12:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8009f16:	4a0b      	ldr	r2, [pc, #44]	@ (8009f44 <dhcp_discover+0x140>)
 8009f18:	fb82 1203 	smull	r1, r2, r2, r3
 8009f1c:	1152      	asrs	r2, r2, #5
 8009f1e:	17db      	asrs	r3, r3, #31
 8009f20:	1ad3      	subs	r3, r2, r3
 8009f22:	b29a      	uxth	r2, r3
 8009f24:	69bb      	ldr	r3, [r7, #24]
 8009f26:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8009f28:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3720      	adds	r7, #32
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}
 8009f34:	20000024 	.word	0x20000024
 8009f38:	200094f0 	.word	0x200094f0
 8009f3c:	08010100 	.word	0x08010100
 8009f40:	08010104 	.word	0x08010104
 8009f44:	10624dd3 	.word	0x10624dd3

08009f48 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d107      	bne.n	8009f66 <dhcp_bind+0x1e>
 8009f56:	4b64      	ldr	r3, [pc, #400]	@ (800a0e8 <dhcp_bind+0x1a0>)
 8009f58:	f240 4215 	movw	r2, #1045	@ 0x415
 8009f5c:	4963      	ldr	r1, [pc, #396]	@ (800a0ec <dhcp_bind+0x1a4>)
 8009f5e:	4864      	ldr	r0, [pc, #400]	@ (800a0f0 <dhcp_bind+0x1a8>)
 8009f60:	f003 fce2 	bl	800d928 <iprintf>
 8009f64:	e0bc      	b.n	800a0e0 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f6a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d107      	bne.n	8009f82 <dhcp_bind+0x3a>
 8009f72:	4b5d      	ldr	r3, [pc, #372]	@ (800a0e8 <dhcp_bind+0x1a0>)
 8009f74:	f240 4217 	movw	r2, #1047	@ 0x417
 8009f78:	495e      	ldr	r1, [pc, #376]	@ (800a0f4 <dhcp_bind+0x1ac>)
 8009f7a:	485d      	ldr	r0, [pc, #372]	@ (800a0f0 <dhcp_bind+0x1a8>)
 8009f7c:	f003 fcd4 	bl	800d928 <iprintf>
 8009f80:	e0ae      	b.n	800a0e0 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	2200      	movs	r2, #0
 8009f86:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8009f88:	69bb      	ldr	r3, [r7, #24]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f90:	d019      	beq.n	8009fc6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f96:	331e      	adds	r3, #30
 8009f98:	4a57      	ldr	r2, [pc, #348]	@ (800a0f8 <dhcp_bind+0x1b0>)
 8009f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9e:	095b      	lsrs	r3, r3, #5
 8009fa0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8009fa2:	69fb      	ldr	r3, [r7, #28]
 8009fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fa8:	d302      	bcc.n	8009fb0 <dhcp_bind+0x68>
      timeout = 0xffff;
 8009faa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	69bb      	ldr	r3, [r7, #24]
 8009fb6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8009fb8:	69bb      	ldr	r3, [r7, #24]
 8009fba:	8a9b      	ldrh	r3, [r3, #20]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d102      	bne.n	8009fc6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8009fc6:	69bb      	ldr	r3, [r7, #24]
 8009fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fce:	d01d      	beq.n	800a00c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fd4:	331e      	adds	r3, #30
 8009fd6:	4a48      	ldr	r2, [pc, #288]	@ (800a0f8 <dhcp_bind+0x1b0>)
 8009fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fdc:	095b      	lsrs	r3, r3, #5
 8009fde:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009fe6:	d302      	bcc.n	8009fee <dhcp_bind+0xa6>
      timeout = 0xffff;
 8009fe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009fec:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8009ff6:	69bb      	ldr	r3, [r7, #24]
 8009ff8:	895b      	ldrh	r3, [r3, #10]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8009ffe:	69bb      	ldr	r3, [r7, #24]
 800a000:	2201      	movs	r2, #1
 800a002:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800a004:	69bb      	ldr	r3, [r7, #24]
 800a006:	895a      	ldrh	r2, [r3, #10]
 800a008:	69bb      	ldr	r3, [r7, #24]
 800a00a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a014:	d01d      	beq.n	800a052 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a01a:	331e      	adds	r3, #30
 800a01c:	4a36      	ldr	r2, [pc, #216]	@ (800a0f8 <dhcp_bind+0x1b0>)
 800a01e:	fba2 2303 	umull	r2, r3, r2, r3
 800a022:	095b      	lsrs	r3, r3, #5
 800a024:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800a026:	69fb      	ldr	r3, [r7, #28]
 800a028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a02c:	d302      	bcc.n	800a034 <dhcp_bind+0xec>
      timeout = 0xffff;
 800a02e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a032:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	b29a      	uxth	r2, r3
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800a03c:	69bb      	ldr	r3, [r7, #24]
 800a03e:	899b      	ldrh	r3, [r3, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d102      	bne.n	800a04a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	2201      	movs	r2, #1
 800a048:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	899a      	ldrh	r2, [r3, #12]
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800a052:	69bb      	ldr	r3, [r7, #24]
 800a054:	895a      	ldrh	r2, [r3, #10]
 800a056:	69bb      	ldr	r3, [r7, #24]
 800a058:	899b      	ldrh	r3, [r3, #12]
 800a05a:	429a      	cmp	r2, r3
 800a05c:	d306      	bcc.n	800a06c <dhcp_bind+0x124>
 800a05e:	69bb      	ldr	r3, [r7, #24]
 800a060:	899b      	ldrh	r3, [r3, #12]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800a066:	69bb      	ldr	r3, [r7, #24]
 800a068:	2200      	movs	r2, #0
 800a06a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	79db      	ldrb	r3, [r3, #7]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d003      	beq.n	800a07c <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	6a1b      	ldr	r3, [r3, #32]
 800a078:	613b      	str	r3, [r7, #16]
 800a07a:	e014      	b.n	800a0a6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	331c      	adds	r3, #28
 800a080:	781b      	ldrb	r3, [r3, #0]
 800a082:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800a084:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	db02      	blt.n	800a092 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800a08c:	23ff      	movs	r3, #255	@ 0xff
 800a08e:	613b      	str	r3, [r7, #16]
 800a090:	e009      	b.n	800a0a6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800a092:	7dfb      	ldrb	r3, [r7, #23]
 800a094:	2bbf      	cmp	r3, #191	@ 0xbf
 800a096:	d903      	bls.n	800a0a0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800a098:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 800a09c:	613b      	str	r3, [r7, #16]
 800a09e:	e002      	b.n	800a0a6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800a0a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0a4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d108      	bne.n	800a0c4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800a0b2:	69bb      	ldr	r3, [r7, #24]
 800a0b4:	69da      	ldr	r2, [r3, #28]
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	4013      	ands	r3, r2
 800a0ba:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a0c2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800a0c4:	210a      	movs	r1, #10
 800a0c6:	69b8      	ldr	r0, [r7, #24]
 800a0c8:	f000 fa9a 	bl	800a600 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	f103 011c 	add.w	r1, r3, #28
 800a0d2:	f107 030c 	add.w	r3, r7, #12
 800a0d6:	f107 0210 	add.w	r2, r7, #16
 800a0da:	6878      	ldr	r0, [r7, #4]
 800a0dc:	f7fd fcea 	bl	8007ab4 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800a0e0:	3720      	adds	r7, #32
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0800f5f0 	.word	0x0800f5f0
 800a0ec:	0800f750 	.word	0x0800f750
 800a0f0:	0800f650 	.word	0x0800f650
 800a0f4:	0800f76c 	.word	0x0800f76c
 800a0f8:	88888889 	.word	0x88888889

0800a0fc <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b08a      	sub	sp, #40	@ 0x28
 800a100:	af02      	add	r7, sp, #8
 800a102:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a108:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800a10a:	2105      	movs	r1, #5
 800a10c:	69b8      	ldr	r0, [r7, #24]
 800a10e:	f000 fa77 	bl	800a600 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800a112:	f107 030c 	add.w	r3, r7, #12
 800a116:	2203      	movs	r2, #3
 800a118:	69b9      	ldr	r1, [r7, #24]
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 fefc 	bl	800af18 <dhcp_create_msg>
 800a120:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d04e      	beq.n	800a1c6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a12e:	89b8      	ldrh	r0, [r7, #12]
 800a130:	693b      	ldr	r3, [r7, #16]
 800a132:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a136:	2302      	movs	r3, #2
 800a138:	2239      	movs	r2, #57	@ 0x39
 800a13a:	f000 fa7b 	bl	800a634 <dhcp_option>
 800a13e:	4603      	mov	r3, r0
 800a140:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800a142:	89b8      	ldrh	r0, [r7, #12]
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a14e:	461a      	mov	r2, r3
 800a150:	f000 faca 	bl	800a6e8 <dhcp_option_short>
 800a154:	4603      	mov	r3, r0
 800a156:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a158:	89b8      	ldrh	r0, [r7, #12]
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a160:	2303      	movs	r3, #3
 800a162:	2237      	movs	r2, #55	@ 0x37
 800a164:	f000 fa66 	bl	800a634 <dhcp_option>
 800a168:	4603      	mov	r3, r0
 800a16a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a16c:	2300      	movs	r3, #0
 800a16e:	77bb      	strb	r3, [r7, #30]
 800a170:	e00e      	b.n	800a190 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800a172:	89b8      	ldrh	r0, [r7, #12]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a17a:	7fbb      	ldrb	r3, [r7, #30]
 800a17c:	4a29      	ldr	r2, [pc, #164]	@ (800a224 <dhcp_renew+0x128>)
 800a17e:	5cd3      	ldrb	r3, [r2, r3]
 800a180:	461a      	mov	r2, r3
 800a182:	f000 fa8b 	bl	800a69c <dhcp_option_byte>
 800a186:	4603      	mov	r3, r0
 800a188:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a18a:	7fbb      	ldrb	r3, [r7, #30]
 800a18c:	3301      	adds	r3, #1
 800a18e:	77bb      	strb	r3, [r7, #30]
 800a190:	7fbb      	ldrb	r3, [r7, #30]
 800a192:	2b02      	cmp	r3, #2
 800a194:	d9ed      	bls.n	800a172 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800a196:	89b8      	ldrh	r0, [r7, #12]
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	33f0      	adds	r3, #240	@ 0xf0
 800a19c:	697a      	ldr	r2, [r7, #20]
 800a19e:	4619      	mov	r1, r3
 800a1a0:	f000 ff90 	bl	800b0c4 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800a1a4:	4b20      	ldr	r3, [pc, #128]	@ (800a228 <dhcp_renew+0x12c>)
 800a1a6:	6818      	ldr	r0, [r3, #0]
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	f103 0218 	add.w	r2, r3, #24
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	9300      	str	r3, [sp, #0]
 800a1b2:	2343      	movs	r3, #67	@ 0x43
 800a1b4:	6979      	ldr	r1, [r7, #20]
 800a1b6:	f7fe fe51 	bl	8008e5c <udp_sendto_if>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800a1be:	6978      	ldr	r0, [r7, #20]
 800a1c0:	f7fe f904 	bl	80083cc <pbuf_free>
 800a1c4:	e001      	b.n	800a1ca <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800a1c6:	23ff      	movs	r3, #255	@ 0xff
 800a1c8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	799b      	ldrb	r3, [r3, #6]
 800a1ce:	2bff      	cmp	r3, #255	@ 0xff
 800a1d0:	d005      	beq.n	800a1de <dhcp_renew+0xe2>
    dhcp->tries++;
 800a1d2:	69bb      	ldr	r3, [r7, #24]
 800a1d4:	799b      	ldrb	r3, [r3, #6]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	b2da      	uxtb	r2, r3
 800a1da:	69bb      	ldr	r3, [r7, #24]
 800a1dc:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800a1de:	69bb      	ldr	r3, [r7, #24]
 800a1e0:	799b      	ldrb	r3, [r3, #6]
 800a1e2:	2b09      	cmp	r3, #9
 800a1e4:	d809      	bhi.n	800a1fa <dhcp_renew+0xfe>
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	799b      	ldrb	r3, [r3, #6]
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	0152      	lsls	r2, r2, #5
 800a1ee:	1ad2      	subs	r2, r2, r3
 800a1f0:	0092      	lsls	r2, r2, #2
 800a1f2:	4413      	add	r3, r2
 800a1f4:	011b      	lsls	r3, r3, #4
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	e001      	b.n	800a1fe <dhcp_renew+0x102>
 800a1fa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800a1fe:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800a200:	89fb      	ldrh	r3, [r7, #14]
 800a202:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800a206:	4a09      	ldr	r2, [pc, #36]	@ (800a22c <dhcp_renew+0x130>)
 800a208:	fb82 1203 	smull	r1, r2, r2, r3
 800a20c:	1152      	asrs	r2, r2, #5
 800a20e:	17db      	asrs	r3, r3, #31
 800a210:	1ad3      	subs	r3, r2, r3
 800a212:	b29a      	uxth	r2, r3
 800a214:	69bb      	ldr	r3, [r7, #24]
 800a216:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a218:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3720      	adds	r7, #32
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}
 800a224:	20000024 	.word	0x20000024
 800a228:	200094f0 	.word	0x200094f0
 800a22c:	10624dd3 	.word	0x10624dd3

0800a230 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b08a      	sub	sp, #40	@ 0x28
 800a234:	af02      	add	r7, sp, #8
 800a236:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a23c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800a23e:	2104      	movs	r1, #4
 800a240:	69b8      	ldr	r0, [r7, #24]
 800a242:	f000 f9dd 	bl	800a600 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800a246:	f107 030c 	add.w	r3, r7, #12
 800a24a:	2203      	movs	r2, #3
 800a24c:	69b9      	ldr	r1, [r7, #24]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fe62 	bl	800af18 <dhcp_create_msg>
 800a254:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d04c      	beq.n	800a2f6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a262:	89b8      	ldrh	r0, [r7, #12]
 800a264:	693b      	ldr	r3, [r7, #16]
 800a266:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a26a:	2302      	movs	r3, #2
 800a26c:	2239      	movs	r2, #57	@ 0x39
 800a26e:	f000 f9e1 	bl	800a634 <dhcp_option>
 800a272:	4603      	mov	r3, r0
 800a274:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800a276:	89b8      	ldrh	r0, [r7, #12]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a282:	461a      	mov	r2, r3
 800a284:	f000 fa30 	bl	800a6e8 <dhcp_option_short>
 800a288:	4603      	mov	r3, r0
 800a28a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a28c:	89b8      	ldrh	r0, [r7, #12]
 800a28e:	693b      	ldr	r3, [r7, #16]
 800a290:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a294:	2303      	movs	r3, #3
 800a296:	2237      	movs	r2, #55	@ 0x37
 800a298:	f000 f9cc 	bl	800a634 <dhcp_option>
 800a29c:	4603      	mov	r3, r0
 800a29e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	77bb      	strb	r3, [r7, #30]
 800a2a4:	e00e      	b.n	800a2c4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800a2a6:	89b8      	ldrh	r0, [r7, #12]
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a2ae:	7fbb      	ldrb	r3, [r7, #30]
 800a2b0:	4a28      	ldr	r2, [pc, #160]	@ (800a354 <dhcp_rebind+0x124>)
 800a2b2:	5cd3      	ldrb	r3, [r2, r3]
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	f000 f9f1 	bl	800a69c <dhcp_option_byte>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a2be:	7fbb      	ldrb	r3, [r7, #30]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	77bb      	strb	r3, [r7, #30]
 800a2c4:	7fbb      	ldrb	r3, [r7, #30]
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d9ed      	bls.n	800a2a6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800a2ca:	89b8      	ldrh	r0, [r7, #12]
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	33f0      	adds	r3, #240	@ 0xf0
 800a2d0:	697a      	ldr	r2, [r7, #20]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	f000 fef6 	bl	800b0c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800a2d8:	4b1f      	ldr	r3, [pc, #124]	@ (800a358 <dhcp_rebind+0x128>)
 800a2da:	6818      	ldr	r0, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	9300      	str	r3, [sp, #0]
 800a2e0:	2343      	movs	r3, #67	@ 0x43
 800a2e2:	4a1e      	ldr	r2, [pc, #120]	@ (800a35c <dhcp_rebind+0x12c>)
 800a2e4:	6979      	ldr	r1, [r7, #20]
 800a2e6:	f7fe fdb9 	bl	8008e5c <udp_sendto_if>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800a2ee:	6978      	ldr	r0, [r7, #20]
 800a2f0:	f7fe f86c 	bl	80083cc <pbuf_free>
 800a2f4:	e001      	b.n	800a2fa <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800a2f6:	23ff      	movs	r3, #255	@ 0xff
 800a2f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	799b      	ldrb	r3, [r3, #6]
 800a2fe:	2bff      	cmp	r3, #255	@ 0xff
 800a300:	d005      	beq.n	800a30e <dhcp_rebind+0xde>
    dhcp->tries++;
 800a302:	69bb      	ldr	r3, [r7, #24]
 800a304:	799b      	ldrb	r3, [r3, #6]
 800a306:	3301      	adds	r3, #1
 800a308:	b2da      	uxtb	r2, r3
 800a30a:	69bb      	ldr	r3, [r7, #24]
 800a30c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	799b      	ldrb	r3, [r3, #6]
 800a312:	2b09      	cmp	r3, #9
 800a314:	d809      	bhi.n	800a32a <dhcp_rebind+0xfa>
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	799b      	ldrb	r3, [r3, #6]
 800a31a:	461a      	mov	r2, r3
 800a31c:	0152      	lsls	r2, r2, #5
 800a31e:	1ad2      	subs	r2, r2, r3
 800a320:	0092      	lsls	r2, r2, #2
 800a322:	4413      	add	r3, r2
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	b29b      	uxth	r3, r3
 800a328:	e001      	b.n	800a32e <dhcp_rebind+0xfe>
 800a32a:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a32e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800a330:	89fb      	ldrh	r3, [r7, #14]
 800a332:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800a336:	4a0a      	ldr	r2, [pc, #40]	@ (800a360 <dhcp_rebind+0x130>)
 800a338:	fb82 1203 	smull	r1, r2, r2, r3
 800a33c:	1152      	asrs	r2, r2, #5
 800a33e:	17db      	asrs	r3, r3, #31
 800a340:	1ad3      	subs	r3, r2, r3
 800a342:	b29a      	uxth	r2, r3
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a348:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3720      	adds	r7, #32
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	20000024 	.word	0x20000024
 800a358:	200094f0 	.word	0x200094f0
 800a35c:	08010104 	.word	0x08010104
 800a360:	10624dd3 	.word	0x10624dd3

0800a364 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800a364:	b5b0      	push	{r4, r5, r7, lr}
 800a366:	b08a      	sub	sp, #40	@ 0x28
 800a368:	af02      	add	r7, sp, #8
 800a36a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a370:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800a372:	2103      	movs	r1, #3
 800a374:	69b8      	ldr	r0, [r7, #24]
 800a376:	f000 f943 	bl	800a600 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800a37a:	f107 030c 	add.w	r3, r7, #12
 800a37e:	2203      	movs	r2, #3
 800a380:	69b9      	ldr	r1, [r7, #24]
 800a382:	6878      	ldr	r0, [r7, #4]
 800a384:	f000 fdc8 	bl	800af18 <dhcp_create_msg>
 800a388:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d066      	beq.n	800a45e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	685b      	ldr	r3, [r3, #4]
 800a394:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800a396:	89b8      	ldrh	r0, [r7, #12]
 800a398:	693b      	ldr	r3, [r7, #16]
 800a39a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a39e:	2302      	movs	r3, #2
 800a3a0:	2239      	movs	r2, #57	@ 0x39
 800a3a2:	f000 f947 	bl	800a634 <dhcp_option>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800a3aa:	89b8      	ldrh	r0, [r7, #12]
 800a3ac:	693b      	ldr	r3, [r7, #16]
 800a3ae:	33f0      	adds	r3, #240	@ 0xf0
 800a3b0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	f000 f997 	bl	800a6e8 <dhcp_option_short>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800a3be:	89b8      	ldrh	r0, [r7, #12]
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a3c6:	2304      	movs	r3, #4
 800a3c8:	2232      	movs	r2, #50	@ 0x32
 800a3ca:	f000 f933 	bl	800a634 <dhcp_option>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800a3d2:	89bc      	ldrh	r4, [r7, #12]
 800a3d4:	693b      	ldr	r3, [r7, #16]
 800a3d6:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	69db      	ldr	r3, [r3, #28]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fc fcee 	bl	8006dc0 <lwip_htonl>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 f9ae 	bl	800a74c <dhcp_option_long>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800a3f4:	89b8      	ldrh	r0, [r7, #12]
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	2237      	movs	r2, #55	@ 0x37
 800a400:	f000 f918 	bl	800a634 <dhcp_option>
 800a404:	4603      	mov	r3, r0
 800a406:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a408:	2300      	movs	r3, #0
 800a40a:	77bb      	strb	r3, [r7, #30]
 800a40c:	e00e      	b.n	800a42c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800a40e:	89b8      	ldrh	r0, [r7, #12]
 800a410:	693b      	ldr	r3, [r7, #16]
 800a412:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a416:	7fbb      	ldrb	r3, [r7, #30]
 800a418:	4a28      	ldr	r2, [pc, #160]	@ (800a4bc <dhcp_reboot+0x158>)
 800a41a:	5cd3      	ldrb	r3, [r2, r3]
 800a41c:	461a      	mov	r2, r3
 800a41e:	f000 f93d 	bl	800a69c <dhcp_option_byte>
 800a422:	4603      	mov	r3, r0
 800a424:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800a426:	7fbb      	ldrb	r3, [r7, #30]
 800a428:	3301      	adds	r3, #1
 800a42a:	77bb      	strb	r3, [r7, #30]
 800a42c:	7fbb      	ldrb	r3, [r7, #30]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d9ed      	bls.n	800a40e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800a432:	89b8      	ldrh	r0, [r7, #12]
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	33f0      	adds	r3, #240	@ 0xf0
 800a438:	697a      	ldr	r2, [r7, #20]
 800a43a:	4619      	mov	r1, r3
 800a43c:	f000 fe42 	bl	800b0c4 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800a440:	4b1f      	ldr	r3, [pc, #124]	@ (800a4c0 <dhcp_reboot+0x15c>)
 800a442:	6818      	ldr	r0, [r3, #0]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	9300      	str	r3, [sp, #0]
 800a448:	2343      	movs	r3, #67	@ 0x43
 800a44a:	4a1e      	ldr	r2, [pc, #120]	@ (800a4c4 <dhcp_reboot+0x160>)
 800a44c:	6979      	ldr	r1, [r7, #20]
 800a44e:	f7fe fd05 	bl	8008e5c <udp_sendto_if>
 800a452:	4603      	mov	r3, r0
 800a454:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800a456:	6978      	ldr	r0, [r7, #20]
 800a458:	f7fd ffb8 	bl	80083cc <pbuf_free>
 800a45c:	e001      	b.n	800a462 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800a45e:	23ff      	movs	r3, #255	@ 0xff
 800a460:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800a462:	69bb      	ldr	r3, [r7, #24]
 800a464:	799b      	ldrb	r3, [r3, #6]
 800a466:	2bff      	cmp	r3, #255	@ 0xff
 800a468:	d005      	beq.n	800a476 <dhcp_reboot+0x112>
    dhcp->tries++;
 800a46a:	69bb      	ldr	r3, [r7, #24]
 800a46c:	799b      	ldrb	r3, [r3, #6]
 800a46e:	3301      	adds	r3, #1
 800a470:	b2da      	uxtb	r2, r3
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800a476:	69bb      	ldr	r3, [r7, #24]
 800a478:	799b      	ldrb	r3, [r3, #6]
 800a47a:	2b09      	cmp	r3, #9
 800a47c:	d809      	bhi.n	800a492 <dhcp_reboot+0x12e>
 800a47e:	69bb      	ldr	r3, [r7, #24]
 800a480:	799b      	ldrb	r3, [r3, #6]
 800a482:	461a      	mov	r2, r3
 800a484:	0152      	lsls	r2, r2, #5
 800a486:	1ad2      	subs	r2, r2, r3
 800a488:	0092      	lsls	r2, r2, #2
 800a48a:	4413      	add	r3, r2
 800a48c:	00db      	lsls	r3, r3, #3
 800a48e:	b29b      	uxth	r3, r3
 800a490:	e001      	b.n	800a496 <dhcp_reboot+0x132>
 800a492:	f242 7310 	movw	r3, #10000	@ 0x2710
 800a496:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800a498:	89fb      	ldrh	r3, [r7, #14]
 800a49a:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 800a49e:	4a0a      	ldr	r2, [pc, #40]	@ (800a4c8 <dhcp_reboot+0x164>)
 800a4a0:	fb82 1203 	smull	r1, r2, r2, r3
 800a4a4:	1152      	asrs	r2, r2, #5
 800a4a6:	17db      	asrs	r3, r3, #31
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	b29a      	uxth	r2, r3
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800a4b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bdb0      	pop	{r4, r5, r7, pc}
 800a4bc:	20000024 	.word	0x20000024
 800a4c0:	200094f0 	.word	0x200094f0
 800a4c4:	08010104 	.word	0x08010104
 800a4c8:	10624dd3 	.word	0x10624dd3

0800a4cc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800a4cc:	b5b0      	push	{r4, r5, r7, lr}
 800a4ce:	b08a      	sub	sp, #40	@ 0x28
 800a4d0:	af02      	add	r7, sp, #8
 800a4d2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4d8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800a4da:	69fb      	ldr	r3, [r7, #28]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	f000 8084 	beq.w	800a5ea <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800a4e2:	69fb      	ldr	r3, [r7, #28]
 800a4e4:	795b      	ldrb	r3, [r3, #5]
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	f000 8081 	beq.w	800a5ee <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800a4ec:	69fb      	ldr	r3, [r7, #28]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	2200      	movs	r2, #0
 800a4f6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800a4f8:	69fb      	ldr	r3, [r7, #28]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800a4fe:	69fb      	ldr	r3, [r7, #28]
 800a500:	2200      	movs	r2, #0
 800a502:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800a504:	69fb      	ldr	r3, [r7, #28]
 800a506:	2200      	movs	r2, #0
 800a508:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800a50a:	69fb      	ldr	r3, [r7, #28]
 800a50c:	2200      	movs	r2, #0
 800a50e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a510:	69fb      	ldr	r3, [r7, #28]
 800a512:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a514:	69fb      	ldr	r3, [r7, #28]
 800a516:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a518:	69fb      	ldr	r3, [r7, #28]
 800a51a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800a520:	69fb      	ldr	r3, [r7, #28]
 800a522:	2200      	movs	r2, #0
 800a524:	829a      	strh	r2, [r3, #20]
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	8a9a      	ldrh	r2, [r3, #20]
 800a52a:	69fb      	ldr	r3, [r7, #28]
 800a52c:	825a      	strh	r2, [r3, #18]
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	8a5a      	ldrh	r2, [r3, #18]
 800a532:	69fb      	ldr	r3, [r7, #28]
 800a534:	821a      	strh	r2, [r3, #16]
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	8a1a      	ldrh	r2, [r3, #16]
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 fdee 	bl	800b120 <dhcp_supplied_address>
 800a544:	4603      	mov	r3, r0
 800a546:	2b00      	cmp	r3, #0
 800a548:	d03b      	beq.n	800a5c2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800a54a:	f107 030e 	add.w	r3, r7, #14
 800a54e:	2207      	movs	r2, #7
 800a550:	69f9      	ldr	r1, [r7, #28]
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fce0 	bl	800af18 <dhcp_create_msg>
 800a558:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800a55a:	69bb      	ldr	r3, [r7, #24]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d030      	beq.n	800a5c2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800a566:	89f8      	ldrh	r0, [r7, #14]
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800a56e:	2304      	movs	r3, #4
 800a570:	2236      	movs	r2, #54	@ 0x36
 800a572:	f000 f85f 	bl	800a634 <dhcp_option>
 800a576:	4603      	mov	r3, r0
 800a578:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800a57a:	89fc      	ldrh	r4, [r7, #14]
 800a57c:	697b      	ldr	r3, [r7, #20]
 800a57e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	4618      	mov	r0, r3
 800a586:	f7fc fc1b 	bl	8006dc0 <lwip_htonl>
 800a58a:	4603      	mov	r3, r0
 800a58c:	461a      	mov	r2, r3
 800a58e:	4629      	mov	r1, r5
 800a590:	4620      	mov	r0, r4
 800a592:	f000 f8db 	bl	800a74c <dhcp_option_long>
 800a596:	4603      	mov	r3, r0
 800a598:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800a59a:	89f8      	ldrh	r0, [r7, #14]
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	33f0      	adds	r3, #240	@ 0xf0
 800a5a0:	69ba      	ldr	r2, [r7, #24]
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	f000 fd8e 	bl	800b0c4 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800a5a8:	4b13      	ldr	r3, [pc, #76]	@ (800a5f8 <dhcp_release_and_stop+0x12c>)
 800a5aa:	6818      	ldr	r0, [r3, #0]
 800a5ac:	f107 0210 	add.w	r2, r7, #16
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	9300      	str	r3, [sp, #0]
 800a5b4:	2343      	movs	r3, #67	@ 0x43
 800a5b6:	69b9      	ldr	r1, [r7, #24]
 800a5b8:	f7fe fc50 	bl	8008e5c <udp_sendto_if>
      pbuf_free(p_out);
 800a5bc:	69b8      	ldr	r0, [r7, #24]
 800a5be:	f7fd ff05 	bl	80083cc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800a5c2:	4b0e      	ldr	r3, [pc, #56]	@ (800a5fc <dhcp_release_and_stop+0x130>)
 800a5c4:	4a0d      	ldr	r2, [pc, #52]	@ (800a5fc <dhcp_release_and_stop+0x130>)
 800a5c6:	490d      	ldr	r1, [pc, #52]	@ (800a5fc <dhcp_release_and_stop+0x130>)
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7fd fa73 	bl	8007ab4 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800a5ce:	2100      	movs	r1, #0
 800a5d0:	69f8      	ldr	r0, [r7, #28]
 800a5d2:	f000 f815 	bl	800a600 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800a5d6:	69fb      	ldr	r3, [r7, #28]
 800a5d8:	791b      	ldrb	r3, [r3, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d008      	beq.n	800a5f0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800a5de:	f7fe ff89 	bl	80094f4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	711a      	strb	r2, [r3, #4]
 800a5e8:	e002      	b.n	800a5f0 <dhcp_release_and_stop+0x124>
    return;
 800a5ea:	bf00      	nop
 800a5ec:	e000      	b.n	800a5f0 <dhcp_release_and_stop+0x124>
    return;
 800a5ee:	bf00      	nop
  }
}
 800a5f0:	3720      	adds	r7, #32
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bdb0      	pop	{r4, r5, r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	200094f0 	.word	0x200094f0
 800a5fc:	08010100 	.word	0x08010100

0800a600 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	460b      	mov	r3, r1
 800a60a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	795b      	ldrb	r3, [r3, #5]
 800a610:	78fa      	ldrb	r2, [r7, #3]
 800a612:	429a      	cmp	r2, r3
 800a614:	d008      	beq.n	800a628 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2200      	movs	r2, #0
 800a626:	811a      	strh	r2, [r3, #8]
  }
}
 800a628:	bf00      	nop
 800a62a:	370c      	adds	r7, #12
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b082      	sub	sp, #8
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6039      	str	r1, [r7, #0]
 800a63c:	4611      	mov	r1, r2
 800a63e:	461a      	mov	r2, r3
 800a640:	4603      	mov	r3, r0
 800a642:	80fb      	strh	r3, [r7, #6]
 800a644:	460b      	mov	r3, r1
 800a646:	717b      	strb	r3, [r7, #5]
 800a648:	4613      	mov	r3, r2
 800a64a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800a64c:	88fa      	ldrh	r2, [r7, #6]
 800a64e:	793b      	ldrb	r3, [r7, #4]
 800a650:	4413      	add	r3, r2
 800a652:	3302      	adds	r3, #2
 800a654:	2b44      	cmp	r3, #68	@ 0x44
 800a656:	d906      	bls.n	800a666 <dhcp_option+0x32>
 800a658:	4b0d      	ldr	r3, [pc, #52]	@ (800a690 <dhcp_option+0x5c>)
 800a65a:	f240 529a 	movw	r2, #1434	@ 0x59a
 800a65e:	490d      	ldr	r1, [pc, #52]	@ (800a694 <dhcp_option+0x60>)
 800a660:	480d      	ldr	r0, [pc, #52]	@ (800a698 <dhcp_option+0x64>)
 800a662:	f003 f961 	bl	800d928 <iprintf>
  options[options_out_len++] = option_type;
 800a666:	88fb      	ldrh	r3, [r7, #6]
 800a668:	1c5a      	adds	r2, r3, #1
 800a66a:	80fa      	strh	r2, [r7, #6]
 800a66c:	461a      	mov	r2, r3
 800a66e:	683b      	ldr	r3, [r7, #0]
 800a670:	4413      	add	r3, r2
 800a672:	797a      	ldrb	r2, [r7, #5]
 800a674:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800a676:	88fb      	ldrh	r3, [r7, #6]
 800a678:	1c5a      	adds	r2, r3, #1
 800a67a:	80fa      	strh	r2, [r7, #6]
 800a67c:	461a      	mov	r2, r3
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	4413      	add	r3, r2
 800a682:	793a      	ldrb	r2, [r7, #4]
 800a684:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800a686:	88fb      	ldrh	r3, [r7, #6]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3708      	adds	r7, #8
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	0800f5f0 	.word	0x0800f5f0
 800a694:	0800f784 	.word	0x0800f784
 800a698:	0800f650 	.word	0x0800f650

0800a69c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b082      	sub	sp, #8
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	6039      	str	r1, [r7, #0]
 800a6a6:	80fb      	strh	r3, [r7, #6]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800a6ac:	88fb      	ldrh	r3, [r7, #6]
 800a6ae:	2b43      	cmp	r3, #67	@ 0x43
 800a6b0:	d906      	bls.n	800a6c0 <dhcp_option_byte+0x24>
 800a6b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a6dc <dhcp_option_byte+0x40>)
 800a6b4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 800a6b8:	4909      	ldr	r1, [pc, #36]	@ (800a6e0 <dhcp_option_byte+0x44>)
 800a6ba:	480a      	ldr	r0, [pc, #40]	@ (800a6e4 <dhcp_option_byte+0x48>)
 800a6bc:	f003 f934 	bl	800d928 <iprintf>
  options[options_out_len++] = value;
 800a6c0:	88fb      	ldrh	r3, [r7, #6]
 800a6c2:	1c5a      	adds	r2, r3, #1
 800a6c4:	80fa      	strh	r2, [r7, #6]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	683b      	ldr	r3, [r7, #0]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	797a      	ldrb	r2, [r7, #5]
 800a6ce:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800a6d0:	88fb      	ldrh	r3, [r7, #6]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3708      	adds	r7, #8
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}
 800a6da:	bf00      	nop
 800a6dc:	0800f5f0 	.word	0x0800f5f0
 800a6e0:	0800f7c8 	.word	0x0800f7c8
 800a6e4:	0800f650 	.word	0x0800f650

0800a6e8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b082      	sub	sp, #8
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	80fb      	strh	r3, [r7, #6]
 800a6f4:	4613      	mov	r3, r2
 800a6f6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800a6f8:	88fb      	ldrh	r3, [r7, #6]
 800a6fa:	3302      	adds	r3, #2
 800a6fc:	2b44      	cmp	r3, #68	@ 0x44
 800a6fe:	d906      	bls.n	800a70e <dhcp_option_short+0x26>
 800a700:	4b0f      	ldr	r3, [pc, #60]	@ (800a740 <dhcp_option_short+0x58>)
 800a702:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 800a706:	490f      	ldr	r1, [pc, #60]	@ (800a744 <dhcp_option_short+0x5c>)
 800a708:	480f      	ldr	r0, [pc, #60]	@ (800a748 <dhcp_option_short+0x60>)
 800a70a:	f003 f90d 	bl	800d928 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800a70e:	88bb      	ldrh	r3, [r7, #4]
 800a710:	0a1b      	lsrs	r3, r3, #8
 800a712:	b29a      	uxth	r2, r3
 800a714:	88fb      	ldrh	r3, [r7, #6]
 800a716:	1c59      	adds	r1, r3, #1
 800a718:	80f9      	strh	r1, [r7, #6]
 800a71a:	4619      	mov	r1, r3
 800a71c:	683b      	ldr	r3, [r7, #0]
 800a71e:	440b      	add	r3, r1
 800a720:	b2d2      	uxtb	r2, r2
 800a722:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800a724:	88fb      	ldrh	r3, [r7, #6]
 800a726:	1c5a      	adds	r2, r3, #1
 800a728:	80fa      	strh	r2, [r7, #6]
 800a72a:	461a      	mov	r2, r3
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	4413      	add	r3, r2
 800a730:	88ba      	ldrh	r2, [r7, #4]
 800a732:	b2d2      	uxtb	r2, r2
 800a734:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800a736:	88fb      	ldrh	r3, [r7, #6]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3708      	adds	r7, #8
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	0800f5f0 	.word	0x0800f5f0
 800a744:	0800f800 	.word	0x0800f800
 800a748:	0800f650 	.word	0x0800f650

0800a74c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b084      	sub	sp, #16
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	60b9      	str	r1, [r7, #8]
 800a756:	607a      	str	r2, [r7, #4]
 800a758:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800a75a:	89fb      	ldrh	r3, [r7, #14]
 800a75c:	3304      	adds	r3, #4
 800a75e:	2b44      	cmp	r3, #68	@ 0x44
 800a760:	d906      	bls.n	800a770 <dhcp_option_long+0x24>
 800a762:	4b19      	ldr	r3, [pc, #100]	@ (800a7c8 <dhcp_option_long+0x7c>)
 800a764:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 800a768:	4918      	ldr	r1, [pc, #96]	@ (800a7cc <dhcp_option_long+0x80>)
 800a76a:	4819      	ldr	r0, [pc, #100]	@ (800a7d0 <dhcp_option_long+0x84>)
 800a76c:	f003 f8dc 	bl	800d928 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	0e1a      	lsrs	r2, r3, #24
 800a774:	89fb      	ldrh	r3, [r7, #14]
 800a776:	1c59      	adds	r1, r3, #1
 800a778:	81f9      	strh	r1, [r7, #14]
 800a77a:	4619      	mov	r1, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	440b      	add	r3, r1
 800a780:	b2d2      	uxtb	r2, r2
 800a782:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	0c1a      	lsrs	r2, r3, #16
 800a788:	89fb      	ldrh	r3, [r7, #14]
 800a78a:	1c59      	adds	r1, r3, #1
 800a78c:	81f9      	strh	r1, [r7, #14]
 800a78e:	4619      	mov	r1, r3
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	440b      	add	r3, r1
 800a794:	b2d2      	uxtb	r2, r2
 800a796:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	0a1a      	lsrs	r2, r3, #8
 800a79c:	89fb      	ldrh	r3, [r7, #14]
 800a79e:	1c59      	adds	r1, r3, #1
 800a7a0:	81f9      	strh	r1, [r7, #14]
 800a7a2:	4619      	mov	r1, r3
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	440b      	add	r3, r1
 800a7a8:	b2d2      	uxtb	r2, r2
 800a7aa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800a7ac:	89fb      	ldrh	r3, [r7, #14]
 800a7ae:	1c5a      	adds	r2, r3, #1
 800a7b0:	81fa      	strh	r2, [r7, #14]
 800a7b2:	461a      	mov	r2, r3
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	4413      	add	r3, r2
 800a7b8:	687a      	ldr	r2, [r7, #4]
 800a7ba:	b2d2      	uxtb	r2, r2
 800a7bc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800a7be:	89fb      	ldrh	r3, [r7, #14]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	0800f5f0 	.word	0x0800f5f0
 800a7cc:	0800f83c 	.word	0x0800f83c
 800a7d0:	0800f650 	.word	0x0800f650

0800a7d4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b090      	sub	sp, #64	@ 0x40
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800a7e6:	2208      	movs	r2, #8
 800a7e8:	2100      	movs	r1, #0
 800a7ea:	48b5      	ldr	r0, [pc, #724]	@ (800aac0 <dhcp_parse_reply+0x2ec>)
 800a7ec:	f003 f901 	bl	800d9f2 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	895b      	ldrh	r3, [r3, #10]
 800a7f4:	2b2b      	cmp	r3, #43	@ 0x2b
 800a7f6:	d802      	bhi.n	800a7fe <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800a7f8:	f06f 0301 	mvn.w	r3, #1
 800a7fc:	e2a7      	b.n	800ad4e <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800a804:	23f0      	movs	r3, #240	@ 0xf0
 800a806:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	891b      	ldrh	r3, [r3, #8]
 800a80c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800a812:	e00c      	b.n	800a82e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800a814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a816:	895b      	ldrh	r3, [r3, #10]
 800a818:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a81a:	1ad3      	subs	r3, r2, r3
 800a81c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800a81e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a820:	895b      	ldrh	r3, [r3, #10]
 800a822:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a824:	1ad3      	subs	r3, r2, r3
 800a826:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 800a828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800a82e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a830:	2b00      	cmp	r3, #0
 800a832:	d004      	beq.n	800a83e <dhcp_parse_reply+0x6a>
 800a834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a836:	895b      	ldrh	r3, [r3, #10]
 800a838:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d2ea      	bcs.n	800a814 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800a83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a840:	2b00      	cmp	r3, #0
 800a842:	d102      	bne.n	800a84a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800a844:	f06f 0301 	mvn.w	r3, #1
 800a848:	e281      	b.n	800ad4e <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 800a84a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a84c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 800a84e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a850:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 800a852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800a858:	e239      	b.n	800acce <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 800a85a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a85c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a85e:	4413      	add	r3, r2
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800a864:	2300      	movs	r3, #0
 800a866:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 800a86a:	f04f 33ff 	mov.w	r3, #4294967295
 800a86e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800a870:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a872:	3302      	adds	r3, #2
 800a874:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800a876:	8bfa      	ldrh	r2, [r7, #30]
 800a878:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a87a:	429a      	cmp	r2, r3
 800a87c:	d202      	bcs.n	800a884 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800a87e:	f06f 0301 	mvn.w	r3, #1
 800a882:	e264      	b.n	800ad4e <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800a884:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a886:	3301      	adds	r3, #1
 800a888:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a88a:	8952      	ldrh	r2, [r2, #10]
 800a88c:	4293      	cmp	r3, r2
 800a88e:	da07      	bge.n	800a8a0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800a890:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800a892:	3301      	adds	r3, #1
 800a894:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a896:	4413      	add	r3, r2
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a89e:	e00b      	b.n	800a8b8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800a8a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d004      	beq.n	800a8b2 <dhcp_parse_reply+0xde>
 800a8a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	685b      	ldr	r3, [r3, #4]
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	e000      	b.n	800a8b4 <dhcp_parse_reply+0xe0>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800a8b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	2b3b      	cmp	r3, #59	@ 0x3b
 800a8c4:	f200 812c 	bhi.w	800ab20 <dhcp_parse_reply+0x34c>
 800a8c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d0 <dhcp_parse_reply+0xfc>)
 800a8ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ce:	bf00      	nop
 800a8d0:	0800a9c1 	.word	0x0800a9c1
 800a8d4:	0800a9d1 	.word	0x0800a9d1
 800a8d8:	0800ab21 	.word	0x0800ab21
 800a8dc:	0800a9f3 	.word	0x0800a9f3
 800a8e0:	0800ab21 	.word	0x0800ab21
 800a8e4:	0800ab21 	.word	0x0800ab21
 800a8e8:	0800ab21 	.word	0x0800ab21
 800a8ec:	0800ab21 	.word	0x0800ab21
 800a8f0:	0800ab21 	.word	0x0800ab21
 800a8f4:	0800ab21 	.word	0x0800ab21
 800a8f8:	0800ab21 	.word	0x0800ab21
 800a8fc:	0800ab21 	.word	0x0800ab21
 800a900:	0800ab21 	.word	0x0800ab21
 800a904:	0800ab21 	.word	0x0800ab21
 800a908:	0800ab21 	.word	0x0800ab21
 800a90c:	0800ab21 	.word	0x0800ab21
 800a910:	0800ab21 	.word	0x0800ab21
 800a914:	0800ab21 	.word	0x0800ab21
 800a918:	0800ab21 	.word	0x0800ab21
 800a91c:	0800ab21 	.word	0x0800ab21
 800a920:	0800ab21 	.word	0x0800ab21
 800a924:	0800ab21 	.word	0x0800ab21
 800a928:	0800ab21 	.word	0x0800ab21
 800a92c:	0800ab21 	.word	0x0800ab21
 800a930:	0800ab21 	.word	0x0800ab21
 800a934:	0800ab21 	.word	0x0800ab21
 800a938:	0800ab21 	.word	0x0800ab21
 800a93c:	0800ab21 	.word	0x0800ab21
 800a940:	0800ab21 	.word	0x0800ab21
 800a944:	0800ab21 	.word	0x0800ab21
 800a948:	0800ab21 	.word	0x0800ab21
 800a94c:	0800ab21 	.word	0x0800ab21
 800a950:	0800ab21 	.word	0x0800ab21
 800a954:	0800ab21 	.word	0x0800ab21
 800a958:	0800ab21 	.word	0x0800ab21
 800a95c:	0800ab21 	.word	0x0800ab21
 800a960:	0800ab21 	.word	0x0800ab21
 800a964:	0800ab21 	.word	0x0800ab21
 800a968:	0800ab21 	.word	0x0800ab21
 800a96c:	0800ab21 	.word	0x0800ab21
 800a970:	0800ab21 	.word	0x0800ab21
 800a974:	0800ab21 	.word	0x0800ab21
 800a978:	0800ab21 	.word	0x0800ab21
 800a97c:	0800ab21 	.word	0x0800ab21
 800a980:	0800ab21 	.word	0x0800ab21
 800a984:	0800ab21 	.word	0x0800ab21
 800a988:	0800ab21 	.word	0x0800ab21
 800a98c:	0800ab21 	.word	0x0800ab21
 800a990:	0800ab21 	.word	0x0800ab21
 800a994:	0800ab21 	.word	0x0800ab21
 800a998:	0800ab21 	.word	0x0800ab21
 800a99c:	0800aa1f 	.word	0x0800aa1f
 800a9a0:	0800aa41 	.word	0x0800aa41
 800a9a4:	0800aa7d 	.word	0x0800aa7d
 800a9a8:	0800aa9f 	.word	0x0800aa9f
 800a9ac:	0800ab21 	.word	0x0800ab21
 800a9b0:	0800ab21 	.word	0x0800ab21
 800a9b4:	0800ab21 	.word	0x0800ab21
 800a9b8:	0800aadd 	.word	0x0800aadd
 800a9bc:	0800aaff 	.word	0x0800aaff
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800a9c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 800a9ce:	e0ab      	b.n	800ab28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800a9d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a9d4:	2b04      	cmp	r3, #4
 800a9d6:	d009      	beq.n	800a9ec <dhcp_parse_reply+0x218>
 800a9d8:	4b3a      	ldr	r3, [pc, #232]	@ (800aac4 <dhcp_parse_reply+0x2f0>)
 800a9da:	f240 622e 	movw	r2, #1582	@ 0x62e
 800a9de:	493a      	ldr	r1, [pc, #232]	@ (800aac8 <dhcp_parse_reply+0x2f4>)
 800a9e0:	483a      	ldr	r0, [pc, #232]	@ (800aacc <dhcp_parse_reply+0x2f8>)
 800a9e2:	f002 ffa1 	bl	800d928 <iprintf>
 800a9e6:	f06f 0305 	mvn.w	r3, #5
 800a9ea:	e1b0      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800a9ec:	2306      	movs	r3, #6
 800a9ee:	623b      	str	r3, [r7, #32]
        break;
 800a9f0:	e09a      	b.n	800ab28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800a9f2:	2304      	movs	r3, #4
 800a9f4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800a9f8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a9fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d209      	bcs.n	800aa18 <dhcp_parse_reply+0x244>
 800aa04:	4b2f      	ldr	r3, [pc, #188]	@ (800aac4 <dhcp_parse_reply+0x2f0>)
 800aa06:	f240 6233 	movw	r2, #1587	@ 0x633
 800aa0a:	4931      	ldr	r1, [pc, #196]	@ (800aad0 <dhcp_parse_reply+0x2fc>)
 800aa0c:	482f      	ldr	r0, [pc, #188]	@ (800aacc <dhcp_parse_reply+0x2f8>)
 800aa0e:	f002 ff8b 	bl	800d928 <iprintf>
 800aa12:	f06f 0305 	mvn.w	r3, #5
 800aa16:	e19a      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800aa18:	2307      	movs	r3, #7
 800aa1a:	623b      	str	r3, [r7, #32]
        break;
 800aa1c:	e084      	b.n	800ab28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800aa1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d009      	beq.n	800aa3a <dhcp_parse_reply+0x266>
 800aa26:	4b27      	ldr	r3, [pc, #156]	@ (800aac4 <dhcp_parse_reply+0x2f0>)
 800aa28:	f240 6241 	movw	r2, #1601	@ 0x641
 800aa2c:	4926      	ldr	r1, [pc, #152]	@ (800aac8 <dhcp_parse_reply+0x2f4>)
 800aa2e:	4827      	ldr	r0, [pc, #156]	@ (800aacc <dhcp_parse_reply+0x2f8>)
 800aa30:	f002 ff7a 	bl	800d928 <iprintf>
 800aa34:	f06f 0305 	mvn.w	r3, #5
 800aa38:	e189      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800aa3a:	2303      	movs	r3, #3
 800aa3c:	623b      	str	r3, [r7, #32]
        break;
 800aa3e:	e073      	b.n	800ab28 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800aa40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa44:	2b01      	cmp	r3, #1
 800aa46:	d009      	beq.n	800aa5c <dhcp_parse_reply+0x288>
 800aa48:	4b1e      	ldr	r3, [pc, #120]	@ (800aac4 <dhcp_parse_reply+0x2f0>)
 800aa4a:	f240 624f 	movw	r2, #1615	@ 0x64f
 800aa4e:	4921      	ldr	r1, [pc, #132]	@ (800aad4 <dhcp_parse_reply+0x300>)
 800aa50:	481e      	ldr	r0, [pc, #120]	@ (800aacc <dhcp_parse_reply+0x2f8>)
 800aa52:	f002 ff69 	bl	800d928 <iprintf>
 800aa56:	f06f 0305 	mvn.w	r3, #5
 800aa5a:	e178      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800aa5c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aa5e:	2bf0      	cmp	r3, #240	@ 0xf0
 800aa60:	d009      	beq.n	800aa76 <dhcp_parse_reply+0x2a2>
 800aa62:	4b18      	ldr	r3, [pc, #96]	@ (800aac4 <dhcp_parse_reply+0x2f0>)
 800aa64:	f240 6251 	movw	r2, #1617	@ 0x651
 800aa68:	491b      	ldr	r1, [pc, #108]	@ (800aad8 <dhcp_parse_reply+0x304>)
 800aa6a:	4818      	ldr	r0, [pc, #96]	@ (800aacc <dhcp_parse_reply+0x2f8>)
 800aa6c:	f002 ff5c 	bl	800d928 <iprintf>
 800aa70:	f06f 0305 	mvn.w	r3, #5
 800aa74:	e16b      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800aa76:	2300      	movs	r3, #0
 800aa78:	623b      	str	r3, [r7, #32]
        break;
 800aa7a:	e055      	b.n	800ab28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800aa7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d009      	beq.n	800aa98 <dhcp_parse_reply+0x2c4>
 800aa84:	4b0f      	ldr	r3, [pc, #60]	@ (800aac4 <dhcp_parse_reply+0x2f0>)
 800aa86:	f240 6255 	movw	r2, #1621	@ 0x655
 800aa8a:	4912      	ldr	r1, [pc, #72]	@ (800aad4 <dhcp_parse_reply+0x300>)
 800aa8c:	480f      	ldr	r0, [pc, #60]	@ (800aacc <dhcp_parse_reply+0x2f8>)
 800aa8e:	f002 ff4b 	bl	800d928 <iprintf>
 800aa92:	f06f 0305 	mvn.w	r3, #5
 800aa96:	e15a      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800aa98:	2301      	movs	r3, #1
 800aa9a:	623b      	str	r3, [r7, #32]
        break;
 800aa9c:	e044      	b.n	800ab28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800aa9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d009      	beq.n	800aaba <dhcp_parse_reply+0x2e6>
 800aaa6:	4b07      	ldr	r3, [pc, #28]	@ (800aac4 <dhcp_parse_reply+0x2f0>)
 800aaa8:	f240 6259 	movw	r2, #1625	@ 0x659
 800aaac:	4906      	ldr	r1, [pc, #24]	@ (800aac8 <dhcp_parse_reply+0x2f4>)
 800aaae:	4807      	ldr	r0, [pc, #28]	@ (800aacc <dhcp_parse_reply+0x2f8>)
 800aab0:	f002 ff3a 	bl	800d928 <iprintf>
 800aab4:	f06f 0305 	mvn.w	r3, #5
 800aab8:	e149      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800aaba:	2302      	movs	r3, #2
 800aabc:	623b      	str	r3, [r7, #32]
        break;
 800aabe:	e033      	b.n	800ab28 <dhcp_parse_reply+0x354>
 800aac0:	200094e8 	.word	0x200094e8
 800aac4:	0800f5f0 	.word	0x0800f5f0
 800aac8:	0800f878 	.word	0x0800f878
 800aacc:	0800f650 	.word	0x0800f650
 800aad0:	0800f884 	.word	0x0800f884
 800aad4:	0800f898 	.word	0x0800f898
 800aad8:	0800f8a4 	.word	0x0800f8a4
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800aadc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d009      	beq.n	800aaf8 <dhcp_parse_reply+0x324>
 800aae4:	4b9c      	ldr	r3, [pc, #624]	@ (800ad58 <dhcp_parse_reply+0x584>)
 800aae6:	f240 625d 	movw	r2, #1629	@ 0x65d
 800aaea:	499c      	ldr	r1, [pc, #624]	@ (800ad5c <dhcp_parse_reply+0x588>)
 800aaec:	489c      	ldr	r0, [pc, #624]	@ (800ad60 <dhcp_parse_reply+0x58c>)
 800aaee:	f002 ff1b 	bl	800d928 <iprintf>
 800aaf2:	f06f 0305 	mvn.w	r3, #5
 800aaf6:	e12a      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 800aaf8:	2304      	movs	r3, #4
 800aafa:	623b      	str	r3, [r7, #32]
        break;
 800aafc:	e014      	b.n	800ab28 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800aafe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab02:	2b04      	cmp	r3, #4
 800ab04:	d009      	beq.n	800ab1a <dhcp_parse_reply+0x346>
 800ab06:	4b94      	ldr	r3, [pc, #592]	@ (800ad58 <dhcp_parse_reply+0x584>)
 800ab08:	f240 6261 	movw	r2, #1633	@ 0x661
 800ab0c:	4993      	ldr	r1, [pc, #588]	@ (800ad5c <dhcp_parse_reply+0x588>)
 800ab0e:	4894      	ldr	r0, [pc, #592]	@ (800ad60 <dhcp_parse_reply+0x58c>)
 800ab10:	f002 ff0a 	bl	800d928 <iprintf>
 800ab14:	f06f 0305 	mvn.w	r3, #5
 800ab18:	e119      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 800ab1a:	2305      	movs	r3, #5
 800ab1c:	623b      	str	r3, [r7, #32]
        break;
 800ab1e:	e003      	b.n	800ab28 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 800ab20:	2300      	movs	r3, #0
 800ab22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800ab26:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800ab28:	7dfb      	ldrb	r3, [r7, #23]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d103      	bne.n	800ab36 <dhcp_parse_reply+0x362>
      offset++;
 800ab2e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ab30:	3301      	adds	r3, #1
 800ab32:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800ab34:	e0a1      	b.n	800ac7a <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800ab36:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ab38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 800ab42:	4293      	cmp	r3, r2
 800ab44:	dd02      	ble.n	800ab4c <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 800ab46:	f06f 0301 	mvn.w	r3, #1
 800ab4a:	e100      	b.n	800ad4e <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 800ab4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab50:	b29a      	uxth	r2, r3
 800ab52:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800ab54:	4413      	add	r3, r2
 800ab56:	b29b      	uxth	r3, r3
 800ab58:	3302      	adds	r3, #2
 800ab5a:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 800ab5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	f000 808a 	beq.w	800ac7a <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800ab6a:	6a3b      	ldr	r3, [r7, #32]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	db02      	blt.n	800ab76 <dhcp_parse_reply+0x3a2>
 800ab70:	6a3b      	ldr	r3, [r7, #32]
 800ab72:	2b07      	cmp	r3, #7
 800ab74:	dd06      	ble.n	800ab84 <dhcp_parse_reply+0x3b0>
 800ab76:	4b78      	ldr	r3, [pc, #480]	@ (800ad58 <dhcp_parse_reply+0x584>)
 800ab78:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 800ab7c:	4979      	ldr	r1, [pc, #484]	@ (800ad64 <dhcp_parse_reply+0x590>)
 800ab7e:	4878      	ldr	r0, [pc, #480]	@ (800ad60 <dhcp_parse_reply+0x58c>)
 800ab80:	f002 fed2 	bl	800d928 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800ab84:	4a78      	ldr	r2, [pc, #480]	@ (800ad68 <dhcp_parse_reply+0x594>)
 800ab86:	6a3b      	ldr	r3, [r7, #32]
 800ab88:	4413      	add	r3, r2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d174      	bne.n	800ac7a <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 800ab90:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab94:	2b04      	cmp	r3, #4
 800ab96:	bf28      	it	cs
 800ab98:	2304      	movcs	r3, #4
 800ab9a:	b2db      	uxtb	r3, r3
 800ab9c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800ab9e:	8bfb      	ldrh	r3, [r7, #30]
 800aba0:	8aba      	ldrh	r2, [r7, #20]
 800aba2:	f107 0108 	add.w	r1, r7, #8
 800aba6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aba8:	f7fd fe0a 	bl	80087c0 <pbuf_copy_partial>
 800abac:	4603      	mov	r3, r0
 800abae:	461a      	mov	r2, r3
 800abb0:	8abb      	ldrh	r3, [r7, #20]
 800abb2:	4293      	cmp	r3, r2
 800abb4:	d002      	beq.n	800abbc <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 800abb6:	f06f 0301 	mvn.w	r3, #1
 800abba:	e0c8      	b.n	800ad4e <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 800abbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d933      	bls.n	800ac2c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800abc4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abc8:	f003 0303 	and.w	r3, r3, #3
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d009      	beq.n	800abe6 <dhcp_parse_reply+0x412>
 800abd2:	4b61      	ldr	r3, [pc, #388]	@ (800ad58 <dhcp_parse_reply+0x584>)
 800abd4:	f240 6281 	movw	r2, #1665	@ 0x681
 800abd8:	4964      	ldr	r1, [pc, #400]	@ (800ad6c <dhcp_parse_reply+0x598>)
 800abda:	4861      	ldr	r0, [pc, #388]	@ (800ad60 <dhcp_parse_reply+0x58c>)
 800abdc:	f002 fea4 	bl	800d928 <iprintf>
 800abe0:	f06f 0305 	mvn.w	r3, #5
 800abe4:	e0b3      	b.n	800ad4e <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 800abe6:	4a60      	ldr	r2, [pc, #384]	@ (800ad68 <dhcp_parse_reply+0x594>)
 800abe8:	6a3b      	ldr	r3, [r7, #32]
 800abea:	4413      	add	r3, r2
 800abec:	2201      	movs	r2, #1
 800abee:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fc f8e4 	bl	8006dc0 <lwip_htonl>
 800abf8:	4602      	mov	r2, r0
 800abfa:	495d      	ldr	r1, [pc, #372]	@ (800ad70 <dhcp_parse_reply+0x59c>)
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800ac02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac06:	3b04      	subs	r3, #4
 800ac08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800ac0c:	8bfb      	ldrh	r3, [r7, #30]
 800ac0e:	3304      	adds	r3, #4
 800ac10:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800ac12:	8a7a      	ldrh	r2, [r7, #18]
 800ac14:	8bfb      	ldrh	r3, [r7, #30]
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d202      	bcs.n	800ac20 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 800ac1a:	f06f 0301 	mvn.w	r3, #1
 800ac1e:	e096      	b.n	800ad4e <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 800ac20:	8a7b      	ldrh	r3, [r7, #18]
 800ac22:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800ac24:	6a3b      	ldr	r3, [r7, #32]
 800ac26:	3301      	adds	r3, #1
 800ac28:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800ac2a:	e79e      	b.n	800ab6a <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 800ac2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d106      	bne.n	800ac42 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f7fc f8c2 	bl	8006dc0 <lwip_htonl>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	60bb      	str	r3, [r7, #8]
 800ac40:	e011      	b.n	800ac66 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800ac42:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ac46:	2b01      	cmp	r3, #1
 800ac48:	d009      	beq.n	800ac5e <dhcp_parse_reply+0x48a>
 800ac4a:	4b43      	ldr	r3, [pc, #268]	@ (800ad58 <dhcp_parse_reply+0x584>)
 800ac4c:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 800ac50:	4948      	ldr	r1, [pc, #288]	@ (800ad74 <dhcp_parse_reply+0x5a0>)
 800ac52:	4843      	ldr	r0, [pc, #268]	@ (800ad60 <dhcp_parse_reply+0x58c>)
 800ac54:	f002 fe68 	bl	800d928 <iprintf>
 800ac58:	f06f 0305 	mvn.w	r3, #5
 800ac5c:	e077      	b.n	800ad4e <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 800ac5e:	f107 0308 	add.w	r3, r7, #8
 800ac62:	781b      	ldrb	r3, [r3, #0]
 800ac64:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800ac66:	4a40      	ldr	r2, [pc, #256]	@ (800ad68 <dhcp_parse_reply+0x594>)
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800ac70:	68ba      	ldr	r2, [r7, #8]
 800ac72:	493f      	ldr	r1, [pc, #252]	@ (800ad70 <dhcp_parse_reply+0x59c>)
 800ac74:	6a3b      	ldr	r3, [r7, #32]
 800ac76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800ac7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac7c:	895b      	ldrh	r3, [r3, #10]
 800ac7e:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d324      	bcc.n	800acce <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 800ac84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac86:	895b      	ldrh	r3, [r3, #10]
 800ac88:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800ac8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac90:	895b      	ldrh	r3, [r3, #10]
 800ac92:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 800ac98:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800ac9a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d213      	bcs.n	800acc8 <dhcp_parse_reply+0x4f4>
        q = q->next;
 800aca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800aca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d109      	bne.n	800acc0 <dhcp_parse_reply+0x4ec>
 800acac:	4b2a      	ldr	r3, [pc, #168]	@ (800ad58 <dhcp_parse_reply+0x584>)
 800acae:	f240 629d 	movw	r2, #1693	@ 0x69d
 800acb2:	4931      	ldr	r1, [pc, #196]	@ (800ad78 <dhcp_parse_reply+0x5a4>)
 800acb4:	482a      	ldr	r0, [pc, #168]	@ (800ad60 <dhcp_parse_reply+0x58c>)
 800acb6:	f002 fe37 	bl	800d928 <iprintf>
 800acba:	f06f 0305 	mvn.w	r3, #5
 800acbe:	e046      	b.n	800ad4e <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 800acc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acc6:	e002      	b.n	800acce <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800acc8:	f06f 0301 	mvn.w	r3, #1
 800accc:	e03f      	b.n	800ad4e <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800acce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d00a      	beq.n	800acea <dhcp_parse_reply+0x516>
 800acd4:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800acd6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800acd8:	429a      	cmp	r2, r3
 800acda:	d206      	bcs.n	800acea <dhcp_parse_reply+0x516>
 800acdc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800acde:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800ace0:	4413      	add	r3, r2
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	2bff      	cmp	r3, #255	@ 0xff
 800ace6:	f47f adb8 	bne.w	800a85a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800acea:	4b1f      	ldr	r3, [pc, #124]	@ (800ad68 <dhcp_parse_reply+0x594>)
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d018      	beq.n	800ad24 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800acf2:	4b1f      	ldr	r3, [pc, #124]	@ (800ad70 <dhcp_parse_reply+0x59c>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800acf8:	4b1b      	ldr	r3, [pc, #108]	@ (800ad68 <dhcp_parse_reply+0x594>)
 800acfa:	2200      	movs	r2, #0
 800acfc:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d102      	bne.n	800ad0a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 800ad04:	2301      	movs	r3, #1
 800ad06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ad08:	e00c      	b.n	800ad24 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2b02      	cmp	r3, #2
 800ad0e:	d102      	bne.n	800ad16 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 800ad10:	2301      	movs	r3, #1
 800ad12:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad14:	e006      	b.n	800ad24 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d103      	bne.n	800ad24 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 800ad20:	2301      	movs	r3, #1
 800ad22:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800ad24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d006      	beq.n	800ad38 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 800ad2e:	236c      	movs	r3, #108	@ 0x6c
 800ad30:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800ad32:	23ec      	movs	r3, #236	@ 0xec
 800ad34:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800ad36:	e56a      	b.n	800a80e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 800ad38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d006      	beq.n	800ad4c <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 800ad42:	232c      	movs	r3, #44	@ 0x2c
 800ad44:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800ad46:	236c      	movs	r3, #108	@ 0x6c
 800ad48:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 800ad4a:	e560      	b.n	800a80e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3740      	adds	r7, #64	@ 0x40
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
 800ad56:	bf00      	nop
 800ad58:	0800f5f0 	.word	0x0800f5f0
 800ad5c:	0800f878 	.word	0x0800f878
 800ad60:	0800f650 	.word	0x0800f650
 800ad64:	0800f8bc 	.word	0x0800f8bc
 800ad68:	200094e8 	.word	0x200094e8
 800ad6c:	0800f8d0 	.word	0x0800f8d0
 800ad70:	200094c8 	.word	0x200094c8
 800ad74:	0800f8e8 	.word	0x0800f8e8
 800ad78:	0800f8fc 	.word	0x0800f8fc

0800ad7c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b08a      	sub	sp, #40	@ 0x28
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	60f8      	str	r0, [r7, #12]
 800ad84:	60b9      	str	r1, [r7, #8]
 800ad86:	607a      	str	r2, [r7, #4]
 800ad88:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800ad8a:	4b60      	ldr	r3, [pc, #384]	@ (800af0c <dhcp_recv+0x190>)
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ad90:	6a3b      	ldr	r3, [r7, #32]
 800ad92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad94:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800ad9c:	69fb      	ldr	r3, [r7, #28]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	f000 809d 	beq.w	800aede <dhcp_recv+0x162>
 800ada4:	69fb      	ldr	r3, [r7, #28]
 800ada6:	791b      	ldrb	r3, [r3, #4]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 8098 	beq.w	800aede <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	895b      	ldrh	r3, [r3, #10]
 800adb2:	2b2b      	cmp	r3, #43	@ 0x2b
 800adb4:	f240 8095 	bls.w	800aee2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800adb8:	69bb      	ldr	r3, [r7, #24]
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	f040 8092 	bne.w	800aee6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800adc2:	2300      	movs	r3, #0
 800adc4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800adc8:	e012      	b.n	800adf0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800adca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adce:	6a3a      	ldr	r2, [r7, #32]
 800add0:	4413      	add	r3, r2
 800add2:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 800add6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adda:	69b9      	ldr	r1, [r7, #24]
 800addc:	440b      	add	r3, r1
 800adde:	7f1b      	ldrb	r3, [r3, #28]
 800ade0:	429a      	cmp	r2, r3
 800ade2:	f040 8082 	bne.w	800aeea <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800ade6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800adea:	3301      	adds	r3, #1
 800adec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800adf6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800adfa:	429a      	cmp	r2, r3
 800adfc:	d203      	bcs.n	800ae06 <dhcp_recv+0x8a>
 800adfe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ae02:	2b05      	cmp	r3, #5
 800ae04:	d9e1      	bls.n	800adca <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f7fb ffd8 	bl	8006dc0 <lwip_htonl>
 800ae10:	4602      	mov	r2, r0
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	429a      	cmp	r2, r3
 800ae18:	d169      	bne.n	800aeee <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800ae1a:	69f9      	ldr	r1, [r7, #28]
 800ae1c:	6878      	ldr	r0, [r7, #4]
 800ae1e:	f7ff fcd9 	bl	800a7d4 <dhcp_parse_reply>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d164      	bne.n	800aef2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800ae28:	4b39      	ldr	r3, [pc, #228]	@ (800af10 <dhcp_recv+0x194>)
 800ae2a:	785b      	ldrb	r3, [r3, #1]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d062      	beq.n	800aef6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800ae36:	4b37      	ldr	r3, [pc, #220]	@ (800af14 <dhcp_recv+0x198>)
 800ae38:	685b      	ldr	r3, [r3, #4]
 800ae3a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800ae3c:	7cfb      	ldrb	r3, [r7, #19]
 800ae3e:	2b05      	cmp	r3, #5
 800ae40:	d12a      	bne.n	800ae98 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	795b      	ldrb	r3, [r3, #5]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d112      	bne.n	800ae70 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800ae4a:	6979      	ldr	r1, [r7, #20]
 800ae4c:	6a38      	ldr	r0, [r7, #32]
 800ae4e:	f7fe fe1d 	bl	8009a8c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800ae52:	6a3b      	ldr	r3, [r7, #32]
 800ae54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ae58:	f003 0308 	and.w	r3, r3, #8
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d003      	beq.n	800ae68 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800ae60:	6a38      	ldr	r0, [r7, #32]
 800ae62:	f7fe fb8b 	bl	800957c <dhcp_check>
 800ae66:	e049      	b.n	800aefc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800ae68:	6a38      	ldr	r0, [r7, #32]
 800ae6a:	f7ff f86d 	bl	8009f48 <dhcp_bind>
 800ae6e:	e045      	b.n	800aefc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ae70:	69fb      	ldr	r3, [r7, #28]
 800ae72:	795b      	ldrb	r3, [r3, #5]
 800ae74:	2b03      	cmp	r3, #3
 800ae76:	d007      	beq.n	800ae88 <dhcp_recv+0x10c>
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	795b      	ldrb	r3, [r3, #5]
 800ae7c:	2b04      	cmp	r3, #4
 800ae7e:	d003      	beq.n	800ae88 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800ae80:	69fb      	ldr	r3, [r7, #28]
 800ae82:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800ae84:	2b05      	cmp	r3, #5
 800ae86:	d139      	bne.n	800aefc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 800ae88:	6979      	ldr	r1, [r7, #20]
 800ae8a:	6a38      	ldr	r0, [r7, #32]
 800ae8c:	f7fe fdfe 	bl	8009a8c <dhcp_handle_ack>
      dhcp_bind(netif);
 800ae90:	6a38      	ldr	r0, [r7, #32]
 800ae92:	f7ff f859 	bl	8009f48 <dhcp_bind>
 800ae96:	e031      	b.n	800aefc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800ae98:	7cfb      	ldrb	r3, [r7, #19]
 800ae9a:	2b06      	cmp	r3, #6
 800ae9c:	d113      	bne.n	800aec6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800aea2:	2b03      	cmp	r3, #3
 800aea4:	d00b      	beq.n	800aebe <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800aea6:	69fb      	ldr	r3, [r7, #28]
 800aea8:	795b      	ldrb	r3, [r3, #5]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d007      	beq.n	800aebe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d003      	beq.n	800aebe <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	795b      	ldrb	r3, [r3, #5]
 800aeba:	2b05      	cmp	r3, #5
 800aebc:	d103      	bne.n	800aec6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800aebe:	6a38      	ldr	r0, [r7, #32]
 800aec0:	f7fe fb42 	bl	8009548 <dhcp_handle_nak>
 800aec4:	e01a      	b.n	800aefc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800aec6:	7cfb      	ldrb	r3, [r7, #19]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	d116      	bne.n	800aefa <dhcp_recv+0x17e>
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	795b      	ldrb	r3, [r3, #5]
 800aed0:	2b06      	cmp	r3, #6
 800aed2:	d112      	bne.n	800aefa <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800aed4:	6979      	ldr	r1, [r7, #20]
 800aed6:	6a38      	ldr	r0, [r7, #32]
 800aed8:	f7fe fb84 	bl	80095e4 <dhcp_handle_offer>
 800aedc:	e00e      	b.n	800aefc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800aede:	bf00      	nop
 800aee0:	e00c      	b.n	800aefc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800aee2:	bf00      	nop
 800aee4:	e00a      	b.n	800aefc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800aee6:	bf00      	nop
 800aee8:	e008      	b.n	800aefc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 800aeea:	bf00      	nop
 800aeec:	e006      	b.n	800aefc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800aeee:	bf00      	nop
 800aef0:	e004      	b.n	800aefc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800aef2:	bf00      	nop
 800aef4:	e002      	b.n	800aefc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 800aef6:	bf00      	nop
 800aef8:	e000      	b.n	800aefc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 800aefa:	bf00      	nop
  pbuf_free(p);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7fd fa65 	bl	80083cc <pbuf_free>
}
 800af02:	bf00      	nop
 800af04:	3728      	adds	r7, #40	@ 0x28
 800af06:	46bd      	mov	sp, r7
 800af08:	bd80      	pop	{r7, pc}
 800af0a:	bf00      	nop
 800af0c:	20006a94 	.word	0x20006a94
 800af10:	200094e8 	.word	0x200094e8
 800af14:	200094c8 	.word	0x200094c8

0800af18 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b088      	sub	sp, #32
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	60f8      	str	r0, [r7, #12]
 800af20:	60b9      	str	r1, [r7, #8]
 800af22:	603b      	str	r3, [r7, #0]
 800af24:	4613      	mov	r3, r2
 800af26:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d108      	bne.n	800af40 <dhcp_create_msg+0x28>
 800af2e:	4b5f      	ldr	r3, [pc, #380]	@ (800b0ac <dhcp_create_msg+0x194>)
 800af30:	f240 7269 	movw	r2, #1897	@ 0x769
 800af34:	495e      	ldr	r1, [pc, #376]	@ (800b0b0 <dhcp_create_msg+0x198>)
 800af36:	485f      	ldr	r0, [pc, #380]	@ (800b0b4 <dhcp_create_msg+0x19c>)
 800af38:	f002 fcf6 	bl	800d928 <iprintf>
 800af3c:	2300      	movs	r3, #0
 800af3e:	e0b1      	b.n	800b0a4 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d108      	bne.n	800af58 <dhcp_create_msg+0x40>
 800af46:	4b59      	ldr	r3, [pc, #356]	@ (800b0ac <dhcp_create_msg+0x194>)
 800af48:	f240 726a 	movw	r2, #1898	@ 0x76a
 800af4c:	495a      	ldr	r1, [pc, #360]	@ (800b0b8 <dhcp_create_msg+0x1a0>)
 800af4e:	4859      	ldr	r0, [pc, #356]	@ (800b0b4 <dhcp_create_msg+0x19c>)
 800af50:	f002 fcea 	bl	800d928 <iprintf>
 800af54:	2300      	movs	r3, #0
 800af56:	e0a5      	b.n	800b0a4 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800af58:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800af5c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 800af60:	2036      	movs	r0, #54	@ 0x36
 800af62:	f7fc ff51 	bl	8007e08 <pbuf_alloc>
 800af66:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800af68:	69bb      	ldr	r3, [r7, #24]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d101      	bne.n	800af72 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800af6e:	2300      	movs	r3, #0
 800af70:	e098      	b.n	800b0a4 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800af72:	69bb      	ldr	r3, [r7, #24]
 800af74:	895b      	ldrh	r3, [r3, #10]
 800af76:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 800af7a:	d206      	bcs.n	800af8a <dhcp_create_msg+0x72>
 800af7c:	4b4b      	ldr	r3, [pc, #300]	@ (800b0ac <dhcp_create_msg+0x194>)
 800af7e:	f240 7271 	movw	r2, #1905	@ 0x771
 800af82:	494e      	ldr	r1, [pc, #312]	@ (800b0bc <dhcp_create_msg+0x1a4>)
 800af84:	484b      	ldr	r0, [pc, #300]	@ (800b0b4 <dhcp_create_msg+0x19c>)
 800af86:	f002 fccf 	bl	800d928 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800af8a:	79fb      	ldrb	r3, [r7, #7]
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d103      	bne.n	800af98 <dhcp_create_msg+0x80>
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	795b      	ldrb	r3, [r3, #5]
 800af94:	2b03      	cmp	r3, #3
 800af96:	d10d      	bne.n	800afb4 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	799b      	ldrb	r3, [r3, #6]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d105      	bne.n	800afac <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800afa0:	f002 fbc2 	bl	800d728 <rand>
 800afa4:	4603      	mov	r3, r0
 800afa6:	461a      	mov	r2, r3
 800afa8:	4b45      	ldr	r3, [pc, #276]	@ (800b0c0 <dhcp_create_msg+0x1a8>)
 800afaa:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800afac:	4b44      	ldr	r3, [pc, #272]	@ (800b0c0 <dhcp_create_msg+0x1a8>)
 800afae:	681a      	ldr	r2, [r3, #0]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800afb4:	69bb      	ldr	r3, [r7, #24]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800afba:	f44f 729a 	mov.w	r2, #308	@ 0x134
 800afbe:	2100      	movs	r1, #0
 800afc0:	6978      	ldr	r0, [r7, #20]
 800afc2:	f002 fd16 	bl	800d9f2 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	2201      	movs	r2, #1
 800afca:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800afcc:	697b      	ldr	r3, [r7, #20]
 800afce:	2201      	movs	r2, #1
 800afd0:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800afdc:	68bb      	ldr	r3, [r7, #8]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	4618      	mov	r0, r3
 800afe2:	f7fb feed 	bl	8006dc0 <lwip_htonl>
 800afe6:	4602      	mov	r2, r0
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800afec:	79fb      	ldrb	r3, [r7, #7]
 800afee:	2b08      	cmp	r3, #8
 800aff0:	d010      	beq.n	800b014 <dhcp_create_msg+0xfc>
 800aff2:	79fb      	ldrb	r3, [r7, #7]
 800aff4:	2b04      	cmp	r3, #4
 800aff6:	d00d      	beq.n	800b014 <dhcp_create_msg+0xfc>
 800aff8:	79fb      	ldrb	r3, [r7, #7]
 800affa:	2b07      	cmp	r3, #7
 800affc:	d00a      	beq.n	800b014 <dhcp_create_msg+0xfc>
 800affe:	79fb      	ldrb	r3, [r7, #7]
 800b000:	2b03      	cmp	r3, #3
 800b002:	d10c      	bne.n	800b01e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800b008:	2b05      	cmp	r3, #5
 800b00a:	d003      	beq.n	800b014 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	795b      	ldrb	r3, [r3, #5]
 800b010:	2b04      	cmp	r3, #4
 800b012:	d104      	bne.n	800b01e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	3304      	adds	r3, #4
 800b018:	681a      	ldr	r2, [r3, #0]
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800b01e:	2300      	movs	r3, #0
 800b020:	83fb      	strh	r3, [r7, #30]
 800b022:	e00c      	b.n	800b03e <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800b024:	8bfa      	ldrh	r2, [r7, #30]
 800b026:	8bfb      	ldrh	r3, [r7, #30]
 800b028:	68f9      	ldr	r1, [r7, #12]
 800b02a:	440a      	add	r2, r1
 800b02c:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 800b030:	697a      	ldr	r2, [r7, #20]
 800b032:	4413      	add	r3, r2
 800b034:	460a      	mov	r2, r1
 800b036:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800b038:	8bfb      	ldrh	r3, [r7, #30]
 800b03a:	3301      	adds	r3, #1
 800b03c:	83fb      	strh	r3, [r7, #30]
 800b03e:	8bfb      	ldrh	r3, [r7, #30]
 800b040:	2b05      	cmp	r3, #5
 800b042:	d9ef      	bls.n	800b024 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	2200      	movs	r2, #0
 800b048:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800b04c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 800b050:	2200      	movs	r2, #0
 800b052:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 800b056:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 800b05a:	2200      	movs	r2, #0
 800b05c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 800b060:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 800b064:	2200      	movs	r2, #0
 800b066:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 800b06a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800b06e:	697b      	ldr	r3, [r7, #20]
 800b070:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b074:	2301      	movs	r3, #1
 800b076:	2235      	movs	r2, #53	@ 0x35
 800b078:	2000      	movs	r0, #0
 800b07a:	f7ff fadb 	bl	800a634 <dhcp_option>
 800b07e:	4603      	mov	r3, r0
 800b080:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 800b088:	79fa      	ldrb	r2, [r7, #7]
 800b08a:	8a7b      	ldrh	r3, [r7, #18]
 800b08c:	4618      	mov	r0, r3
 800b08e:	f7ff fb05 	bl	800a69c <dhcp_option_byte>
 800b092:	4603      	mov	r3, r0
 800b094:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	8a7a      	ldrh	r2, [r7, #18]
 800b0a0:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800b0a2:	69bb      	ldr	r3, [r7, #24]
}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3720      	adds	r7, #32
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}
 800b0ac:	0800f5f0 	.word	0x0800f5f0
 800b0b0:	0800f910 	.word	0x0800f910
 800b0b4:	0800f650 	.word	0x0800f650
 800b0b8:	0800f930 	.word	0x0800f930
 800b0bc:	0800f950 	.word	0x0800f950
 800b0c0:	200094f8 	.word	0x200094f8

0800b0c4 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b084      	sub	sp, #16
 800b0c8:	af00      	add	r7, sp, #0
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	60b9      	str	r1, [r7, #8]
 800b0ce:	607a      	str	r2, [r7, #4]
 800b0d0:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800b0d2:	89fb      	ldrh	r3, [r7, #14]
 800b0d4:	1c5a      	adds	r2, r3, #1
 800b0d6:	81fa      	strh	r2, [r7, #14]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	4413      	add	r3, r2
 800b0de:	22ff      	movs	r2, #255	@ 0xff
 800b0e0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800b0e2:	e007      	b.n	800b0f4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800b0e4:	89fb      	ldrh	r3, [r7, #14]
 800b0e6:	1c5a      	adds	r2, r3, #1
 800b0e8:	81fa      	strh	r2, [r7, #14]
 800b0ea:	461a      	mov	r2, r3
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800b0f4:	89fb      	ldrh	r3, [r7, #14]
 800b0f6:	2b43      	cmp	r3, #67	@ 0x43
 800b0f8:	d904      	bls.n	800b104 <dhcp_option_trailer+0x40>
 800b0fa:	89fb      	ldrh	r3, [r7, #14]
 800b0fc:	f003 0303 	and.w	r3, r3, #3
 800b100:	2b00      	cmp	r3, #0
 800b102:	d002      	beq.n	800b10a <dhcp_option_trailer+0x46>
 800b104:	89fb      	ldrh	r3, [r7, #14]
 800b106:	2b43      	cmp	r3, #67	@ 0x43
 800b108:	d9ec      	bls.n	800b0e4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800b10a:	89fb      	ldrh	r3, [r7, #14]
 800b10c:	33f0      	adds	r3, #240	@ 0xf0
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4619      	mov	r1, r3
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f7fc ffd4 	bl	80080c0 <pbuf_realloc>
}
 800b118:	bf00      	nop
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800b120:	b480      	push	{r7}
 800b122:	b085      	sub	sp, #20
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d017      	beq.n	800b15e <dhcp_supplied_address+0x3e>
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b132:	2b00      	cmp	r3, #0
 800b134:	d013      	beq.n	800b15e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b13a:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	795b      	ldrb	r3, [r3, #5]
 800b140:	2b0a      	cmp	r3, #10
 800b142:	d007      	beq.n	800b154 <dhcp_supplied_address+0x34>
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	795b      	ldrb	r3, [r3, #5]
 800b148:	2b05      	cmp	r3, #5
 800b14a:	d003      	beq.n	800b154 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800b150:	2b04      	cmp	r3, #4
 800b152:	d101      	bne.n	800b158 <dhcp_supplied_address+0x38>
 800b154:	2301      	movs	r3, #1
 800b156:	e000      	b.n	800b15a <dhcp_supplied_address+0x3a>
 800b158:	2300      	movs	r3, #0
 800b15a:	b2db      	uxtb	r3, r3
 800b15c:	e000      	b.n	800b160 <dhcp_supplied_address+0x40>
  }
  return 0;
 800b15e:	2300      	movs	r3, #0
}
 800b160:	4618      	mov	r0, r3
 800b162:	3714      	adds	r7, #20
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr

0800b16c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b082      	sub	sp, #8
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800b174:	4915      	ldr	r1, [pc, #84]	@ (800b1cc <etharp_free_entry+0x60>)
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	4613      	mov	r3, r2
 800b17a:	005b      	lsls	r3, r3, #1
 800b17c:	4413      	add	r3, r2
 800b17e:	00db      	lsls	r3, r3, #3
 800b180:	440b      	add	r3, r1
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d013      	beq.n	800b1b0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800b188:	4910      	ldr	r1, [pc, #64]	@ (800b1cc <etharp_free_entry+0x60>)
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	4613      	mov	r3, r2
 800b18e:	005b      	lsls	r3, r3, #1
 800b190:	4413      	add	r3, r2
 800b192:	00db      	lsls	r3, r3, #3
 800b194:	440b      	add	r3, r1
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4618      	mov	r0, r3
 800b19a:	f7fd f917 	bl	80083cc <pbuf_free>
    arp_table[i].q = NULL;
 800b19e:	490b      	ldr	r1, [pc, #44]	@ (800b1cc <etharp_free_entry+0x60>)
 800b1a0:	687a      	ldr	r2, [r7, #4]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	005b      	lsls	r3, r3, #1
 800b1a6:	4413      	add	r3, r2
 800b1a8:	00db      	lsls	r3, r3, #3
 800b1aa:	440b      	add	r3, r1
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800b1b0:	4906      	ldr	r1, [pc, #24]	@ (800b1cc <etharp_free_entry+0x60>)
 800b1b2:	687a      	ldr	r2, [r7, #4]
 800b1b4:	4613      	mov	r3, r2
 800b1b6:	005b      	lsls	r3, r3, #1
 800b1b8:	4413      	add	r3, r2
 800b1ba:	00db      	lsls	r3, r3, #3
 800b1bc:	440b      	add	r3, r1
 800b1be:	3314      	adds	r3, #20
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800b1c4:	bf00      	nop
 800b1c6:	3708      	adds	r7, #8
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}
 800b1cc:	200094fc 	.word	0x200094fc

0800b1d0 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b082      	sub	sp, #8
 800b1d4:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	607b      	str	r3, [r7, #4]
 800b1da:	e096      	b.n	800b30a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800b1dc:	494f      	ldr	r1, [pc, #316]	@ (800b31c <etharp_tmr+0x14c>)
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	005b      	lsls	r3, r3, #1
 800b1e4:	4413      	add	r3, r2
 800b1e6:	00db      	lsls	r3, r3, #3
 800b1e8:	440b      	add	r3, r1
 800b1ea:	3314      	adds	r3, #20
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800b1f0:	78fb      	ldrb	r3, [r7, #3]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f000 8086 	beq.w	800b304 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800b1f8:	4948      	ldr	r1, [pc, #288]	@ (800b31c <etharp_tmr+0x14c>)
 800b1fa:	687a      	ldr	r2, [r7, #4]
 800b1fc:	4613      	mov	r3, r2
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	4413      	add	r3, r2
 800b202:	00db      	lsls	r3, r3, #3
 800b204:	440b      	add	r3, r1
 800b206:	3312      	adds	r3, #18
 800b208:	881b      	ldrh	r3, [r3, #0]
 800b20a:	3301      	adds	r3, #1
 800b20c:	b298      	uxth	r0, r3
 800b20e:	4943      	ldr	r1, [pc, #268]	@ (800b31c <etharp_tmr+0x14c>)
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	4613      	mov	r3, r2
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4413      	add	r3, r2
 800b218:	00db      	lsls	r3, r3, #3
 800b21a:	440b      	add	r3, r1
 800b21c:	3312      	adds	r3, #18
 800b21e:	4602      	mov	r2, r0
 800b220:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b222:	493e      	ldr	r1, [pc, #248]	@ (800b31c <etharp_tmr+0x14c>)
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	4613      	mov	r3, r2
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	4413      	add	r3, r2
 800b22c:	00db      	lsls	r3, r3, #3
 800b22e:	440b      	add	r3, r1
 800b230:	3312      	adds	r3, #18
 800b232:	881b      	ldrh	r3, [r3, #0]
 800b234:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 800b238:	d215      	bcs.n	800b266 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b23a:	4938      	ldr	r1, [pc, #224]	@ (800b31c <etharp_tmr+0x14c>)
 800b23c:	687a      	ldr	r2, [r7, #4]
 800b23e:	4613      	mov	r3, r2
 800b240:	005b      	lsls	r3, r3, #1
 800b242:	4413      	add	r3, r2
 800b244:	00db      	lsls	r3, r3, #3
 800b246:	440b      	add	r3, r1
 800b248:	3314      	adds	r3, #20
 800b24a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800b24c:	2b01      	cmp	r3, #1
 800b24e:	d10e      	bne.n	800b26e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800b250:	4932      	ldr	r1, [pc, #200]	@ (800b31c <etharp_tmr+0x14c>)
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	4613      	mov	r3, r2
 800b256:	005b      	lsls	r3, r3, #1
 800b258:	4413      	add	r3, r2
 800b25a:	00db      	lsls	r3, r3, #3
 800b25c:	440b      	add	r3, r1
 800b25e:	3312      	adds	r3, #18
 800b260:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800b262:	2b04      	cmp	r3, #4
 800b264:	d903      	bls.n	800b26e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800b266:	6878      	ldr	r0, [r7, #4]
 800b268:	f7ff ff80 	bl	800b16c <etharp_free_entry>
 800b26c:	e04a      	b.n	800b304 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800b26e:	492b      	ldr	r1, [pc, #172]	@ (800b31c <etharp_tmr+0x14c>)
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	4613      	mov	r3, r2
 800b274:	005b      	lsls	r3, r3, #1
 800b276:	4413      	add	r3, r2
 800b278:	00db      	lsls	r3, r3, #3
 800b27a:	440b      	add	r3, r1
 800b27c:	3314      	adds	r3, #20
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	2b03      	cmp	r3, #3
 800b282:	d10a      	bne.n	800b29a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800b284:	4925      	ldr	r1, [pc, #148]	@ (800b31c <etharp_tmr+0x14c>)
 800b286:	687a      	ldr	r2, [r7, #4]
 800b288:	4613      	mov	r3, r2
 800b28a:	005b      	lsls	r3, r3, #1
 800b28c:	4413      	add	r3, r2
 800b28e:	00db      	lsls	r3, r3, #3
 800b290:	440b      	add	r3, r1
 800b292:	3314      	adds	r3, #20
 800b294:	2204      	movs	r2, #4
 800b296:	701a      	strb	r2, [r3, #0]
 800b298:	e034      	b.n	800b304 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800b29a:	4920      	ldr	r1, [pc, #128]	@ (800b31c <etharp_tmr+0x14c>)
 800b29c:	687a      	ldr	r2, [r7, #4]
 800b29e:	4613      	mov	r3, r2
 800b2a0:	005b      	lsls	r3, r3, #1
 800b2a2:	4413      	add	r3, r2
 800b2a4:	00db      	lsls	r3, r3, #3
 800b2a6:	440b      	add	r3, r1
 800b2a8:	3314      	adds	r3, #20
 800b2aa:	781b      	ldrb	r3, [r3, #0]
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d10a      	bne.n	800b2c6 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800b2b0:	491a      	ldr	r1, [pc, #104]	@ (800b31c <etharp_tmr+0x14c>)
 800b2b2:	687a      	ldr	r2, [r7, #4]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	005b      	lsls	r3, r3, #1
 800b2b8:	4413      	add	r3, r2
 800b2ba:	00db      	lsls	r3, r3, #3
 800b2bc:	440b      	add	r3, r1
 800b2be:	3314      	adds	r3, #20
 800b2c0:	2202      	movs	r2, #2
 800b2c2:	701a      	strb	r2, [r3, #0]
 800b2c4:	e01e      	b.n	800b304 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800b2c6:	4915      	ldr	r1, [pc, #84]	@ (800b31c <etharp_tmr+0x14c>)
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	4613      	mov	r3, r2
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	4413      	add	r3, r2
 800b2d0:	00db      	lsls	r3, r3, #3
 800b2d2:	440b      	add	r3, r1
 800b2d4:	3314      	adds	r3, #20
 800b2d6:	781b      	ldrb	r3, [r3, #0]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d113      	bne.n	800b304 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800b2dc:	490f      	ldr	r1, [pc, #60]	@ (800b31c <etharp_tmr+0x14c>)
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	4613      	mov	r3, r2
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	4413      	add	r3, r2
 800b2e6:	00db      	lsls	r3, r3, #3
 800b2e8:	440b      	add	r3, r1
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	6818      	ldr	r0, [r3, #0]
 800b2ee:	687a      	ldr	r2, [r7, #4]
 800b2f0:	4613      	mov	r3, r2
 800b2f2:	005b      	lsls	r3, r3, #1
 800b2f4:	4413      	add	r3, r2
 800b2f6:	00db      	lsls	r3, r3, #3
 800b2f8:	4a08      	ldr	r2, [pc, #32]	@ (800b31c <etharp_tmr+0x14c>)
 800b2fa:	4413      	add	r3, r2
 800b2fc:	3304      	adds	r3, #4
 800b2fe:	4619      	mov	r1, r3
 800b300:	f000 fe72 	bl	800bfe8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	3301      	adds	r3, #1
 800b308:	607b      	str	r3, [r7, #4]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	2b09      	cmp	r3, #9
 800b30e:	f77f af65 	ble.w	800b1dc <etharp_tmr+0xc>
      }
    }
  }
}
 800b312:	bf00      	nop
 800b314:	bf00      	nop
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	200094fc 	.word	0x200094fc

0800b320 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b08a      	sub	sp, #40	@ 0x28
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	460b      	mov	r3, r1
 800b32a:	607a      	str	r2, [r7, #4]
 800b32c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800b32e:	230a      	movs	r3, #10
 800b330:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800b332:	230a      	movs	r3, #10
 800b334:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800b336:	230a      	movs	r3, #10
 800b338:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 800b33a:	2300      	movs	r3, #0
 800b33c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800b33e:	230a      	movs	r3, #10
 800b340:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800b342:	2300      	movs	r3, #0
 800b344:	83bb      	strh	r3, [r7, #28]
 800b346:	2300      	movs	r3, #0
 800b348:	837b      	strh	r3, [r7, #26]
 800b34a:	2300      	movs	r3, #0
 800b34c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b34e:	2300      	movs	r3, #0
 800b350:	843b      	strh	r3, [r7, #32]
 800b352:	e0ae      	b.n	800b4b2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800b354:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b358:	49a6      	ldr	r1, [pc, #664]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b35a:	4613      	mov	r3, r2
 800b35c:	005b      	lsls	r3, r3, #1
 800b35e:	4413      	add	r3, r2
 800b360:	00db      	lsls	r3, r3, #3
 800b362:	440b      	add	r3, r1
 800b364:	3314      	adds	r3, #20
 800b366:	781b      	ldrb	r3, [r3, #0]
 800b368:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800b36a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b36e:	2b0a      	cmp	r3, #10
 800b370:	d105      	bne.n	800b37e <etharp_find_entry+0x5e>
 800b372:	7dfb      	ldrb	r3, [r7, #23]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800b378:	8c3b      	ldrh	r3, [r7, #32]
 800b37a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800b37c:	e095      	b.n	800b4aa <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800b37e:	7dfb      	ldrb	r3, [r7, #23]
 800b380:	2b00      	cmp	r3, #0
 800b382:	f000 8092 	beq.w	800b4aa <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d009      	beq.n	800b3a0 <etharp_find_entry+0x80>
 800b38c:	7dfb      	ldrb	r3, [r7, #23]
 800b38e:	2b01      	cmp	r3, #1
 800b390:	d806      	bhi.n	800b3a0 <etharp_find_entry+0x80>
 800b392:	4b99      	ldr	r3, [pc, #612]	@ (800b5f8 <etharp_find_entry+0x2d8>)
 800b394:	f240 1223 	movw	r2, #291	@ 0x123
 800b398:	4998      	ldr	r1, [pc, #608]	@ (800b5fc <etharp_find_entry+0x2dc>)
 800b39a:	4899      	ldr	r0, [pc, #612]	@ (800b600 <etharp_find_entry+0x2e0>)
 800b39c:	f002 fac4 	bl	800d928 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d020      	beq.n	800b3e8 <etharp_find_entry+0xc8>
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	6819      	ldr	r1, [r3, #0]
 800b3aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3ae:	4891      	ldr	r0, [pc, #580]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	005b      	lsls	r3, r3, #1
 800b3b4:	4413      	add	r3, r2
 800b3b6:	00db      	lsls	r3, r3, #3
 800b3b8:	4403      	add	r3, r0
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	4299      	cmp	r1, r3
 800b3c0:	d112      	bne.n	800b3e8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00c      	beq.n	800b3e2 <etharp_find_entry+0xc2>
 800b3c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3cc:	4989      	ldr	r1, [pc, #548]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b3ce:	4613      	mov	r3, r2
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	4413      	add	r3, r2
 800b3d4:	00db      	lsls	r3, r3, #3
 800b3d6:	440b      	add	r3, r1
 800b3d8:	3308      	adds	r3, #8
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	687a      	ldr	r2, [r7, #4]
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d102      	bne.n	800b3e8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800b3e2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b3e6:	e100      	b.n	800b5ea <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800b3e8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ea:	2b01      	cmp	r3, #1
 800b3ec:	d140      	bne.n	800b470 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800b3ee:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b3f2:	4980      	ldr	r1, [pc, #512]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	4413      	add	r3, r2
 800b3fa:	00db      	lsls	r3, r3, #3
 800b3fc:	440b      	add	r3, r1
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d01a      	beq.n	800b43a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800b404:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b408:	497a      	ldr	r1, [pc, #488]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b40a:	4613      	mov	r3, r2
 800b40c:	005b      	lsls	r3, r3, #1
 800b40e:	4413      	add	r3, r2
 800b410:	00db      	lsls	r3, r3, #3
 800b412:	440b      	add	r3, r1
 800b414:	3312      	adds	r3, #18
 800b416:	881b      	ldrh	r3, [r3, #0]
 800b418:	8bba      	ldrh	r2, [r7, #28]
 800b41a:	429a      	cmp	r2, r3
 800b41c:	d845      	bhi.n	800b4aa <etharp_find_entry+0x18a>
            old_queue = i;
 800b41e:	8c3b      	ldrh	r3, [r7, #32]
 800b420:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800b422:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b426:	4973      	ldr	r1, [pc, #460]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b428:	4613      	mov	r3, r2
 800b42a:	005b      	lsls	r3, r3, #1
 800b42c:	4413      	add	r3, r2
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	440b      	add	r3, r1
 800b432:	3312      	adds	r3, #18
 800b434:	881b      	ldrh	r3, [r3, #0]
 800b436:	83bb      	strh	r3, [r7, #28]
 800b438:	e037      	b.n	800b4aa <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800b43a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b43e:	496d      	ldr	r1, [pc, #436]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b440:	4613      	mov	r3, r2
 800b442:	005b      	lsls	r3, r3, #1
 800b444:	4413      	add	r3, r2
 800b446:	00db      	lsls	r3, r3, #3
 800b448:	440b      	add	r3, r1
 800b44a:	3312      	adds	r3, #18
 800b44c:	881b      	ldrh	r3, [r3, #0]
 800b44e:	8b7a      	ldrh	r2, [r7, #26]
 800b450:	429a      	cmp	r2, r3
 800b452:	d82a      	bhi.n	800b4aa <etharp_find_entry+0x18a>
            old_pending = i;
 800b454:	8c3b      	ldrh	r3, [r7, #32]
 800b456:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 800b458:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b45c:	4965      	ldr	r1, [pc, #404]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b45e:	4613      	mov	r3, r2
 800b460:	005b      	lsls	r3, r3, #1
 800b462:	4413      	add	r3, r2
 800b464:	00db      	lsls	r3, r3, #3
 800b466:	440b      	add	r3, r1
 800b468:	3312      	adds	r3, #18
 800b46a:	881b      	ldrh	r3, [r3, #0]
 800b46c:	837b      	strh	r3, [r7, #26]
 800b46e:	e01c      	b.n	800b4aa <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800b470:	7dfb      	ldrb	r3, [r7, #23]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d919      	bls.n	800b4aa <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800b476:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b47a:	495e      	ldr	r1, [pc, #376]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b47c:	4613      	mov	r3, r2
 800b47e:	005b      	lsls	r3, r3, #1
 800b480:	4413      	add	r3, r2
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	440b      	add	r3, r1
 800b486:	3312      	adds	r3, #18
 800b488:	881b      	ldrh	r3, [r3, #0]
 800b48a:	8b3a      	ldrh	r2, [r7, #24]
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d80c      	bhi.n	800b4aa <etharp_find_entry+0x18a>
            old_stable = i;
 800b490:	8c3b      	ldrh	r3, [r7, #32]
 800b492:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 800b494:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b498:	4956      	ldr	r1, [pc, #344]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b49a:	4613      	mov	r3, r2
 800b49c:	005b      	lsls	r3, r3, #1
 800b49e:	4413      	add	r3, r2
 800b4a0:	00db      	lsls	r3, r3, #3
 800b4a2:	440b      	add	r3, r1
 800b4a4:	3312      	adds	r3, #18
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b4aa:	8c3b      	ldrh	r3, [r7, #32]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	843b      	strh	r3, [r7, #32]
 800b4b2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b4b6:	2b09      	cmp	r3, #9
 800b4b8:	f77f af4c 	ble.w	800b354 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800b4bc:	7afb      	ldrb	r3, [r7, #11]
 800b4be:	f003 0302 	and.w	r3, r3, #2
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d108      	bne.n	800b4d8 <etharp_find_entry+0x1b8>
 800b4c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b4ca:	2b0a      	cmp	r3, #10
 800b4cc:	d107      	bne.n	800b4de <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800b4ce:	7afb      	ldrb	r3, [r7, #11]
 800b4d0:	f003 0301 	and.w	r3, r3, #1
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d102      	bne.n	800b4de <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800b4d8:	f04f 33ff 	mov.w	r3, #4294967295
 800b4dc:	e085      	b.n	800b5ea <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800b4de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800b4e2:	2b09      	cmp	r3, #9
 800b4e4:	dc02      	bgt.n	800b4ec <etharp_find_entry+0x1cc>
    i = empty;
 800b4e6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b4e8:	843b      	strh	r3, [r7, #32]
 800b4ea:	e039      	b.n	800b560 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800b4ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800b4f0:	2b09      	cmp	r3, #9
 800b4f2:	dc14      	bgt.n	800b51e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800b4f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b4f6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800b4f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b4fc:	493d      	ldr	r1, [pc, #244]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b4fe:	4613      	mov	r3, r2
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	4413      	add	r3, r2
 800b504:	00db      	lsls	r3, r3, #3
 800b506:	440b      	add	r3, r1
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d018      	beq.n	800b540 <etharp_find_entry+0x220>
 800b50e:	4b3a      	ldr	r3, [pc, #232]	@ (800b5f8 <etharp_find_entry+0x2d8>)
 800b510:	f240 126d 	movw	r2, #365	@ 0x16d
 800b514:	493b      	ldr	r1, [pc, #236]	@ (800b604 <etharp_find_entry+0x2e4>)
 800b516:	483a      	ldr	r0, [pc, #232]	@ (800b600 <etharp_find_entry+0x2e0>)
 800b518:	f002 fa06 	bl	800d928 <iprintf>
 800b51c:	e010      	b.n	800b540 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800b51e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 800b522:	2b09      	cmp	r3, #9
 800b524:	dc02      	bgt.n	800b52c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800b526:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b528:	843b      	strh	r3, [r7, #32]
 800b52a:	e009      	b.n	800b540 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800b52c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800b530:	2b09      	cmp	r3, #9
 800b532:	dc02      	bgt.n	800b53a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800b534:	8bfb      	ldrh	r3, [r7, #30]
 800b536:	843b      	strh	r3, [r7, #32]
 800b538:	e002      	b.n	800b540 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800b53a:	f04f 33ff 	mov.w	r3, #4294967295
 800b53e:	e054      	b.n	800b5ea <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b540:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b544:	2b09      	cmp	r3, #9
 800b546:	dd06      	ble.n	800b556 <etharp_find_entry+0x236>
 800b548:	4b2b      	ldr	r3, [pc, #172]	@ (800b5f8 <etharp_find_entry+0x2d8>)
 800b54a:	f240 127f 	movw	r2, #383	@ 0x17f
 800b54e:	492e      	ldr	r1, [pc, #184]	@ (800b608 <etharp_find_entry+0x2e8>)
 800b550:	482b      	ldr	r0, [pc, #172]	@ (800b600 <etharp_find_entry+0x2e0>)
 800b552:	f002 f9e9 	bl	800d928 <iprintf>
    etharp_free_entry(i);
 800b556:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff fe06 	bl	800b16c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800b560:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800b564:	2b09      	cmp	r3, #9
 800b566:	dd06      	ble.n	800b576 <etharp_find_entry+0x256>
 800b568:	4b23      	ldr	r3, [pc, #140]	@ (800b5f8 <etharp_find_entry+0x2d8>)
 800b56a:	f240 1283 	movw	r2, #387	@ 0x183
 800b56e:	4926      	ldr	r1, [pc, #152]	@ (800b608 <etharp_find_entry+0x2e8>)
 800b570:	4823      	ldr	r0, [pc, #140]	@ (800b600 <etharp_find_entry+0x2e0>)
 800b572:	f002 f9d9 	bl	800d928 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800b576:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b57a:	491e      	ldr	r1, [pc, #120]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b57c:	4613      	mov	r3, r2
 800b57e:	005b      	lsls	r3, r3, #1
 800b580:	4413      	add	r3, r2
 800b582:	00db      	lsls	r3, r3, #3
 800b584:	440b      	add	r3, r1
 800b586:	3314      	adds	r3, #20
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d006      	beq.n	800b59c <etharp_find_entry+0x27c>
 800b58e:	4b1a      	ldr	r3, [pc, #104]	@ (800b5f8 <etharp_find_entry+0x2d8>)
 800b590:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 800b594:	491d      	ldr	r1, [pc, #116]	@ (800b60c <etharp_find_entry+0x2ec>)
 800b596:	481a      	ldr	r0, [pc, #104]	@ (800b600 <etharp_find_entry+0x2e0>)
 800b598:	f002 f9c6 	bl	800d928 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800b5a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6819      	ldr	r1, [r3, #0]
 800b5aa:	4812      	ldr	r0, [pc, #72]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b5ac:	4613      	mov	r3, r2
 800b5ae:	005b      	lsls	r3, r3, #1
 800b5b0:	4413      	add	r3, r2
 800b5b2:	00db      	lsls	r3, r3, #3
 800b5b4:	4403      	add	r3, r0
 800b5b6:	3304      	adds	r3, #4
 800b5b8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800b5ba:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5be:	490d      	ldr	r1, [pc, #52]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b5c0:	4613      	mov	r3, r2
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	4413      	add	r3, r2
 800b5c6:	00db      	lsls	r3, r3, #3
 800b5c8:	440b      	add	r3, r1
 800b5ca:	3312      	adds	r3, #18
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800b5d0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800b5d4:	4907      	ldr	r1, [pc, #28]	@ (800b5f4 <etharp_find_entry+0x2d4>)
 800b5d6:	4613      	mov	r3, r2
 800b5d8:	005b      	lsls	r3, r3, #1
 800b5da:	4413      	add	r3, r2
 800b5dc:	00db      	lsls	r3, r3, #3
 800b5de:	440b      	add	r3, r1
 800b5e0:	3308      	adds	r3, #8
 800b5e2:	687a      	ldr	r2, [r7, #4]
 800b5e4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800b5e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	3728      	adds	r7, #40	@ 0x28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}
 800b5f2:	bf00      	nop
 800b5f4:	200094fc 	.word	0x200094fc
 800b5f8:	0800f990 	.word	0x0800f990
 800b5fc:	0800f9c8 	.word	0x0800f9c8
 800b600:	0800fa08 	.word	0x0800fa08
 800b604:	0800fa30 	.word	0x0800fa30
 800b608:	0800fa48 	.word	0x0800fa48
 800b60c:	0800fa5c 	.word	0x0800fa5c

0800b610 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b088      	sub	sp, #32
 800b614:	af02      	add	r7, sp, #8
 800b616:	60f8      	str	r0, [r7, #12]
 800b618:	60b9      	str	r1, [r7, #8]
 800b61a:	607a      	str	r2, [r7, #4]
 800b61c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b624:	2b06      	cmp	r3, #6
 800b626:	d006      	beq.n	800b636 <etharp_update_arp_entry+0x26>
 800b628:	4b48      	ldr	r3, [pc, #288]	@ (800b74c <etharp_update_arp_entry+0x13c>)
 800b62a:	f240 12a9 	movw	r2, #425	@ 0x1a9
 800b62e:	4948      	ldr	r1, [pc, #288]	@ (800b750 <etharp_update_arp_entry+0x140>)
 800b630:	4848      	ldr	r0, [pc, #288]	@ (800b754 <etharp_update_arp_entry+0x144>)
 800b632:	f002 f979 	bl	800d928 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d012      	beq.n	800b662 <etharp_update_arp_entry+0x52>
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d00e      	beq.n	800b662 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	68f9      	ldr	r1, [r7, #12]
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 f916 	bl	800c87c <ip4_addr_isbroadcast_u32>
 800b650:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800b652:	2b00      	cmp	r3, #0
 800b654:	d105      	bne.n	800b662 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800b65e:	2be0      	cmp	r3, #224	@ 0xe0
 800b660:	d102      	bne.n	800b668 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800b662:	f06f 030f 	mvn.w	r3, #15
 800b666:	e06c      	b.n	800b742 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800b668:	78fb      	ldrb	r3, [r7, #3]
 800b66a:	68fa      	ldr	r2, [r7, #12]
 800b66c:	4619      	mov	r1, r3
 800b66e:	68b8      	ldr	r0, [r7, #8]
 800b670:	f7ff fe56 	bl	800b320 <etharp_find_entry>
 800b674:	4603      	mov	r3, r0
 800b676:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800b678:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	da02      	bge.n	800b686 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800b680:	8afb      	ldrh	r3, [r7, #22]
 800b682:	b25b      	sxtb	r3, r3
 800b684:	e05d      	b.n	800b742 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800b686:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b68a:	4933      	ldr	r1, [pc, #204]	@ (800b758 <etharp_update_arp_entry+0x148>)
 800b68c:	4613      	mov	r3, r2
 800b68e:	005b      	lsls	r3, r3, #1
 800b690:	4413      	add	r3, r2
 800b692:	00db      	lsls	r3, r3, #3
 800b694:	440b      	add	r3, r1
 800b696:	3314      	adds	r3, #20
 800b698:	2202      	movs	r2, #2
 800b69a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800b69c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6a0:	492d      	ldr	r1, [pc, #180]	@ (800b758 <etharp_update_arp_entry+0x148>)
 800b6a2:	4613      	mov	r3, r2
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	4413      	add	r3, r2
 800b6a8:	00db      	lsls	r3, r3, #3
 800b6aa:	440b      	add	r3, r1
 800b6ac:	3308      	adds	r3, #8
 800b6ae:	68fa      	ldr	r2, [r7, #12]
 800b6b0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800b6b2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6b6:	4613      	mov	r3, r2
 800b6b8:	005b      	lsls	r3, r3, #1
 800b6ba:	4413      	add	r3, r2
 800b6bc:	00db      	lsls	r3, r3, #3
 800b6be:	3308      	adds	r3, #8
 800b6c0:	4a25      	ldr	r2, [pc, #148]	@ (800b758 <etharp_update_arp_entry+0x148>)
 800b6c2:	4413      	add	r3, r2
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	2206      	movs	r2, #6
 800b6c8:	6879      	ldr	r1, [r7, #4]
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f002 fa07 	bl	800dade <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800b6d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6d4:	4920      	ldr	r1, [pc, #128]	@ (800b758 <etharp_update_arp_entry+0x148>)
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	4413      	add	r3, r2
 800b6dc:	00db      	lsls	r3, r3, #3
 800b6de:	440b      	add	r3, r1
 800b6e0:	3312      	adds	r3, #18
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800b6e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b6ea:	491b      	ldr	r1, [pc, #108]	@ (800b758 <etharp_update_arp_entry+0x148>)
 800b6ec:	4613      	mov	r3, r2
 800b6ee:	005b      	lsls	r3, r3, #1
 800b6f0:	4413      	add	r3, r2
 800b6f2:	00db      	lsls	r3, r3, #3
 800b6f4:	440b      	add	r3, r1
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d021      	beq.n	800b740 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800b6fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b700:	4915      	ldr	r1, [pc, #84]	@ (800b758 <etharp_update_arp_entry+0x148>)
 800b702:	4613      	mov	r3, r2
 800b704:	005b      	lsls	r3, r3, #1
 800b706:	4413      	add	r3, r2
 800b708:	00db      	lsls	r3, r3, #3
 800b70a:	440b      	add	r3, r1
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800b710:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800b714:	4910      	ldr	r1, [pc, #64]	@ (800b758 <etharp_update_arp_entry+0x148>)
 800b716:	4613      	mov	r3, r2
 800b718:	005b      	lsls	r3, r3, #1
 800b71a:	4413      	add	r3, r2
 800b71c:	00db      	lsls	r3, r3, #3
 800b71e:	440b      	add	r3, r1
 800b720:	2200      	movs	r2, #0
 800b722:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800b72a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6939      	ldr	r1, [r7, #16]
 800b734:	68f8      	ldr	r0, [r7, #12]
 800b736:	f001 ffaf 	bl	800d698 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800b73a:	6938      	ldr	r0, [r7, #16]
 800b73c:	f7fc fe46 	bl	80083cc <pbuf_free>
  }
  return ERR_OK;
 800b740:	2300      	movs	r3, #0
}
 800b742:	4618      	mov	r0, r3
 800b744:	3718      	adds	r7, #24
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
 800b74a:	bf00      	nop
 800b74c:	0800f990 	.word	0x0800f990
 800b750:	0800fa88 	.word	0x0800fa88
 800b754:	0800fa08 	.word	0x0800fa08
 800b758:	200094fc 	.word	0x200094fc

0800b75c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b084      	sub	sp, #16
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b764:	2300      	movs	r3, #0
 800b766:	60fb      	str	r3, [r7, #12]
 800b768:	e01e      	b.n	800b7a8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800b76a:	4913      	ldr	r1, [pc, #76]	@ (800b7b8 <etharp_cleanup_netif+0x5c>)
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	4613      	mov	r3, r2
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	4413      	add	r3, r2
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	440b      	add	r3, r1
 800b778:	3314      	adds	r3, #20
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800b77e:	7afb      	ldrb	r3, [r7, #11]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d00e      	beq.n	800b7a2 <etharp_cleanup_netif+0x46>
 800b784:	490c      	ldr	r1, [pc, #48]	@ (800b7b8 <etharp_cleanup_netif+0x5c>)
 800b786:	68fa      	ldr	r2, [r7, #12]
 800b788:	4613      	mov	r3, r2
 800b78a:	005b      	lsls	r3, r3, #1
 800b78c:	4413      	add	r3, r2
 800b78e:	00db      	lsls	r3, r3, #3
 800b790:	440b      	add	r3, r1
 800b792:	3308      	adds	r3, #8
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	429a      	cmp	r2, r3
 800b79a:	d102      	bne.n	800b7a2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800b79c:	68f8      	ldr	r0, [r7, #12]
 800b79e:	f7ff fce5 	bl	800b16c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2b09      	cmp	r3, #9
 800b7ac:	dddd      	ble.n	800b76a <etharp_cleanup_netif+0xe>
    }
  }
}
 800b7ae:	bf00      	nop
 800b7b0:	bf00      	nop
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	200094fc 	.word	0x200094fc

0800b7bc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800b7bc:	b5b0      	push	{r4, r5, r7, lr}
 800b7be:	b08a      	sub	sp, #40	@ 0x28
 800b7c0:	af04      	add	r7, sp, #16
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d107      	bne.n	800b7dc <etharp_input+0x20>
 800b7cc:	4b3f      	ldr	r3, [pc, #252]	@ (800b8cc <etharp_input+0x110>)
 800b7ce:	f240 228a 	movw	r2, #650	@ 0x28a
 800b7d2:	493f      	ldr	r1, [pc, #252]	@ (800b8d0 <etharp_input+0x114>)
 800b7d4:	483f      	ldr	r0, [pc, #252]	@ (800b8d4 <etharp_input+0x118>)
 800b7d6:	f002 f8a7 	bl	800d928 <iprintf>
 800b7da:	e074      	b.n	800b8c6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	685b      	ldr	r3, [r3, #4]
 800b7e0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	881b      	ldrh	r3, [r3, #0]
 800b7e6:	b29b      	uxth	r3, r3
 800b7e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7ec:	d10c      	bne.n	800b808 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800b7f2:	2b06      	cmp	r3, #6
 800b7f4:	d108      	bne.n	800b808 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800b7fa:	2b04      	cmp	r3, #4
 800b7fc:	d104      	bne.n	800b808 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800b7fe:	693b      	ldr	r3, [r7, #16]
 800b800:	885b      	ldrh	r3, [r3, #2]
 800b802:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800b804:	2b08      	cmp	r3, #8
 800b806:	d003      	beq.n	800b810 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f7fc fddf 	bl	80083cc <pbuf_free>
    return;
 800b80e:	e05a      	b.n	800b8c6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	330e      	adds	r3, #14
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	3318      	adds	r3, #24
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b820:	683b      	ldr	r3, [r7, #0]
 800b822:	3304      	adds	r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d102      	bne.n	800b830 <etharp_input+0x74>
    for_us = 0;
 800b82a:	2300      	movs	r3, #0
 800b82c:	75fb      	strb	r3, [r7, #23]
 800b82e:	e009      	b.n	800b844 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800b830:	68ba      	ldr	r2, [r7, #8]
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	3304      	adds	r3, #4
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	429a      	cmp	r2, r3
 800b83a:	bf0c      	ite	eq
 800b83c:	2301      	moveq	r3, #1
 800b83e:	2300      	movne	r3, #0
 800b840:	b2db      	uxtb	r3, r3
 800b842:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800b844:	693b      	ldr	r3, [r7, #16]
 800b846:	f103 0208 	add.w	r2, r3, #8
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <etharp_input+0x98>
 800b850:	2301      	movs	r3, #1
 800b852:	e000      	b.n	800b856 <etharp_input+0x9a>
 800b854:	2302      	movs	r3, #2
 800b856:	f107 010c 	add.w	r1, r7, #12
 800b85a:	6838      	ldr	r0, [r7, #0]
 800b85c:	f7ff fed8 	bl	800b610 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	88db      	ldrh	r3, [r3, #6]
 800b864:	b29b      	uxth	r3, r3
 800b866:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b86a:	d003      	beq.n	800b874 <etharp_input+0xb8>
 800b86c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b870:	d01e      	beq.n	800b8b0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800b872:	e025      	b.n	800b8c0 <etharp_input+0x104>
      if (for_us) {
 800b874:	7dfb      	ldrb	r3, [r7, #23]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d021      	beq.n	800b8be <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	3208      	adds	r2, #8
        etharp_raw(netif,
 800b894:	2102      	movs	r1, #2
 800b896:	9103      	str	r1, [sp, #12]
 800b898:	f107 010c 	add.w	r1, r7, #12
 800b89c:	9102      	str	r1, [sp, #8]
 800b89e:	9201      	str	r2, [sp, #4]
 800b8a0:	9300      	str	r3, [sp, #0]
 800b8a2:	462b      	mov	r3, r5
 800b8a4:	4622      	mov	r2, r4
 800b8a6:	4601      	mov	r1, r0
 800b8a8:	6838      	ldr	r0, [r7, #0]
 800b8aa:	f000 faef 	bl	800be8c <etharp_raw>
      break;
 800b8ae:	e006      	b.n	800b8be <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800b8b0:	f107 030c 	add.w	r3, r7, #12
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6838      	ldr	r0, [r7, #0]
 800b8b8:	f7fe fa02 	bl	8009cc0 <dhcp_arp_reply>
      break;
 800b8bc:	e000      	b.n	800b8c0 <etharp_input+0x104>
      break;
 800b8be:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7fc fd83 	bl	80083cc <pbuf_free>
}
 800b8c6:	3718      	adds	r7, #24
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bdb0      	pop	{r4, r5, r7, pc}
 800b8cc:	0800f990 	.word	0x0800f990
 800b8d0:	0800fae0 	.word	0x0800fae0
 800b8d4:	0800fa08 	.word	0x0800fa08

0800b8d8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af02      	add	r7, sp, #8
 800b8de:	60f8      	str	r0, [r7, #12]
 800b8e0:	60b9      	str	r1, [r7, #8]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800b8e6:	79fa      	ldrb	r2, [r7, #7]
 800b8e8:	4944      	ldr	r1, [pc, #272]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	005b      	lsls	r3, r3, #1
 800b8ee:	4413      	add	r3, r2
 800b8f0:	00db      	lsls	r3, r3, #3
 800b8f2:	440b      	add	r3, r1
 800b8f4:	3314      	adds	r3, #20
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d806      	bhi.n	800b90a <etharp_output_to_arp_index+0x32>
 800b8fc:	4b40      	ldr	r3, [pc, #256]	@ (800ba00 <etharp_output_to_arp_index+0x128>)
 800b8fe:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800b902:	4940      	ldr	r1, [pc, #256]	@ (800ba04 <etharp_output_to_arp_index+0x12c>)
 800b904:	4840      	ldr	r0, [pc, #256]	@ (800ba08 <etharp_output_to_arp_index+0x130>)
 800b906:	f002 f80f 	bl	800d928 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800b90a:	79fa      	ldrb	r2, [r7, #7]
 800b90c:	493b      	ldr	r1, [pc, #236]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b90e:	4613      	mov	r3, r2
 800b910:	005b      	lsls	r3, r3, #1
 800b912:	4413      	add	r3, r2
 800b914:	00db      	lsls	r3, r3, #3
 800b916:	440b      	add	r3, r1
 800b918:	3314      	adds	r3, #20
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	2b02      	cmp	r3, #2
 800b91e:	d153      	bne.n	800b9c8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800b920:	79fa      	ldrb	r2, [r7, #7]
 800b922:	4936      	ldr	r1, [pc, #216]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b924:	4613      	mov	r3, r2
 800b926:	005b      	lsls	r3, r3, #1
 800b928:	4413      	add	r3, r2
 800b92a:	00db      	lsls	r3, r3, #3
 800b92c:	440b      	add	r3, r1
 800b92e:	3312      	adds	r3, #18
 800b930:	881b      	ldrh	r3, [r3, #0]
 800b932:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 800b936:	d919      	bls.n	800b96c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800b938:	79fa      	ldrb	r2, [r7, #7]
 800b93a:	4613      	mov	r3, r2
 800b93c:	005b      	lsls	r3, r3, #1
 800b93e:	4413      	add	r3, r2
 800b940:	00db      	lsls	r3, r3, #3
 800b942:	4a2e      	ldr	r2, [pc, #184]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b944:	4413      	add	r3, r2
 800b946:	3304      	adds	r3, #4
 800b948:	4619      	mov	r1, r3
 800b94a:	68f8      	ldr	r0, [r7, #12]
 800b94c:	f000 fb4c 	bl	800bfe8 <etharp_request>
 800b950:	4603      	mov	r3, r0
 800b952:	2b00      	cmp	r3, #0
 800b954:	d138      	bne.n	800b9c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b956:	79fa      	ldrb	r2, [r7, #7]
 800b958:	4928      	ldr	r1, [pc, #160]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b95a:	4613      	mov	r3, r2
 800b95c:	005b      	lsls	r3, r3, #1
 800b95e:	4413      	add	r3, r2
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	440b      	add	r3, r1
 800b964:	3314      	adds	r3, #20
 800b966:	2203      	movs	r2, #3
 800b968:	701a      	strb	r2, [r3, #0]
 800b96a:	e02d      	b.n	800b9c8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800b96c:	79fa      	ldrb	r2, [r7, #7]
 800b96e:	4923      	ldr	r1, [pc, #140]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b970:	4613      	mov	r3, r2
 800b972:	005b      	lsls	r3, r3, #1
 800b974:	4413      	add	r3, r2
 800b976:	00db      	lsls	r3, r3, #3
 800b978:	440b      	add	r3, r1
 800b97a:	3312      	adds	r3, #18
 800b97c:	881b      	ldrh	r3, [r3, #0]
 800b97e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 800b982:	d321      	bcc.n	800b9c8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800b984:	79fa      	ldrb	r2, [r7, #7]
 800b986:	4613      	mov	r3, r2
 800b988:	005b      	lsls	r3, r3, #1
 800b98a:	4413      	add	r3, r2
 800b98c:	00db      	lsls	r3, r3, #3
 800b98e:	4a1b      	ldr	r2, [pc, #108]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b990:	4413      	add	r3, r2
 800b992:	1d19      	adds	r1, r3, #4
 800b994:	79fa      	ldrb	r2, [r7, #7]
 800b996:	4613      	mov	r3, r2
 800b998:	005b      	lsls	r3, r3, #1
 800b99a:	4413      	add	r3, r2
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	3308      	adds	r3, #8
 800b9a0:	4a16      	ldr	r2, [pc, #88]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b9a2:	4413      	add	r3, r2
 800b9a4:	3304      	adds	r3, #4
 800b9a6:	461a      	mov	r2, r3
 800b9a8:	68f8      	ldr	r0, [r7, #12]
 800b9aa:	f000 fafb 	bl	800bfa4 <etharp_request_dst>
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d109      	bne.n	800b9c8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800b9b4:	79fa      	ldrb	r2, [r7, #7]
 800b9b6:	4911      	ldr	r1, [pc, #68]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b9b8:	4613      	mov	r3, r2
 800b9ba:	005b      	lsls	r3, r3, #1
 800b9bc:	4413      	add	r3, r2
 800b9be:	00db      	lsls	r3, r3, #3
 800b9c0:	440b      	add	r3, r1
 800b9c2:	3314      	adds	r3, #20
 800b9c4:	2203      	movs	r2, #3
 800b9c6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 800b9ce:	79fa      	ldrb	r2, [r7, #7]
 800b9d0:	4613      	mov	r3, r2
 800b9d2:	005b      	lsls	r3, r3, #1
 800b9d4:	4413      	add	r3, r2
 800b9d6:	00db      	lsls	r3, r3, #3
 800b9d8:	3308      	adds	r3, #8
 800b9da:	4a08      	ldr	r2, [pc, #32]	@ (800b9fc <etharp_output_to_arp_index+0x124>)
 800b9dc:	4413      	add	r3, r2
 800b9de:	3304      	adds	r3, #4
 800b9e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9e4:	9200      	str	r2, [sp, #0]
 800b9e6:	460a      	mov	r2, r1
 800b9e8:	68b9      	ldr	r1, [r7, #8]
 800b9ea:	68f8      	ldr	r0, [r7, #12]
 800b9ec:	f001 fe54 	bl	800d698 <ethernet_output>
 800b9f0:	4603      	mov	r3, r0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3710      	adds	r7, #16
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
 800b9fa:	bf00      	nop
 800b9fc:	200094fc 	.word	0x200094fc
 800ba00:	0800f990 	.word	0x0800f990
 800ba04:	0800fb00 	.word	0x0800fb00
 800ba08:	0800fa08 	.word	0x0800fa08

0800ba0c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b08a      	sub	sp, #40	@ 0x28
 800ba10:	af02      	add	r7, sp, #8
 800ba12:	60f8      	str	r0, [r7, #12]
 800ba14:	60b9      	str	r1, [r7, #8]
 800ba16:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d106      	bne.n	800ba30 <etharp_output+0x24>
 800ba22:	4b73      	ldr	r3, [pc, #460]	@ (800bbf0 <etharp_output+0x1e4>)
 800ba24:	f240 321e 	movw	r2, #798	@ 0x31e
 800ba28:	4972      	ldr	r1, [pc, #456]	@ (800bbf4 <etharp_output+0x1e8>)
 800ba2a:	4873      	ldr	r0, [pc, #460]	@ (800bbf8 <etharp_output+0x1ec>)
 800ba2c:	f001 ff7c 	bl	800d928 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d106      	bne.n	800ba44 <etharp_output+0x38>
 800ba36:	4b6e      	ldr	r3, [pc, #440]	@ (800bbf0 <etharp_output+0x1e4>)
 800ba38:	f240 321f 	movw	r2, #799	@ 0x31f
 800ba3c:	496f      	ldr	r1, [pc, #444]	@ (800bbfc <etharp_output+0x1f0>)
 800ba3e:	486e      	ldr	r0, [pc, #440]	@ (800bbf8 <etharp_output+0x1ec>)
 800ba40:	f001 ff72 	bl	800d928 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d106      	bne.n	800ba58 <etharp_output+0x4c>
 800ba4a:	4b69      	ldr	r3, [pc, #420]	@ (800bbf0 <etharp_output+0x1e4>)
 800ba4c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800ba50:	496b      	ldr	r1, [pc, #428]	@ (800bc00 <etharp_output+0x1f4>)
 800ba52:	4869      	ldr	r0, [pc, #420]	@ (800bbf8 <etharp_output+0x1ec>)
 800ba54:	f001 ff68 	bl	800d928 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68f9      	ldr	r1, [r7, #12]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f000 ff0c 	bl	800c87c <ip4_addr_isbroadcast_u32>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d002      	beq.n	800ba70 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ba6a:	4b66      	ldr	r3, [pc, #408]	@ (800bc04 <etharp_output+0x1f8>)
 800ba6c:	61fb      	str	r3, [r7, #28]
 800ba6e:	e0af      	b.n	800bbd0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ba78:	2be0      	cmp	r3, #224	@ 0xe0
 800ba7a:	d118      	bne.n	800baae <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ba80:	2300      	movs	r3, #0
 800ba82:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ba84:	235e      	movs	r3, #94	@ 0x5e
 800ba86:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	3302      	adds	r3, #2
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	3303      	adds	r3, #3
 800baa2:	781b      	ldrb	r3, [r3, #0]
 800baa4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800baa6:	f107 0310 	add.w	r3, r7, #16
 800baaa:	61fb      	str	r3, [r7, #28]
 800baac:	e090      	b.n	800bbd0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	681a      	ldr	r2, [r3, #0]
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	3304      	adds	r3, #4
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	405a      	eors	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	3308      	adds	r3, #8
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4013      	ands	r3, r2
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d012      	beq.n	800baec <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800bacc:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d00b      	beq.n	800baec <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	330c      	adds	r3, #12
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d003      	beq.n	800bae6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800bade:	68fb      	ldr	r3, [r7, #12]
 800bae0:	330c      	adds	r3, #12
 800bae2:	61bb      	str	r3, [r7, #24]
 800bae4:	e002      	b.n	800baec <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800bae6:	f06f 0303 	mvn.w	r3, #3
 800baea:	e07d      	b.n	800bbe8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800baec:	4b46      	ldr	r3, [pc, #280]	@ (800bc08 <etharp_output+0x1fc>)
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	4619      	mov	r1, r3
 800baf2:	4a46      	ldr	r2, [pc, #280]	@ (800bc0c <etharp_output+0x200>)
 800baf4:	460b      	mov	r3, r1
 800baf6:	005b      	lsls	r3, r3, #1
 800baf8:	440b      	add	r3, r1
 800bafa:	00db      	lsls	r3, r3, #3
 800bafc:	4413      	add	r3, r2
 800bafe:	3314      	adds	r3, #20
 800bb00:	781b      	ldrb	r3, [r3, #0]
 800bb02:	2b01      	cmp	r3, #1
 800bb04:	d925      	bls.n	800bb52 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb06:	4b40      	ldr	r3, [pc, #256]	@ (800bc08 <etharp_output+0x1fc>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	4619      	mov	r1, r3
 800bb0c:	4a3f      	ldr	r2, [pc, #252]	@ (800bc0c <etharp_output+0x200>)
 800bb0e:	460b      	mov	r3, r1
 800bb10:	005b      	lsls	r3, r3, #1
 800bb12:	440b      	add	r3, r1
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	4413      	add	r3, r2
 800bb18:	3308      	adds	r3, #8
 800bb1a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800bb1c:	68fa      	ldr	r2, [r7, #12]
 800bb1e:	429a      	cmp	r2, r3
 800bb20:	d117      	bne.n	800bb52 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800bb22:	69bb      	ldr	r3, [r7, #24]
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	4b38      	ldr	r3, [pc, #224]	@ (800bc08 <etharp_output+0x1fc>)
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	4937      	ldr	r1, [pc, #220]	@ (800bc0c <etharp_output+0x200>)
 800bb2e:	4603      	mov	r3, r0
 800bb30:	005b      	lsls	r3, r3, #1
 800bb32:	4403      	add	r3, r0
 800bb34:	00db      	lsls	r3, r3, #3
 800bb36:	440b      	add	r3, r1
 800bb38:	3304      	adds	r3, #4
 800bb3a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d108      	bne.n	800bb52 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800bb40:	4b31      	ldr	r3, [pc, #196]	@ (800bc08 <etharp_output+0x1fc>)
 800bb42:	781b      	ldrb	r3, [r3, #0]
 800bb44:	461a      	mov	r2, r3
 800bb46:	68b9      	ldr	r1, [r7, #8]
 800bb48:	68f8      	ldr	r0, [r7, #12]
 800bb4a:	f7ff fec5 	bl	800b8d8 <etharp_output_to_arp_index>
 800bb4e:	4603      	mov	r3, r0
 800bb50:	e04a      	b.n	800bbe8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bb52:	2300      	movs	r3, #0
 800bb54:	75fb      	strb	r3, [r7, #23]
 800bb56:	e031      	b.n	800bbbc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb58:	7dfa      	ldrb	r2, [r7, #23]
 800bb5a:	492c      	ldr	r1, [pc, #176]	@ (800bc0c <etharp_output+0x200>)
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	4413      	add	r3, r2
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	440b      	add	r3, r1
 800bb66:	3314      	adds	r3, #20
 800bb68:	781b      	ldrb	r3, [r3, #0]
 800bb6a:	2b01      	cmp	r3, #1
 800bb6c:	d923      	bls.n	800bbb6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800bb6e:	7dfa      	ldrb	r2, [r7, #23]
 800bb70:	4926      	ldr	r1, [pc, #152]	@ (800bc0c <etharp_output+0x200>)
 800bb72:	4613      	mov	r3, r2
 800bb74:	005b      	lsls	r3, r3, #1
 800bb76:	4413      	add	r3, r2
 800bb78:	00db      	lsls	r3, r3, #3
 800bb7a:	440b      	add	r3, r1
 800bb7c:	3308      	adds	r3, #8
 800bb7e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d117      	bne.n	800bbb6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	6819      	ldr	r1, [r3, #0]
 800bb8a:	7dfa      	ldrb	r2, [r7, #23]
 800bb8c:	481f      	ldr	r0, [pc, #124]	@ (800bc0c <etharp_output+0x200>)
 800bb8e:	4613      	mov	r3, r2
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	4413      	add	r3, r2
 800bb94:	00db      	lsls	r3, r3, #3
 800bb96:	4403      	add	r3, r0
 800bb98:	3304      	adds	r3, #4
 800bb9a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800bb9c:	4299      	cmp	r1, r3
 800bb9e:	d10a      	bne.n	800bbb6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800bba0:	4a19      	ldr	r2, [pc, #100]	@ (800bc08 <etharp_output+0x1fc>)
 800bba2:	7dfb      	ldrb	r3, [r7, #23]
 800bba4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800bba6:	7dfb      	ldrb	r3, [r7, #23]
 800bba8:	461a      	mov	r2, r3
 800bbaa:	68b9      	ldr	r1, [r7, #8]
 800bbac:	68f8      	ldr	r0, [r7, #12]
 800bbae:	f7ff fe93 	bl	800b8d8 <etharp_output_to_arp_index>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	e018      	b.n	800bbe8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800bbb6:	7dfb      	ldrb	r3, [r7, #23]
 800bbb8:	3301      	adds	r3, #1
 800bbba:	75fb      	strb	r3, [r7, #23]
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
 800bbbe:	2b09      	cmp	r3, #9
 800bbc0:	d9ca      	bls.n	800bb58 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800bbc2:	68ba      	ldr	r2, [r7, #8]
 800bbc4:	69b9      	ldr	r1, [r7, #24]
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f000 f822 	bl	800bc10 <etharp_query>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	e00b      	b.n	800bbe8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 800bbd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800bbda:	9300      	str	r3, [sp, #0]
 800bbdc:	69fb      	ldr	r3, [r7, #28]
 800bbde:	68b9      	ldr	r1, [r7, #8]
 800bbe0:	68f8      	ldr	r0, [r7, #12]
 800bbe2:	f001 fd59 	bl	800d698 <ethernet_output>
 800bbe6:	4603      	mov	r3, r0
}
 800bbe8:	4618      	mov	r0, r3
 800bbea:	3720      	adds	r7, #32
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	0800f990 	.word	0x0800f990
 800bbf4:	0800fae0 	.word	0x0800fae0
 800bbf8:	0800fa08 	.word	0x0800fa08
 800bbfc:	0800fb30 	.word	0x0800fb30
 800bc00:	0800fad0 	.word	0x0800fad0
 800bc04:	08010108 	.word	0x08010108
 800bc08:	200095ec 	.word	0x200095ec
 800bc0c:	200094fc 	.word	0x200094fc

0800bc10 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	b08c      	sub	sp, #48	@ 0x30
 800bc14:	af02      	add	r7, sp, #8
 800bc16:	60f8      	str	r0, [r7, #12]
 800bc18:	60b9      	str	r1, [r7, #8]
 800bc1a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	332a      	adds	r3, #42	@ 0x2a
 800bc20:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800bc22:	23ff      	movs	r3, #255	@ 0xff
 800bc24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	68f9      	ldr	r1, [r7, #12]
 800bc32:	4618      	mov	r0, r3
 800bc34:	f000 fe22 	bl	800c87c <ip4_addr_isbroadcast_u32>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10c      	bne.n	800bc58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800bc46:	2be0      	cmp	r3, #224	@ 0xe0
 800bc48:	d006      	beq.n	800bc58 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d003      	beq.n	800bc58 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d102      	bne.n	800bc5e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800bc58:	f06f 030f 	mvn.w	r3, #15
 800bc5c:	e101      	b.n	800be62 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	2101      	movs	r1, #1
 800bc62:	68b8      	ldr	r0, [r7, #8]
 800bc64:	f7ff fb5c 	bl	800b320 <etharp_find_entry>
 800bc68:	4603      	mov	r3, r0
 800bc6a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800bc6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	da02      	bge.n	800bc7a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800bc74:	8a7b      	ldrh	r3, [r7, #18]
 800bc76:	b25b      	sxtb	r3, r3
 800bc78:	e0f3      	b.n	800be62 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800bc7a:	8a7b      	ldrh	r3, [r7, #18]
 800bc7c:	2b7e      	cmp	r3, #126	@ 0x7e
 800bc7e:	d906      	bls.n	800bc8e <etharp_query+0x7e>
 800bc80:	4b7a      	ldr	r3, [pc, #488]	@ (800be6c <etharp_query+0x25c>)
 800bc82:	f240 32c1 	movw	r2, #961	@ 0x3c1
 800bc86:	497a      	ldr	r1, [pc, #488]	@ (800be70 <etharp_query+0x260>)
 800bc88:	487a      	ldr	r0, [pc, #488]	@ (800be74 <etharp_query+0x264>)
 800bc8a:	f001 fe4d 	bl	800d928 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800bc8e:	8a7b      	ldrh	r3, [r7, #18]
 800bc90:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800bc92:	7c7a      	ldrb	r2, [r7, #17]
 800bc94:	4978      	ldr	r1, [pc, #480]	@ (800be78 <etharp_query+0x268>)
 800bc96:	4613      	mov	r3, r2
 800bc98:	005b      	lsls	r3, r3, #1
 800bc9a:	4413      	add	r3, r2
 800bc9c:	00db      	lsls	r3, r3, #3
 800bc9e:	440b      	add	r3, r1
 800bca0:	3314      	adds	r3, #20
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d115      	bne.n	800bcd4 <etharp_query+0xc4>
    is_new_entry = 1;
 800bca8:	2301      	movs	r3, #1
 800bcaa:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800bcac:	7c7a      	ldrb	r2, [r7, #17]
 800bcae:	4972      	ldr	r1, [pc, #456]	@ (800be78 <etharp_query+0x268>)
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	005b      	lsls	r3, r3, #1
 800bcb4:	4413      	add	r3, r2
 800bcb6:	00db      	lsls	r3, r3, #3
 800bcb8:	440b      	add	r3, r1
 800bcba:	3314      	adds	r3, #20
 800bcbc:	2201      	movs	r2, #1
 800bcbe:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800bcc0:	7c7a      	ldrb	r2, [r7, #17]
 800bcc2:	496d      	ldr	r1, [pc, #436]	@ (800be78 <etharp_query+0x268>)
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	005b      	lsls	r3, r3, #1
 800bcc8:	4413      	add	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	440b      	add	r3, r1
 800bcce:	3308      	adds	r3, #8
 800bcd0:	68fa      	ldr	r2, [r7, #12]
 800bcd2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800bcd4:	7c7a      	ldrb	r2, [r7, #17]
 800bcd6:	4968      	ldr	r1, [pc, #416]	@ (800be78 <etharp_query+0x268>)
 800bcd8:	4613      	mov	r3, r2
 800bcda:	005b      	lsls	r3, r3, #1
 800bcdc:	4413      	add	r3, r2
 800bcde:	00db      	lsls	r3, r3, #3
 800bce0:	440b      	add	r3, r1
 800bce2:	3314      	adds	r3, #20
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	2b01      	cmp	r3, #1
 800bce8:	d011      	beq.n	800bd0e <etharp_query+0xfe>
 800bcea:	7c7a      	ldrb	r2, [r7, #17]
 800bcec:	4962      	ldr	r1, [pc, #392]	@ (800be78 <etharp_query+0x268>)
 800bcee:	4613      	mov	r3, r2
 800bcf0:	005b      	lsls	r3, r3, #1
 800bcf2:	4413      	add	r3, r2
 800bcf4:	00db      	lsls	r3, r3, #3
 800bcf6:	440b      	add	r3, r1
 800bcf8:	3314      	adds	r3, #20
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d806      	bhi.n	800bd0e <etharp_query+0xfe>
 800bd00:	4b5a      	ldr	r3, [pc, #360]	@ (800be6c <etharp_query+0x25c>)
 800bd02:	f240 32cd 	movw	r2, #973	@ 0x3cd
 800bd06:	495d      	ldr	r1, [pc, #372]	@ (800be7c <etharp_query+0x26c>)
 800bd08:	485a      	ldr	r0, [pc, #360]	@ (800be74 <etharp_query+0x264>)
 800bd0a:	f001 fe0d 	bl	800d928 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d102      	bne.n	800bd1a <etharp_query+0x10a>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d10c      	bne.n	800bd34 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800bd1a:	68b9      	ldr	r1, [r7, #8]
 800bd1c:	68f8      	ldr	r0, [r7, #12]
 800bd1e:	f000 f963 	bl	800bfe8 <etharp_request>
 800bd22:	4603      	mov	r3, r0
 800bd24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d102      	bne.n	800bd34 <etharp_query+0x124>
      return result;
 800bd2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800bd32:	e096      	b.n	800be62 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d106      	bne.n	800bd48 <etharp_query+0x138>
 800bd3a:	4b4c      	ldr	r3, [pc, #304]	@ (800be6c <etharp_query+0x25c>)
 800bd3c:	f240 32e1 	movw	r2, #993	@ 0x3e1
 800bd40:	494f      	ldr	r1, [pc, #316]	@ (800be80 <etharp_query+0x270>)
 800bd42:	484c      	ldr	r0, [pc, #304]	@ (800be74 <etharp_query+0x264>)
 800bd44:	f001 fdf0 	bl	800d928 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800bd48:	7c7a      	ldrb	r2, [r7, #17]
 800bd4a:	494b      	ldr	r1, [pc, #300]	@ (800be78 <etharp_query+0x268>)
 800bd4c:	4613      	mov	r3, r2
 800bd4e:	005b      	lsls	r3, r3, #1
 800bd50:	4413      	add	r3, r2
 800bd52:	00db      	lsls	r3, r3, #3
 800bd54:	440b      	add	r3, r1
 800bd56:	3314      	adds	r3, #20
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	2b01      	cmp	r3, #1
 800bd5c:	d917      	bls.n	800bd8e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800bd5e:	4a49      	ldr	r2, [pc, #292]	@ (800be84 <etharp_query+0x274>)
 800bd60:	7c7b      	ldrb	r3, [r7, #17]
 800bd62:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800bd64:	7c7a      	ldrb	r2, [r7, #17]
 800bd66:	4613      	mov	r3, r2
 800bd68:	005b      	lsls	r3, r3, #1
 800bd6a:	4413      	add	r3, r2
 800bd6c:	00db      	lsls	r3, r3, #3
 800bd6e:	3308      	adds	r3, #8
 800bd70:	4a41      	ldr	r2, [pc, #260]	@ (800be78 <etharp_query+0x268>)
 800bd72:	4413      	add	r3, r2
 800bd74:	3304      	adds	r3, #4
 800bd76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800bd7a:	9200      	str	r2, [sp, #0]
 800bd7c:	697a      	ldr	r2, [r7, #20]
 800bd7e:	6879      	ldr	r1, [r7, #4]
 800bd80:	68f8      	ldr	r0, [r7, #12]
 800bd82:	f001 fc89 	bl	800d698 <ethernet_output>
 800bd86:	4603      	mov	r3, r0
 800bd88:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800bd8c:	e067      	b.n	800be5e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800bd8e:	7c7a      	ldrb	r2, [r7, #17]
 800bd90:	4939      	ldr	r1, [pc, #228]	@ (800be78 <etharp_query+0x268>)
 800bd92:	4613      	mov	r3, r2
 800bd94:	005b      	lsls	r3, r3, #1
 800bd96:	4413      	add	r3, r2
 800bd98:	00db      	lsls	r3, r3, #3
 800bd9a:	440b      	add	r3, r1
 800bd9c:	3314      	adds	r3, #20
 800bd9e:	781b      	ldrb	r3, [r3, #0]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d15c      	bne.n	800be5e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800bda4:	2300      	movs	r3, #0
 800bda6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bdac:	e01c      	b.n	800bde8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800bdae:	69fb      	ldr	r3, [r7, #28]
 800bdb0:	895a      	ldrh	r2, [r3, #10]
 800bdb2:	69fb      	ldr	r3, [r7, #28]
 800bdb4:	891b      	ldrh	r3, [r3, #8]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d10a      	bne.n	800bdd0 <etharp_query+0x1c0>
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d006      	beq.n	800bdd0 <etharp_query+0x1c0>
 800bdc2:	4b2a      	ldr	r3, [pc, #168]	@ (800be6c <etharp_query+0x25c>)
 800bdc4:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 800bdc8:	492f      	ldr	r1, [pc, #188]	@ (800be88 <etharp_query+0x278>)
 800bdca:	482a      	ldr	r0, [pc, #168]	@ (800be74 <etharp_query+0x264>)
 800bdcc:	f001 fdac 	bl	800d928 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800bdd0:	69fb      	ldr	r3, [r7, #28]
 800bdd2:	7b1b      	ldrb	r3, [r3, #12]
 800bdd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <etharp_query+0x1d2>
        copy_needed = 1;
 800bddc:	2301      	movs	r3, #1
 800bdde:	61bb      	str	r3, [r7, #24]
        break;
 800bde0:	e005      	b.n	800bdee <etharp_query+0x1de>
      }
      p = p->next;
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	61fb      	str	r3, [r7, #28]
    while (p) {
 800bde8:	69fb      	ldr	r3, [r7, #28]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d1df      	bne.n	800bdae <etharp_query+0x19e>
    }
    if (copy_needed) {
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d007      	beq.n	800be04 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 800bdfa:	200e      	movs	r0, #14
 800bdfc:	f7fc fd52 	bl	80088a4 <pbuf_clone>
 800be00:	61f8      	str	r0, [r7, #28]
 800be02:	e004      	b.n	800be0e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800be08:	69f8      	ldr	r0, [r7, #28]
 800be0a:	f7fc fb7f 	bl	800850c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d021      	beq.n	800be58 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800be14:	7c7a      	ldrb	r2, [r7, #17]
 800be16:	4918      	ldr	r1, [pc, #96]	@ (800be78 <etharp_query+0x268>)
 800be18:	4613      	mov	r3, r2
 800be1a:	005b      	lsls	r3, r3, #1
 800be1c:	4413      	add	r3, r2
 800be1e:	00db      	lsls	r3, r3, #3
 800be20:	440b      	add	r3, r1
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00a      	beq.n	800be3e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800be28:	7c7a      	ldrb	r2, [r7, #17]
 800be2a:	4913      	ldr	r1, [pc, #76]	@ (800be78 <etharp_query+0x268>)
 800be2c:	4613      	mov	r3, r2
 800be2e:	005b      	lsls	r3, r3, #1
 800be30:	4413      	add	r3, r2
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	440b      	add	r3, r1
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fc fac7 	bl	80083cc <pbuf_free>
      }
      arp_table[i].q = p;
 800be3e:	7c7a      	ldrb	r2, [r7, #17]
 800be40:	490d      	ldr	r1, [pc, #52]	@ (800be78 <etharp_query+0x268>)
 800be42:	4613      	mov	r3, r2
 800be44:	005b      	lsls	r3, r3, #1
 800be46:	4413      	add	r3, r2
 800be48:	00db      	lsls	r3, r3, #3
 800be4a:	440b      	add	r3, r1
 800be4c:	69fa      	ldr	r2, [r7, #28]
 800be4e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800be50:	2300      	movs	r3, #0
 800be52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800be56:	e002      	b.n	800be5e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800be58:	23ff      	movs	r3, #255	@ 0xff
 800be5a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 800be5e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800be62:	4618      	mov	r0, r3
 800be64:	3728      	adds	r7, #40	@ 0x28
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	0800f990 	.word	0x0800f990
 800be70:	0800fb3c 	.word	0x0800fb3c
 800be74:	0800fa08 	.word	0x0800fa08
 800be78:	200094fc 	.word	0x200094fc
 800be7c:	0800fb4c 	.word	0x0800fb4c
 800be80:	0800fb30 	.word	0x0800fb30
 800be84:	200095ec 	.word	0x200095ec
 800be88:	0800fb74 	.word	0x0800fb74

0800be8c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08a      	sub	sp, #40	@ 0x28
 800be90:	af02      	add	r7, sp, #8
 800be92:	60f8      	str	r0, [r7, #12]
 800be94:	60b9      	str	r1, [r7, #8]
 800be96:	607a      	str	r2, [r7, #4]
 800be98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d106      	bne.n	800beb2 <etharp_raw+0x26>
 800bea4:	4b3a      	ldr	r3, [pc, #232]	@ (800bf90 <etharp_raw+0x104>)
 800bea6:	f240 4257 	movw	r2, #1111	@ 0x457
 800beaa:	493a      	ldr	r1, [pc, #232]	@ (800bf94 <etharp_raw+0x108>)
 800beac:	483a      	ldr	r0, [pc, #232]	@ (800bf98 <etharp_raw+0x10c>)
 800beae:	f001 fd3b 	bl	800d928 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800beb2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800beb6:	211c      	movs	r1, #28
 800beb8:	200e      	movs	r0, #14
 800beba:	f7fb ffa5 	bl	8007e08 <pbuf_alloc>
 800bebe:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800bec0:	69bb      	ldr	r3, [r7, #24]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d102      	bne.n	800becc <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800bec6:	f04f 33ff 	mov.w	r3, #4294967295
 800beca:	e05d      	b.n	800bf88 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800becc:	69bb      	ldr	r3, [r7, #24]
 800bece:	895b      	ldrh	r3, [r3, #10]
 800bed0:	2b1b      	cmp	r3, #27
 800bed2:	d806      	bhi.n	800bee2 <etharp_raw+0x56>
 800bed4:	4b2e      	ldr	r3, [pc, #184]	@ (800bf90 <etharp_raw+0x104>)
 800bed6:	f240 4262 	movw	r2, #1122	@ 0x462
 800beda:	4930      	ldr	r1, [pc, #192]	@ (800bf9c <etharp_raw+0x110>)
 800bedc:	482e      	ldr	r0, [pc, #184]	@ (800bf98 <etharp_raw+0x10c>)
 800bede:	f001 fd23 	bl	800d928 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800bee8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800beea:	4618      	mov	r0, r3
 800beec:	f7fa ff52 	bl	8006d94 <lwip_htons>
 800bef0:	4603      	mov	r3, r0
 800bef2:	461a      	mov	r2, r3
 800bef4:	697b      	ldr	r3, [r7, #20]
 800bef6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800befe:	2b06      	cmp	r3, #6
 800bf00:	d006      	beq.n	800bf10 <etharp_raw+0x84>
 800bf02:	4b23      	ldr	r3, [pc, #140]	@ (800bf90 <etharp_raw+0x104>)
 800bf04:	f240 4269 	movw	r2, #1129	@ 0x469
 800bf08:	4925      	ldr	r1, [pc, #148]	@ (800bfa0 <etharp_raw+0x114>)
 800bf0a:	4823      	ldr	r0, [pc, #140]	@ (800bf98 <etharp_raw+0x10c>)
 800bf0c:	f001 fd0c 	bl	800d928 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	3308      	adds	r3, #8
 800bf14:	2206      	movs	r2, #6
 800bf16:	6839      	ldr	r1, [r7, #0]
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f001 fde0 	bl	800dade <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	3312      	adds	r3, #18
 800bf22:	2206      	movs	r2, #6
 800bf24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bf26:	4618      	mov	r0, r3
 800bf28:	f001 fdd9 	bl	800dade <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	330e      	adds	r3, #14
 800bf30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf32:	6812      	ldr	r2, [r2, #0]
 800bf34:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	3318      	adds	r3, #24
 800bf3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf3c:	6812      	ldr	r2, [r2, #0]
 800bf3e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800bf40:	697b      	ldr	r3, [r7, #20]
 800bf42:	2200      	movs	r2, #0
 800bf44:	701a      	strb	r2, [r3, #0]
 800bf46:	2200      	movs	r2, #0
 800bf48:	f042 0201 	orr.w	r2, r2, #1
 800bf4c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800bf4e:	697b      	ldr	r3, [r7, #20]
 800bf50:	2200      	movs	r2, #0
 800bf52:	f042 0208 	orr.w	r2, r2, #8
 800bf56:	709a      	strb	r2, [r3, #2]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	2206      	movs	r2, #6
 800bf60:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800bf62:	697b      	ldr	r3, [r7, #20]
 800bf64:	2204      	movs	r2, #4
 800bf66:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800bf68:	f640 0306 	movw	r3, #2054	@ 0x806
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	68ba      	ldr	r2, [r7, #8]
 800bf72:	69b9      	ldr	r1, [r7, #24]
 800bf74:	68f8      	ldr	r0, [r7, #12]
 800bf76:	f001 fb8f 	bl	800d698 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800bf7a:	69b8      	ldr	r0, [r7, #24]
 800bf7c:	f7fc fa26 	bl	80083cc <pbuf_free>
  p = NULL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800bf84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3720      	adds	r7, #32
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	0800f990 	.word	0x0800f990
 800bf94:	0800fae0 	.word	0x0800fae0
 800bf98:	0800fa08 	.word	0x0800fa08
 800bf9c:	0800fb90 	.word	0x0800fb90
 800bfa0:	0800fbc4 	.word	0x0800fbc4

0800bfa4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b088      	sub	sp, #32
 800bfa8:	af04      	add	r7, sp, #16
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	9203      	str	r2, [sp, #12]
 800bfc4:	68ba      	ldr	r2, [r7, #8]
 800bfc6:	9202      	str	r2, [sp, #8]
 800bfc8:	4a06      	ldr	r2, [pc, #24]	@ (800bfe4 <etharp_request_dst+0x40>)
 800bfca:	9201      	str	r2, [sp, #4]
 800bfcc:	9300      	str	r3, [sp, #0]
 800bfce:	4603      	mov	r3, r0
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff ff5a 	bl	800be8c <etharp_raw>
 800bfd8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3710      	adds	r7, #16
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	08010110 	.word	0x08010110

0800bfe8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bfe8:	b580      	push	{r7, lr}
 800bfea:	b082      	sub	sp, #8
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800bff2:	4a05      	ldr	r2, [pc, #20]	@ (800c008 <etharp_request+0x20>)
 800bff4:	6839      	ldr	r1, [r7, #0]
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f7ff ffd4 	bl	800bfa4 <etharp_request_dst>
 800bffc:	4603      	mov	r3, r0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3708      	adds	r7, #8
 800c002:	46bd      	mov	sp, r7
 800c004:	bd80      	pop	{r7, pc}
 800c006:	bf00      	nop
 800c008:	08010108 	.word	0x08010108

0800c00c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b08e      	sub	sp, #56	@ 0x38
 800c010:	af04      	add	r7, sp, #16
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800c016:	4b79      	ldr	r3, [pc, #484]	@ (800c1fc <icmp_input+0x1f0>)
 800c018:	689b      	ldr	r3, [r3, #8]
 800c01a:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800c01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	f003 030f 	and.w	r3, r3, #15
 800c024:	b2db      	uxtb	r3, r3
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 800c02c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c02e:	2b13      	cmp	r3, #19
 800c030:	f240 80cd 	bls.w	800c1ce <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	895b      	ldrh	r3, [r3, #10]
 800c038:	2b03      	cmp	r3, #3
 800c03a:	f240 80ca 	bls.w	800c1d2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	781b      	ldrb	r3, [r3, #0]
 800c044:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800c048:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	f000 80b7 	beq.w	800c1c0 <icmp_input+0x1b4>
 800c052:	2b08      	cmp	r3, #8
 800c054:	f040 80b7 	bne.w	800c1c6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800c058:	4b69      	ldr	r3, [pc, #420]	@ (800c200 <icmp_input+0x1f4>)
 800c05a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c05c:	4b67      	ldr	r3, [pc, #412]	@ (800c1fc <icmp_input+0x1f0>)
 800c05e:	695b      	ldr	r3, [r3, #20]
 800c060:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c064:	2be0      	cmp	r3, #224	@ 0xe0
 800c066:	f000 80bb 	beq.w	800c1e0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800c06a:	4b64      	ldr	r3, [pc, #400]	@ (800c1fc <icmp_input+0x1f0>)
 800c06c:	695b      	ldr	r3, [r3, #20]
 800c06e:	4a63      	ldr	r2, [pc, #396]	@ (800c1fc <icmp_input+0x1f0>)
 800c070:	6812      	ldr	r2, [r2, #0]
 800c072:	4611      	mov	r1, r2
 800c074:	4618      	mov	r0, r3
 800c076:	f000 fc01 	bl	800c87c <ip4_addr_isbroadcast_u32>
 800c07a:	4603      	mov	r3, r0
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	f040 80b1 	bne.w	800c1e4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	891b      	ldrh	r3, [r3, #8]
 800c086:	2b07      	cmp	r3, #7
 800c088:	f240 80a5 	bls.w	800c1d6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c08c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c08e:	330e      	adds	r3, #14
 800c090:	4619      	mov	r1, r3
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f7fc f904 	bl	80082a0 <pbuf_add_header>
 800c098:	4603      	mov	r3, r0
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d04b      	beq.n	800c136 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	891a      	ldrh	r2, [r3, #8]
 800c0a2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0a4:	4413      	add	r3, r2
 800c0a6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	891b      	ldrh	r3, [r3, #8]
 800c0ac:	8b7a      	ldrh	r2, [r7, #26]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	f0c0 809a 	bcc.w	800c1e8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800c0b4:	8b7b      	ldrh	r3, [r7, #26]
 800c0b6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c0ba:	4619      	mov	r1, r3
 800c0bc:	200e      	movs	r0, #14
 800c0be:	f7fb fea3 	bl	8007e08 <pbuf_alloc>
 800c0c2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800c0c4:	697b      	ldr	r3, [r7, #20]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	f000 8090 	beq.w	800c1ec <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	895b      	ldrh	r3, [r3, #10]
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0d4:	3308      	adds	r3, #8
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d203      	bcs.n	800c0e2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800c0da:	6978      	ldr	r0, [r7, #20]
 800c0dc:	f7fc f976 	bl	80083cc <pbuf_free>
          goto icmperr;
 800c0e0:	e085      	b.n	800c1ee <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800c0e2:	697b      	ldr	r3, [r7, #20]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800c0e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c0ea:	4618      	mov	r0, r3
 800c0ec:	f001 fcf7 	bl	800dade <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800c0f0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c0f2:	4619      	mov	r1, r3
 800c0f4:	6978      	ldr	r0, [r7, #20]
 800c0f6:	f7fc f8e3 	bl	80082c0 <pbuf_remove_header>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d009      	beq.n	800c114 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800c100:	4b40      	ldr	r3, [pc, #256]	@ (800c204 <icmp_input+0x1f8>)
 800c102:	22b6      	movs	r2, #182	@ 0xb6
 800c104:	4940      	ldr	r1, [pc, #256]	@ (800c208 <icmp_input+0x1fc>)
 800c106:	4841      	ldr	r0, [pc, #260]	@ (800c20c <icmp_input+0x200>)
 800c108:	f001 fc0e 	bl	800d928 <iprintf>
          pbuf_free(r);
 800c10c:	6978      	ldr	r0, [r7, #20]
 800c10e:	f7fc f95d 	bl	80083cc <pbuf_free>
          goto icmperr;
 800c112:	e06c      	b.n	800c1ee <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800c114:	6879      	ldr	r1, [r7, #4]
 800c116:	6978      	ldr	r0, [r7, #20]
 800c118:	f7fc fa80 	bl	800861c <pbuf_copy>
 800c11c:	4603      	mov	r3, r0
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d003      	beq.n	800c12a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800c122:	6978      	ldr	r0, [r7, #20]
 800c124:	f7fc f952 	bl	80083cc <pbuf_free>
          goto icmperr;
 800c128:	e061      	b.n	800c1ee <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7fc f94e 	bl	80083cc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	607b      	str	r3, [r7, #4]
 800c134:	e00f      	b.n	800c156 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800c136:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c138:	330e      	adds	r3, #14
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7fc f8bf 	bl	80082c0 <pbuf_remove_header>
 800c142:	4603      	mov	r3, r0
 800c144:	2b00      	cmp	r3, #0
 800c146:	d006      	beq.n	800c156 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800c148:	4b2e      	ldr	r3, [pc, #184]	@ (800c204 <icmp_input+0x1f8>)
 800c14a:	22c7      	movs	r2, #199	@ 0xc7
 800c14c:	4930      	ldr	r1, [pc, #192]	@ (800c210 <icmp_input+0x204>)
 800c14e:	482f      	ldr	r0, [pc, #188]	@ (800c20c <icmp_input+0x200>)
 800c150:	f001 fbea 	bl	800d928 <iprintf>
          goto icmperr;
 800c154:	e04b      	b.n	800c1ee <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	685b      	ldr	r3, [r3, #4]
 800c15a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800c15c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7fc f89d 	bl	80082a0 <pbuf_add_header>
 800c166:	4603      	mov	r3, r0
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d12b      	bne.n	800c1c4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800c172:	69fb      	ldr	r3, [r7, #28]
 800c174:	681a      	ldr	r2, [r3, #0]
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800c17a:	4b20      	ldr	r3, [pc, #128]	@ (800c1fc <icmp_input+0x1f0>)
 800c17c:	691a      	ldr	r2, [r3, #16]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800c182:	693b      	ldr	r3, [r7, #16]
 800c184:	2200      	movs	r2, #0
 800c186:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800c188:	693b      	ldr	r3, [r7, #16]
 800c18a:	2200      	movs	r2, #0
 800c18c:	709a      	strb	r2, [r3, #2]
 800c18e:	2200      	movs	r2, #0
 800c190:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	22ff      	movs	r2, #255	@ 0xff
 800c196:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	2200      	movs	r2, #0
 800c19c:	729a      	strb	r2, [r3, #10]
 800c19e:	2200      	movs	r2, #0
 800c1a0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	9302      	str	r3, [sp, #8]
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	9301      	str	r3, [sp, #4]
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	9300      	str	r3, [sp, #0]
 800c1ae:	23ff      	movs	r3, #255	@ 0xff
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	69f9      	ldr	r1, [r7, #28]
 800c1b4:	6878      	ldr	r0, [r7, #4]
 800c1b6:	f000 fa89 	bl	800c6cc <ip4_output_if>
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800c1be:	e001      	b.n	800c1c4 <icmp_input+0x1b8>
      break;
 800c1c0:	bf00      	nop
 800c1c2:	e000      	b.n	800c1c6 <icmp_input+0x1ba>
      break;
 800c1c4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800c1c6:	6878      	ldr	r0, [r7, #4]
 800c1c8:	f7fc f900 	bl	80083cc <pbuf_free>
  return;
 800c1cc:	e013      	b.n	800c1f6 <icmp_input+0x1ea>
    goto lenerr;
 800c1ce:	bf00      	nop
 800c1d0:	e002      	b.n	800c1d8 <icmp_input+0x1cc>
    goto lenerr;
 800c1d2:	bf00      	nop
 800c1d4:	e000      	b.n	800c1d8 <icmp_input+0x1cc>
        goto lenerr;
 800c1d6:	bf00      	nop
lenerr:
  pbuf_free(p);
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f7fc f8f7 	bl	80083cc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c1de:	e00a      	b.n	800c1f6 <icmp_input+0x1ea>
        goto icmperr;
 800c1e0:	bf00      	nop
 800c1e2:	e004      	b.n	800c1ee <icmp_input+0x1e2>
        goto icmperr;
 800c1e4:	bf00      	nop
 800c1e6:	e002      	b.n	800c1ee <icmp_input+0x1e2>
          goto icmperr;
 800c1e8:	bf00      	nop
 800c1ea:	e000      	b.n	800c1ee <icmp_input+0x1e2>
          goto icmperr;
 800c1ec:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7fc f8ec 	bl	80083cc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800c1f4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800c1f6:	3728      	adds	r7, #40	@ 0x28
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}
 800c1fc:	20006a94 	.word	0x20006a94
 800c200:	20006aa8 	.word	0x20006aa8
 800c204:	0800fc08 	.word	0x0800fc08
 800c208:	0800fc40 	.word	0x0800fc40
 800c20c:	0800fc78 	.word	0x0800fc78
 800c210:	0800fca0 	.word	0x0800fca0

0800c214 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800c214:	b580      	push	{r7, lr}
 800c216:	b082      	sub	sp, #8
 800c218:	af00      	add	r7, sp, #0
 800c21a:	6078      	str	r0, [r7, #4]
 800c21c:	460b      	mov	r3, r1
 800c21e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800c220:	78fb      	ldrb	r3, [r7, #3]
 800c222:	461a      	mov	r2, r3
 800c224:	2103      	movs	r1, #3
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	f000 f814 	bl	800c254 <icmp_send_response>
}
 800c22c:	bf00      	nop
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}

0800c234 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800c234:	b580      	push	{r7, lr}
 800c236:	b082      	sub	sp, #8
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
 800c23c:	460b      	mov	r3, r1
 800c23e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	461a      	mov	r2, r3
 800c244:	210b      	movs	r1, #11
 800c246:	6878      	ldr	r0, [r7, #4]
 800c248:	f000 f804 	bl	800c254 <icmp_send_response>
}
 800c24c:	bf00      	nop
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}

0800c254 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800c254:	b580      	push	{r7, lr}
 800c256:	b08c      	sub	sp, #48	@ 0x30
 800c258:	af04      	add	r7, sp, #16
 800c25a:	6078      	str	r0, [r7, #4]
 800c25c:	460b      	mov	r3, r1
 800c25e:	70fb      	strb	r3, [r7, #3]
 800c260:	4613      	mov	r3, r2
 800c262:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800c264:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800c268:	2124      	movs	r1, #36	@ 0x24
 800c26a:	2022      	movs	r0, #34	@ 0x22
 800c26c:	f7fb fdcc 	bl	8007e08 <pbuf_alloc>
 800c270:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800c272:	69fb      	ldr	r3, [r7, #28]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d04c      	beq.n	800c312 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	895b      	ldrh	r3, [r3, #10]
 800c27c:	2b23      	cmp	r3, #35	@ 0x23
 800c27e:	d806      	bhi.n	800c28e <icmp_send_response+0x3a>
 800c280:	4b26      	ldr	r3, [pc, #152]	@ (800c31c <icmp_send_response+0xc8>)
 800c282:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 800c286:	4926      	ldr	r1, [pc, #152]	@ (800c320 <icmp_send_response+0xcc>)
 800c288:	4826      	ldr	r0, [pc, #152]	@ (800c324 <icmp_send_response+0xd0>)
 800c28a:	f001 fb4d 	bl	800d928 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800c294:	69fb      	ldr	r3, [r7, #28]
 800c296:	685b      	ldr	r3, [r3, #4]
 800c298:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	78fa      	ldrb	r2, [r7, #3]
 800c29e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	78ba      	ldrb	r2, [r7, #2]
 800c2a4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	711a      	strb	r2, [r3, #4]
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800c2b0:	697b      	ldr	r3, [r7, #20]
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	719a      	strb	r2, [r3, #6]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	685b      	ldr	r3, [r3, #4]
 800c2be:	f103 0008 	add.w	r0, r3, #8
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	685b      	ldr	r3, [r3, #4]
 800c2c6:	221c      	movs	r2, #28
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f001 fc08 	bl	800dade <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800c2d4:	f107 030c 	add.w	r3, r7, #12
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f000 f825 	bl	800c328 <ip4_route>
 800c2de:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d011      	beq.n	800c30a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	709a      	strb	r2, [r3, #2]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800c2f0:	f107 020c 	add.w	r2, r7, #12
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	9302      	str	r3, [sp, #8]
 800c2f8:	2301      	movs	r3, #1
 800c2fa:	9301      	str	r3, [sp, #4]
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	9300      	str	r3, [sp, #0]
 800c300:	23ff      	movs	r3, #255	@ 0xff
 800c302:	2100      	movs	r1, #0
 800c304:	69f8      	ldr	r0, [r7, #28]
 800c306:	f000 f9e1 	bl	800c6cc <ip4_output_if>
  }
  pbuf_free(q);
 800c30a:	69f8      	ldr	r0, [r7, #28]
 800c30c:	f7fc f85e 	bl	80083cc <pbuf_free>
 800c310:	e000      	b.n	800c314 <icmp_send_response+0xc0>
    return;
 800c312:	bf00      	nop
}
 800c314:	3720      	adds	r7, #32
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	0800fc08 	.word	0x0800fc08
 800c320:	0800fcd4 	.word	0x0800fcd4
 800c324:	0800fc78 	.word	0x0800fc78

0800c328 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800c330:	4b33      	ldr	r3, [pc, #204]	@ (800c400 <ip4_route+0xd8>)
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	60fb      	str	r3, [r7, #12]
 800c336:	e036      	b.n	800c3a6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c33e:	f003 0301 	and.w	r3, r3, #1
 800c342:	b2db      	uxtb	r3, r3
 800c344:	2b00      	cmp	r3, #0
 800c346:	d02b      	beq.n	800c3a0 <ip4_route+0x78>
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c34e:	089b      	lsrs	r3, r3, #2
 800c350:	f003 0301 	and.w	r3, r3, #1
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d022      	beq.n	800c3a0 <ip4_route+0x78>
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	3304      	adds	r3, #4
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d01d      	beq.n	800c3a0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681a      	ldr	r2, [r3, #0]
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	3304      	adds	r3, #4
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	405a      	eors	r2, r3
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	3308      	adds	r3, #8
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	4013      	ands	r3, r2
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d101      	bne.n	800c380 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	e038      	b.n	800c3f2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c386:	f003 0302 	and.w	r3, r3, #2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d108      	bne.n	800c3a0 <ip4_route+0x78>
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	330c      	adds	r3, #12
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	429a      	cmp	r2, r3
 800c39a:	d101      	bne.n	800c3a0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	e028      	b.n	800c3f2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	60fb      	str	r3, [r7, #12]
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1c5      	bne.n	800c338 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c3ac:	4b15      	ldr	r3, [pc, #84]	@ (800c404 <ip4_route+0xdc>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d01a      	beq.n	800c3ea <ip4_route+0xc2>
 800c3b4:	4b13      	ldr	r3, [pc, #76]	@ (800c404 <ip4_route+0xdc>)
 800c3b6:	681b      	ldr	r3, [r3, #0]
 800c3b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d012      	beq.n	800c3ea <ip4_route+0xc2>
 800c3c4:	4b0f      	ldr	r3, [pc, #60]	@ (800c404 <ip4_route+0xdc>)
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c3d4:	4b0b      	ldr	r3, [pc, #44]	@ (800c404 <ip4_route+0xdc>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d004      	beq.n	800c3ea <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b7f      	cmp	r3, #127	@ 0x7f
 800c3e8:	d101      	bne.n	800c3ee <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	e001      	b.n	800c3f2 <ip4_route+0xca>
  }

  return netif_default;
 800c3ee:	4b05      	ldr	r3, [pc, #20]	@ (800c404 <ip4_route+0xdc>)
 800c3f0:	681b      	ldr	r3, [r3, #0]
}
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	3714      	adds	r7, #20
 800c3f6:	46bd      	mov	sp, r7
 800c3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fc:	4770      	bx	lr
 800c3fe:	bf00      	nop
 800c400:	200094b0 	.word	0x200094b0
 800c404:	200094b4 	.word	0x200094b4

0800c408 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c416:	f003 0301 	and.w	r3, r3, #1
 800c41a:	b2db      	uxtb	r3, r3
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d016      	beq.n	800c44e <ip4_input_accept+0x46>
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	3304      	adds	r3, #4
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d011      	beq.n	800c44e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c42a:	4b0b      	ldr	r3, [pc, #44]	@ (800c458 <ip4_input_accept+0x50>)
 800c42c:	695a      	ldr	r2, [r3, #20]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	3304      	adds	r3, #4
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	429a      	cmp	r2, r3
 800c436:	d008      	beq.n	800c44a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800c438:	4b07      	ldr	r3, [pc, #28]	@ (800c458 <ip4_input_accept+0x50>)
 800c43a:	695b      	ldr	r3, [r3, #20]
 800c43c:	6879      	ldr	r1, [r7, #4]
 800c43e:	4618      	mov	r0, r3
 800c440:	f000 fa1c 	bl	800c87c <ip4_addr_isbroadcast_u32>
 800c444:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800c446:	2b00      	cmp	r3, #0
 800c448:	d001      	beq.n	800c44e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e000      	b.n	800c450 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	20006a94 	.word	0x20006a94

0800c45c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b088      	sub	sp, #32
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
 800c464:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800c466:	2301      	movs	r3, #1
 800c468:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	685b      	ldr	r3, [r3, #4]
 800c46e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800c470:	69fb      	ldr	r3, [r7, #28]
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	091b      	lsrs	r3, r3, #4
 800c476:	b2db      	uxtb	r3, r3
 800c478:	2b04      	cmp	r3, #4
 800c47a:	d004      	beq.n	800c486 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800c47c:	6878      	ldr	r0, [r7, #4]
 800c47e:	f7fb ffa5 	bl	80083cc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800c482:	2300      	movs	r3, #0
 800c484:	e119      	b.n	800c6ba <ip4_input+0x25e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	781b      	ldrb	r3, [r3, #0]
 800c48a:	f003 030f 	and.w	r3, r3, #15
 800c48e:	b2db      	uxtb	r3, r3
 800c490:	009b      	lsls	r3, r3, #2
 800c492:	b2db      	uxtb	r3, r3
 800c494:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800c496:	69fb      	ldr	r3, [r7, #28]
 800c498:	885b      	ldrh	r3, [r3, #2]
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	4618      	mov	r0, r3
 800c49e:	f7fa fc79 	bl	8006d94 <lwip_htons>
 800c4a2:	4603      	mov	r3, r0
 800c4a4:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	891b      	ldrh	r3, [r3, #8]
 800c4aa:	8a3a      	ldrh	r2, [r7, #16]
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	d204      	bcs.n	800c4ba <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800c4b0:	8a3b      	ldrh	r3, [r7, #16]
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	6878      	ldr	r0, [r7, #4]
 800c4b6:	f7fb fe03 	bl	80080c0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	895b      	ldrh	r3, [r3, #10]
 800c4be:	8a7a      	ldrh	r2, [r7, #18]
 800c4c0:	429a      	cmp	r2, r3
 800c4c2:	d807      	bhi.n	800c4d4 <ip4_input+0x78>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	891b      	ldrh	r3, [r3, #8]
 800c4c8:	8a3a      	ldrh	r2, [r7, #16]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d802      	bhi.n	800c4d4 <ip4_input+0x78>
 800c4ce:	8a7b      	ldrh	r3, [r7, #18]
 800c4d0:	2b13      	cmp	r3, #19
 800c4d2:	d804      	bhi.n	800c4de <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800c4d4:	6878      	ldr	r0, [r7, #4]
 800c4d6:	f7fb ff79 	bl	80083cc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	e0ed      	b.n	800c6ba <ip4_input+0x25e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800c4de:	69fb      	ldr	r3, [r7, #28]
 800c4e0:	691b      	ldr	r3, [r3, #16]
 800c4e2:	4a78      	ldr	r2, [pc, #480]	@ (800c6c4 <ip4_input+0x268>)
 800c4e4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	68db      	ldr	r3, [r3, #12]
 800c4ea:	4a76      	ldr	r2, [pc, #472]	@ (800c6c4 <ip4_input+0x268>)
 800c4ec:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c4ee:	4b75      	ldr	r3, [pc, #468]	@ (800c6c4 <ip4_input+0x268>)
 800c4f0:	695b      	ldr	r3, [r3, #20]
 800c4f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c4f6:	2be0      	cmp	r3, #224	@ 0xe0
 800c4f8:	d112      	bne.n	800c520 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c500:	f003 0301 	and.w	r3, r3, #1
 800c504:	b2db      	uxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	d007      	beq.n	800c51a <ip4_input+0xbe>
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	3304      	adds	r3, #4
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d002      	beq.n	800c51a <ip4_input+0xbe>
      netif = inp;
 800c514:	683b      	ldr	r3, [r7, #0]
 800c516:	61bb      	str	r3, [r7, #24]
 800c518:	e02a      	b.n	800c570 <ip4_input+0x114>
    } else {
      netif = NULL;
 800c51a:	2300      	movs	r3, #0
 800c51c:	61bb      	str	r3, [r7, #24]
 800c51e:	e027      	b.n	800c570 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800c520:	6838      	ldr	r0, [r7, #0]
 800c522:	f7ff ff71 	bl	800c408 <ip4_input_accept>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d002      	beq.n	800c532 <ip4_input+0xd6>
      netif = inp;
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	61bb      	str	r3, [r7, #24]
 800c530:	e01e      	b.n	800c570 <ip4_input+0x114>
    } else {
      netif = NULL;
 800c532:	2300      	movs	r3, #0
 800c534:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800c536:	4b63      	ldr	r3, [pc, #396]	@ (800c6c4 <ip4_input+0x268>)
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c53e:	d017      	beq.n	800c570 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800c540:	4b61      	ldr	r3, [pc, #388]	@ (800c6c8 <ip4_input+0x26c>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	61bb      	str	r3, [r7, #24]
 800c546:	e00e      	b.n	800c566 <ip4_input+0x10a>
          if (netif == inp) {
 800c548:	69ba      	ldr	r2, [r7, #24]
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d006      	beq.n	800c55e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800c550:	69b8      	ldr	r0, [r7, #24]
 800c552:	f7ff ff59 	bl	800c408 <ip4_input_accept>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d108      	bne.n	800c56e <ip4_input+0x112>
 800c55c:	e000      	b.n	800c560 <ip4_input+0x104>
            continue;
 800c55e:	bf00      	nop
        NETIF_FOREACH(netif) {
 800c560:	69bb      	ldr	r3, [r7, #24]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	61bb      	str	r3, [r7, #24]
 800c566:	69bb      	ldr	r3, [r7, #24]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d1ed      	bne.n	800c548 <ip4_input+0xec>
 800c56c:	e000      	b.n	800c570 <ip4_input+0x114>
            break;
 800c56e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800c570:	69bb      	ldr	r3, [r7, #24]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d111      	bne.n	800c59a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	7a5b      	ldrb	r3, [r3, #9]
 800c57a:	2b11      	cmp	r3, #17
 800c57c:	d10d      	bne.n	800c59a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800c57e:	8a7b      	ldrh	r3, [r7, #18]
 800c580:	69fa      	ldr	r2, [r7, #28]
 800c582:	4413      	add	r3, r2
 800c584:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	885b      	ldrh	r3, [r3, #2]
 800c58a:	b29b      	uxth	r3, r3
 800c58c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 800c590:	d103      	bne.n	800c59a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800c596:	2300      	movs	r3, #0
 800c598:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d017      	beq.n	800c5d0 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800c5a0:	4b48      	ldr	r3, [pc, #288]	@ (800c6c4 <ip4_input+0x268>)
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d013      	beq.n	800c5d0 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c5a8:	4b46      	ldr	r3, [pc, #280]	@ (800c6c4 <ip4_input+0x268>)
 800c5aa:	691b      	ldr	r3, [r3, #16]
 800c5ac:	6839      	ldr	r1, [r7, #0]
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 f964 	bl	800c87c <ip4_addr_isbroadcast_u32>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d105      	bne.n	800c5c6 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800c5ba:	4b42      	ldr	r3, [pc, #264]	@ (800c6c4 <ip4_input+0x268>)
 800c5bc:	691b      	ldr	r3, [r3, #16]
 800c5be:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800c5c2:	2be0      	cmp	r3, #224	@ 0xe0
 800c5c4:	d104      	bne.n	800c5d0 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800c5c6:	6878      	ldr	r0, [r7, #4]
 800c5c8:	f7fb ff00 	bl	80083cc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	e074      	b.n	800c6ba <ip4_input+0x25e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800c5d0:	69bb      	ldr	r3, [r7, #24]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d104      	bne.n	800c5e0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	f7fb fef8 	bl	80083cc <pbuf_free>
    return ERR_OK;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	e06c      	b.n	800c6ba <ip4_input+0x25e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800c5e0:	69fb      	ldr	r3, [r7, #28]
 800c5e2:	88db      	ldrh	r3, [r3, #6]
 800c5e4:	b29b      	uxth	r3, r3
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 800c5ec:	4013      	ands	r3, r2
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f000 fc88 	bl	800cf08 <ip4_reass>
 800c5f8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <ip4_input+0x1a8>
      return ERR_OK;
 800c600:	2300      	movs	r3, #0
 800c602:	e05a      	b.n	800c6ba <ip4_input+0x25e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800c60a:	4a2e      	ldr	r2, [pc, #184]	@ (800c6c4 <ip4_input+0x268>)
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800c610:	4a2c      	ldr	r2, [pc, #176]	@ (800c6c4 <ip4_input+0x268>)
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800c616:	4a2b      	ldr	r2, [pc, #172]	@ (800c6c4 <ip4_input+0x268>)
 800c618:	69fb      	ldr	r3, [r7, #28]
 800c61a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800c61c:	69fb      	ldr	r3, [r7, #28]
 800c61e:	781b      	ldrb	r3, [r3, #0]
 800c620:	f003 030f 	and.w	r3, r3, #15
 800c624:	b2db      	uxtb	r3, r3
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	461a      	mov	r2, r3
 800c62c:	4b25      	ldr	r3, [pc, #148]	@ (800c6c4 <ip4_input+0x268>)
 800c62e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800c630:	8a7b      	ldrh	r3, [r7, #18]
 800c632:	4619      	mov	r1, r3
 800c634:	6878      	ldr	r0, [r7, #4]
 800c636:	f7fb fe43 	bl	80082c0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	7a5b      	ldrb	r3, [r3, #9]
 800c63e:	2b01      	cmp	r3, #1
 800c640:	d006      	beq.n	800c650 <ip4_input+0x1f4>
 800c642:	2b11      	cmp	r3, #17
 800c644:	d109      	bne.n	800c65a <ip4_input+0x1fe>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800c646:	6839      	ldr	r1, [r7, #0]
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f7fc faf3 	bl	8008c34 <udp_input>
        break;
 800c64e:	e021      	b.n	800c694 <ip4_input+0x238>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800c650:	6839      	ldr	r1, [r7, #0]
 800c652:	6878      	ldr	r0, [r7, #4]
 800c654:	f7ff fcda 	bl	800c00c <icmp_input>
        break;
 800c658:	e01c      	b.n	800c694 <ip4_input+0x238>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c65a:	4b1a      	ldr	r3, [pc, #104]	@ (800c6c4 <ip4_input+0x268>)
 800c65c:	695b      	ldr	r3, [r3, #20]
 800c65e:	69b9      	ldr	r1, [r7, #24]
 800c660:	4618      	mov	r0, r3
 800c662:	f000 f90b 	bl	800c87c <ip4_addr_isbroadcast_u32>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d10f      	bne.n	800c68c <ip4_input+0x230>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800c66c:	4b15      	ldr	r3, [pc, #84]	@ (800c6c4 <ip4_input+0x268>)
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800c674:	2be0      	cmp	r3, #224	@ 0xe0
 800c676:	d009      	beq.n	800c68c <ip4_input+0x230>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800c678:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7fb fe91 	bl	80083a6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800c684:	2102      	movs	r1, #2
 800c686:	6878      	ldr	r0, [r7, #4]
 800c688:	f7ff fdc4 	bl	800c214 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800c68c:	6878      	ldr	r0, [r7, #4]
 800c68e:	f7fb fe9d 	bl	80083cc <pbuf_free>
        break;
 800c692:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800c694:	4b0b      	ldr	r3, [pc, #44]	@ (800c6c4 <ip4_input+0x268>)
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800c69a:	4b0a      	ldr	r3, [pc, #40]	@ (800c6c4 <ip4_input+0x268>)
 800c69c:	2200      	movs	r2, #0
 800c69e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800c6a0:	4b08      	ldr	r3, [pc, #32]	@ (800c6c4 <ip4_input+0x268>)
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800c6a6:	4b07      	ldr	r3, [pc, #28]	@ (800c6c4 <ip4_input+0x268>)
 800c6a8:	2200      	movs	r2, #0
 800c6aa:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800c6ac:	4b05      	ldr	r3, [pc, #20]	@ (800c6c4 <ip4_input+0x268>)
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800c6b2:	4b04      	ldr	r3, [pc, #16]	@ (800c6c4 <ip4_input+0x268>)
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800c6b8:	2300      	movs	r3, #0
}
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	3720      	adds	r7, #32
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	bd80      	pop	{r7, pc}
 800c6c2:	bf00      	nop
 800c6c4:	20006a94 	.word	0x20006a94
 800c6c8:	200094b0 	.word	0x200094b0

0800c6cc <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b08a      	sub	sp, #40	@ 0x28
 800c6d0:	af04      	add	r7, sp, #16
 800c6d2:	60f8      	str	r0, [r7, #12]
 800c6d4:	60b9      	str	r1, [r7, #8]
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d009      	beq.n	800c6f8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d003      	beq.n	800c6f2 <ip4_output_if+0x26>
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d102      	bne.n	800c6f8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800c6f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6f4:	3304      	adds	r3, #4
 800c6f6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800c6f8:	78fa      	ldrb	r2, [r7, #3]
 800c6fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6fc:	9302      	str	r3, [sp, #8]
 800c6fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800c702:	9301      	str	r3, [sp, #4]
 800c704:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c708:	9300      	str	r3, [sp, #0]
 800c70a:	4613      	mov	r3, r2
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	6979      	ldr	r1, [r7, #20]
 800c710:	68f8      	ldr	r0, [r7, #12]
 800c712:	f000 f805 	bl	800c720 <ip4_output_if_src>
 800c716:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800c718:	4618      	mov	r0, r3
 800c71a:	3718      	adds	r7, #24
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b088      	sub	sp, #32
 800c724:	af00      	add	r7, sp, #0
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	607a      	str	r2, [r7, #4]
 800c72c:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	7b9b      	ldrb	r3, [r3, #14]
 800c732:	2b01      	cmp	r3, #1
 800c734:	d006      	beq.n	800c744 <ip4_output_if_src+0x24>
 800c736:	4b4b      	ldr	r3, [pc, #300]	@ (800c864 <ip4_output_if_src+0x144>)
 800c738:	f44f 7255 	mov.w	r2, #852	@ 0x354
 800c73c:	494a      	ldr	r1, [pc, #296]	@ (800c868 <ip4_output_if_src+0x148>)
 800c73e:	484b      	ldr	r0, [pc, #300]	@ (800c86c <ip4_output_if_src+0x14c>)
 800c740:	f001 f8f2 	bl	800d928 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d060      	beq.n	800c80c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800c74a:	2314      	movs	r3, #20
 800c74c:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800c74e:	2114      	movs	r1, #20
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f7fb fda5 	bl	80082a0 <pbuf_add_header>
 800c756:	4603      	mov	r3, r0
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c75c:	f06f 0301 	mvn.w	r3, #1
 800c760:	e07c      	b.n	800c85c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	895b      	ldrh	r3, [r3, #10]
 800c76c:	2b13      	cmp	r3, #19
 800c76e:	d806      	bhi.n	800c77e <ip4_output_if_src+0x5e>
 800c770:	4b3c      	ldr	r3, [pc, #240]	@ (800c864 <ip4_output_if_src+0x144>)
 800c772:	f44f 7262 	mov.w	r2, #904	@ 0x388
 800c776:	493e      	ldr	r1, [pc, #248]	@ (800c870 <ip4_output_if_src+0x150>)
 800c778:	483c      	ldr	r0, [pc, #240]	@ (800c86c <ip4_output_if_src+0x14c>)
 800c77a:	f001 f8d5 	bl	800d928 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	78fa      	ldrb	r2, [r7, #3]
 800c782:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800c78a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681a      	ldr	r2, [r3, #0]
 800c790:	69fb      	ldr	r3, [r7, #28]
 800c792:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800c794:	8b7b      	ldrh	r3, [r7, #26]
 800c796:	089b      	lsrs	r3, r3, #2
 800c798:	b29b      	uxth	r3, r3
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7a0:	b2da      	uxtb	r2, r3
 800c7a2:	69fb      	ldr	r3, [r7, #28]
 800c7a4:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800c7ac:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	891b      	ldrh	r3, [r3, #8]
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7fa faee 	bl	8006d94 <lwip_htons>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	69fb      	ldr	r3, [r7, #28]
 800c7be:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800c7c0:	69fb      	ldr	r3, [r7, #28]
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	719a      	strb	r2, [r3, #6]
 800c7c6:	2200      	movs	r2, #0
 800c7c8:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800c7ca:	4b2a      	ldr	r3, [pc, #168]	@ (800c874 <ip4_output_if_src+0x154>)
 800c7cc:	881b      	ldrh	r3, [r3, #0]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f7fa fae0 	bl	8006d94 <lwip_htons>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800c7dc:	4b25      	ldr	r3, [pc, #148]	@ (800c874 <ip4_output_if_src+0x154>)
 800c7de:	881b      	ldrh	r3, [r3, #0]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	4b23      	ldr	r3, [pc, #140]	@ (800c874 <ip4_output_if_src+0x154>)
 800c7e6:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d104      	bne.n	800c7f8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800c7ee:	4b22      	ldr	r3, [pc, #136]	@ (800c878 <ip4_output_if_src+0x158>)
 800c7f0:	681a      	ldr	r2, [r3, #0]
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	60da      	str	r2, [r3, #12]
 800c7f6:	e003      	b.n	800c800 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	69fb      	ldr	r3, [r7, #28]
 800c7fe:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800c800:	69fb      	ldr	r3, [r7, #28]
 800c802:	2200      	movs	r2, #0
 800c804:	729a      	strb	r2, [r3, #10]
 800c806:	2200      	movs	r2, #0
 800c808:	72da      	strb	r2, [r3, #11]
 800c80a:	e00f      	b.n	800c82c <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	895b      	ldrh	r3, [r3, #10]
 800c810:	2b13      	cmp	r3, #19
 800c812:	d802      	bhi.n	800c81a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800c814:	f06f 0301 	mvn.w	r3, #1
 800c818:	e020      	b.n	800c85c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	691b      	ldr	r3, [r3, #16]
 800c824:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800c826:	f107 0314 	add.w	r3, r7, #20
 800c82a:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800c82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c82e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00c      	beq.n	800c84e <ip4_output_if_src+0x12e>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	891a      	ldrh	r2, [r3, #8]
 800c838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c83a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d906      	bls.n	800c84e <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c844:	68f8      	ldr	r0, [r7, #12]
 800c846:	f000 fd53 	bl	800d2f0 <ip4_frag>
 800c84a:	4603      	mov	r3, r0
 800c84c:	e006      	b.n	800c85c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800c84e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c850:	695b      	ldr	r3, [r3, #20]
 800c852:	687a      	ldr	r2, [r7, #4]
 800c854:	68f9      	ldr	r1, [r7, #12]
 800c856:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c858:	4798      	blx	r3
 800c85a:	4603      	mov	r3, r0
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3720      	adds	r7, #32
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}
 800c864:	0800fd00 	.word	0x0800fd00
 800c868:	0800fd34 	.word	0x0800fd34
 800c86c:	0800fd40 	.word	0x0800fd40
 800c870:	0800fd68 	.word	0x0800fd68
 800c874:	200095ee 	.word	0x200095ee
 800c878:	08010100 	.word	0x08010100

0800c87c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800c87c:	b480      	push	{r7}
 800c87e:	b085      	sub	sp, #20
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c890:	d002      	beq.n	800c898 <ip4_addr_isbroadcast_u32+0x1c>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d101      	bne.n	800c89c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800c898:	2301      	movs	r3, #1
 800c89a:	e02a      	b.n	800c8f2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800c8a2:	f003 0302 	and.w	r3, r3, #2
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d101      	bne.n	800c8ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	e021      	b.n	800c8f2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	3304      	adds	r3, #4
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d101      	bne.n	800c8be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	e019      	b.n	800c8f2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800c8be:	68fa      	ldr	r2, [r7, #12]
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	3304      	adds	r3, #4
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	405a      	eors	r2, r3
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	4013      	ands	r3, r2
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d10d      	bne.n	800c8f0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8d4:	683b      	ldr	r3, [r7, #0]
 800c8d6:	3308      	adds	r3, #8
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	43da      	mvns	r2, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	3308      	adds	r3, #8
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d101      	bne.n	800c8f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800c8ec:	2301      	movs	r3, #1
 800c8ee:	e000      	b.n	800c8f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800c8f0:	2300      	movs	r3, #0
  }
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
	...

0800c900 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800c906:	2300      	movs	r3, #0
 800c908:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800c90a:	4b12      	ldr	r3, [pc, #72]	@ (800c954 <ip_reass_tmr+0x54>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800c910:	e018      	b.n	800c944 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	7fdb      	ldrb	r3, [r3, #31]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d00b      	beq.n	800c932 <ip_reass_tmr+0x32>
      r->timer--;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	7fdb      	ldrb	r3, [r3, #31]
 800c91e:	3b01      	subs	r3, #1
 800c920:	b2da      	uxtb	r2, r3
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	60fb      	str	r3, [r7, #12]
 800c930:	e008      	b.n	800c944 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800c93c:	68b9      	ldr	r1, [r7, #8]
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	f000 f80a 	bl	800c958 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d1e3      	bne.n	800c912 <ip_reass_tmr+0x12>
    }
  }
}
 800c94a:	bf00      	nop
 800c94c:	bf00      	nop
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	200095f0 	.word	0x200095f0

0800c958 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800c962:	2300      	movs	r3, #0
 800c964:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800c966:	683a      	ldr	r2, [r7, #0]
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d105      	bne.n	800c97a <ip_reass_free_complete_datagram+0x22>
 800c96e:	4b45      	ldr	r3, [pc, #276]	@ (800ca84 <ip_reass_free_complete_datagram+0x12c>)
 800c970:	22ab      	movs	r2, #171	@ 0xab
 800c972:	4945      	ldr	r1, [pc, #276]	@ (800ca88 <ip_reass_free_complete_datagram+0x130>)
 800c974:	4845      	ldr	r0, [pc, #276]	@ (800ca8c <ip_reass_free_complete_datagram+0x134>)
 800c976:	f000 ffd7 	bl	800d928 <iprintf>
  if (prev != NULL) {
 800c97a:	683b      	ldr	r3, [r7, #0]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d00a      	beq.n	800c996 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	429a      	cmp	r2, r3
 800c988:	d005      	beq.n	800c996 <ip_reass_free_complete_datagram+0x3e>
 800c98a:	4b3e      	ldr	r3, [pc, #248]	@ (800ca84 <ip_reass_free_complete_datagram+0x12c>)
 800c98c:	22ad      	movs	r2, #173	@ 0xad
 800c98e:	4940      	ldr	r1, [pc, #256]	@ (800ca90 <ip_reass_free_complete_datagram+0x138>)
 800c990:	483e      	ldr	r0, [pc, #248]	@ (800ca8c <ip_reass_free_complete_datagram+0x134>)
 800c992:	f000 ffc9 	bl	800d928 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	685b      	ldr	r3, [r3, #4]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	889b      	ldrh	r3, [r3, #4]
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d12a      	bne.n	800c9fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	685b      	ldr	r3, [r3, #4]
 800c9ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	681a      	ldr	r2, [r3, #0]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800c9b6:	69bb      	ldr	r3, [r7, #24]
 800c9b8:	6858      	ldr	r0, [r3, #4]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	3308      	adds	r3, #8
 800c9be:	2214      	movs	r2, #20
 800c9c0:	4619      	mov	r1, r3
 800c9c2:	f001 f88c 	bl	800dade <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	69b8      	ldr	r0, [r7, #24]
 800c9ca:	f7ff fc33 	bl	800c234 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800c9ce:	69b8      	ldr	r0, [r7, #24]
 800c9d0:	f7fb fd84 	bl	80084dc <pbuf_clen>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800c9d8:	8bfa      	ldrh	r2, [r7, #30]
 800c9da:	8a7b      	ldrh	r3, [r7, #18]
 800c9dc:	4413      	add	r3, r2
 800c9de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c9e2:	db05      	blt.n	800c9f0 <ip_reass_free_complete_datagram+0x98>
 800c9e4:	4b27      	ldr	r3, [pc, #156]	@ (800ca84 <ip_reass_free_complete_datagram+0x12c>)
 800c9e6:	22bc      	movs	r2, #188	@ 0xbc
 800c9e8:	492a      	ldr	r1, [pc, #168]	@ (800ca94 <ip_reass_free_complete_datagram+0x13c>)
 800c9ea:	4828      	ldr	r0, [pc, #160]	@ (800ca8c <ip_reass_free_complete_datagram+0x134>)
 800c9ec:	f000 ff9c 	bl	800d928 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800c9f0:	8bfa      	ldrh	r2, [r7, #30]
 800c9f2:	8a7b      	ldrh	r3, [r7, #18]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800c9f8:	69b8      	ldr	r0, [r7, #24]
 800c9fa:	f7fb fce7 	bl	80083cc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800ca04:	e01f      	b.n	800ca46 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800ca06:	69bb      	ldr	r3, [r7, #24]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ca0c:	69bb      	ldr	r3, [r7, #24]
 800ca0e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f7fb fd60 	bl	80084dc <pbuf_clen>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ca20:	8bfa      	ldrh	r2, [r7, #30]
 800ca22:	8a7b      	ldrh	r3, [r7, #18]
 800ca24:	4413      	add	r3, r2
 800ca26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ca2a:	db05      	blt.n	800ca38 <ip_reass_free_complete_datagram+0xe0>
 800ca2c:	4b15      	ldr	r3, [pc, #84]	@ (800ca84 <ip_reass_free_complete_datagram+0x12c>)
 800ca2e:	22cc      	movs	r2, #204	@ 0xcc
 800ca30:	4918      	ldr	r1, [pc, #96]	@ (800ca94 <ip_reass_free_complete_datagram+0x13c>)
 800ca32:	4816      	ldr	r0, [pc, #88]	@ (800ca8c <ip_reass_free_complete_datagram+0x134>)
 800ca34:	f000 ff78 	bl	800d928 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ca38:	8bfa      	ldrh	r2, [r7, #30]
 800ca3a:	8a7b      	ldrh	r3, [r7, #18]
 800ca3c:	4413      	add	r3, r2
 800ca3e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7fb fcc3 	bl	80083cc <pbuf_free>
  while (p != NULL) {
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1dc      	bne.n	800ca06 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ca4c:	6839      	ldr	r1, [r7, #0]
 800ca4e:	6878      	ldr	r0, [r7, #4]
 800ca50:	f000 f8c2 	bl	800cbd8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ca54:	4b10      	ldr	r3, [pc, #64]	@ (800ca98 <ip_reass_free_complete_datagram+0x140>)
 800ca56:	881b      	ldrh	r3, [r3, #0]
 800ca58:	8bfa      	ldrh	r2, [r7, #30]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d905      	bls.n	800ca6a <ip_reass_free_complete_datagram+0x112>
 800ca5e:	4b09      	ldr	r3, [pc, #36]	@ (800ca84 <ip_reass_free_complete_datagram+0x12c>)
 800ca60:	22d2      	movs	r2, #210	@ 0xd2
 800ca62:	490e      	ldr	r1, [pc, #56]	@ (800ca9c <ip_reass_free_complete_datagram+0x144>)
 800ca64:	4809      	ldr	r0, [pc, #36]	@ (800ca8c <ip_reass_free_complete_datagram+0x134>)
 800ca66:	f000 ff5f 	bl	800d928 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ca6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ca98 <ip_reass_free_complete_datagram+0x140>)
 800ca6c:	881a      	ldrh	r2, [r3, #0]
 800ca6e:	8bfb      	ldrh	r3, [r7, #30]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	b29a      	uxth	r2, r3
 800ca74:	4b08      	ldr	r3, [pc, #32]	@ (800ca98 <ip_reass_free_complete_datagram+0x140>)
 800ca76:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ca78:	8bfb      	ldrh	r3, [r7, #30]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3720      	adds	r7, #32
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	bf00      	nop
 800ca84:	0800fd98 	.word	0x0800fd98
 800ca88:	0800fdd4 	.word	0x0800fdd4
 800ca8c:	0800fde0 	.word	0x0800fde0
 800ca90:	0800fe08 	.word	0x0800fe08
 800ca94:	0800fe1c 	.word	0x0800fe1c
 800ca98:	200095f4 	.word	0x200095f4
 800ca9c:	0800fe3c 	.word	0x0800fe3c

0800caa0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b08a      	sub	sp, #40	@ 0x28
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800caaa:	2300      	movs	r3, #0
 800caac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800caae:	2300      	movs	r3, #0
 800cab0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800cab6:	2300      	movs	r3, #0
 800cab8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800caba:	2300      	movs	r3, #0
 800cabc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800cabe:	4b28      	ldr	r3, [pc, #160]	@ (800cb60 <ip_reass_remove_oldest_datagram+0xc0>)
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cac4:	e030      	b.n	800cb28 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac8:	695a      	ldr	r2, [r3, #20]
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d10c      	bne.n	800caec <ip_reass_remove_oldest_datagram+0x4c>
 800cad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cad4:	699a      	ldr	r2, [r3, #24]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	691b      	ldr	r3, [r3, #16]
 800cada:	429a      	cmp	r2, r3
 800cadc:	d106      	bne.n	800caec <ip_reass_remove_oldest_datagram+0x4c>
 800cade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae0:	899a      	ldrh	r2, [r3, #12]
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	889b      	ldrh	r3, [r3, #4]
 800cae6:	b29b      	uxth	r3, r3
 800cae8:	429a      	cmp	r2, r3
 800caea:	d014      	beq.n	800cb16 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	3301      	adds	r3, #1
 800caf0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800caf2:	6a3b      	ldr	r3, [r7, #32]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d104      	bne.n	800cb02 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800caf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cafa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cafc:	69fb      	ldr	r3, [r7, #28]
 800cafe:	61bb      	str	r3, [r7, #24]
 800cb00:	e009      	b.n	800cb16 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800cb02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb04:	7fda      	ldrb	r2, [r3, #31]
 800cb06:	6a3b      	ldr	r3, [r7, #32]
 800cb08:	7fdb      	ldrb	r3, [r3, #31]
 800cb0a:	429a      	cmp	r2, r3
 800cb0c:	d803      	bhi.n	800cb16 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800cb0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb10:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800cb16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d001      	beq.n	800cb22 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800cb1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb20:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800cb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 800cb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d1cb      	bne.n	800cac6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800cb2e:	6a3b      	ldr	r3, [r7, #32]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d008      	beq.n	800cb46 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800cb34:	69b9      	ldr	r1, [r7, #24]
 800cb36:	6a38      	ldr	r0, [r7, #32]
 800cb38:	f7ff ff0e 	bl	800c958 <ip_reass_free_complete_datagram>
 800cb3c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800cb46:	697a      	ldr	r2, [r7, #20]
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	da02      	bge.n	800cb54 <ip_reass_remove_oldest_datagram+0xb4>
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	2b01      	cmp	r3, #1
 800cb52:	dcac      	bgt.n	800caae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800cb54:	697b      	ldr	r3, [r7, #20]
}
 800cb56:	4618      	mov	r0, r3
 800cb58:	3728      	adds	r7, #40	@ 0x28
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	bd80      	pop	{r7, pc}
 800cb5e:	bf00      	nop
 800cb60:	200095f0 	.word	0x200095f0

0800cb64 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b084      	sub	sp, #16
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
 800cb6c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb6e:	2001      	movs	r0, #1
 800cb70:	f7fa fd92 	bl	8007698 <memp_malloc>
 800cb74:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d110      	bne.n	800cb9e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800cb7c:	6839      	ldr	r1, [r7, #0]
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f7ff ff8e 	bl	800caa0 <ip_reass_remove_oldest_datagram>
 800cb84:	4602      	mov	r2, r0
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	dc03      	bgt.n	800cb94 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800cb8c:	2001      	movs	r0, #1
 800cb8e:	f7fa fd83 	bl	8007698 <memp_malloc>
 800cb92:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d101      	bne.n	800cb9e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	e016      	b.n	800cbcc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800cb9e:	2220      	movs	r2, #32
 800cba0:	2100      	movs	r1, #0
 800cba2:	68f8      	ldr	r0, [r7, #12]
 800cba4:	f000 ff25 	bl	800d9f2 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	220f      	movs	r2, #15
 800cbac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800cbae:	4b09      	ldr	r3, [pc, #36]	@ (800cbd4 <ip_reass_enqueue_new_datagram+0x70>)
 800cbb0:	681a      	ldr	r2, [r3, #0]
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800cbb6:	4a07      	ldr	r2, [pc, #28]	@ (800cbd4 <ip_reass_enqueue_new_datagram+0x70>)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	3308      	adds	r3, #8
 800cbc0:	2214      	movs	r2, #20
 800cbc2:	6879      	ldr	r1, [r7, #4]
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f000 ff8a 	bl	800dade <memcpy>
  return ipr;
 800cbca:	68fb      	ldr	r3, [r7, #12]
}
 800cbcc:	4618      	mov	r0, r3
 800cbce:	3710      	adds	r7, #16
 800cbd0:	46bd      	mov	sp, r7
 800cbd2:	bd80      	pop	{r7, pc}
 800cbd4:	200095f0 	.word	0x200095f0

0800cbd8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800cbe2:	4b10      	ldr	r3, [pc, #64]	@ (800cc24 <ip_reass_dequeue_datagram+0x4c>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d104      	bne.n	800cbf6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	4a0c      	ldr	r2, [pc, #48]	@ (800cc24 <ip_reass_dequeue_datagram+0x4c>)
 800cbf2:	6013      	str	r3, [r2, #0]
 800cbf4:	e00d      	b.n	800cc12 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d106      	bne.n	800cc0a <ip_reass_dequeue_datagram+0x32>
 800cbfc:	4b0a      	ldr	r3, [pc, #40]	@ (800cc28 <ip_reass_dequeue_datagram+0x50>)
 800cbfe:	f240 1245 	movw	r2, #325	@ 0x145
 800cc02:	490a      	ldr	r1, [pc, #40]	@ (800cc2c <ip_reass_dequeue_datagram+0x54>)
 800cc04:	480a      	ldr	r0, [pc, #40]	@ (800cc30 <ip_reass_dequeue_datagram+0x58>)
 800cc06:	f000 fe8f 	bl	800d928 <iprintf>
    prev->next = ipr->next;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800cc12:	6879      	ldr	r1, [r7, #4]
 800cc14:	2001      	movs	r0, #1
 800cc16:	f7fa fdaf 	bl	8007778 <memp_free>
}
 800cc1a:	bf00      	nop
 800cc1c:	3708      	adds	r7, #8
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	200095f0 	.word	0x200095f0
 800cc28:	0800fd98 	.word	0x0800fd98
 800cc2c:	0800fe60 	.word	0x0800fe60
 800cc30:	0800fde0 	.word	0x0800fde0

0800cc34 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b08c      	sub	sp, #48	@ 0x30
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	60f8      	str	r0, [r7, #12]
 800cc3c:	60b9      	str	r1, [r7, #8]
 800cc3e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800cc40:	2300      	movs	r3, #0
 800cc42:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800cc44:	2301      	movs	r3, #1
 800cc46:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800cc48:	68bb      	ldr	r3, [r7, #8]
 800cc4a:	685b      	ldr	r3, [r3, #4]
 800cc4c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cc4e:	69fb      	ldr	r3, [r7, #28]
 800cc50:	885b      	ldrh	r3, [r3, #2]
 800cc52:	b29b      	uxth	r3, r3
 800cc54:	4618      	mov	r0, r3
 800cc56:	f7fa f89d 	bl	8006d94 <lwip_htons>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800cc5e:	69fb      	ldr	r3, [r7, #28]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	f003 030f 	and.w	r3, r3, #15
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800cc6c:	7e7b      	ldrb	r3, [r7, #25]
 800cc6e:	b29b      	uxth	r3, r3
 800cc70:	8b7a      	ldrh	r2, [r7, #26]
 800cc72:	429a      	cmp	r2, r3
 800cc74:	d202      	bcs.n	800cc7c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cc76:	f04f 33ff 	mov.w	r3, #4294967295
 800cc7a:	e135      	b.n	800cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800cc7c:	7e7b      	ldrb	r3, [r7, #25]
 800cc7e:	b29b      	uxth	r3, r3
 800cc80:	8b7a      	ldrh	r2, [r7, #26]
 800cc82:	1ad3      	subs	r3, r2, r3
 800cc84:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	88db      	ldrh	r3, [r3, #6]
 800cc8a:	b29b      	uxth	r3, r3
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f7fa f881 	bl	8006d94 <lwip_htons>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	00db      	lsls	r3, r3, #3
 800cc9c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	685b      	ldr	r3, [r3, #4]
 800cca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 800cca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cca6:	2200      	movs	r2, #0
 800cca8:	701a      	strb	r2, [r3, #0]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	705a      	strb	r2, [r3, #1]
 800ccae:	2200      	movs	r2, #0
 800ccb0:	709a      	strb	r2, [r3, #2]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800ccb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccb8:	8afa      	ldrh	r2, [r7, #22]
 800ccba:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800ccbc:	8afa      	ldrh	r2, [r7, #22]
 800ccbe:	8b7b      	ldrh	r3, [r7, #26]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	b29a      	uxth	r2, r3
 800ccc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc6:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800ccc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccca:	88db      	ldrh	r3, [r3, #6]
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	8afa      	ldrh	r2, [r7, #22]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d902      	bls.n	800ccda <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ccd4:	f04f 33ff 	mov.w	r3, #4294967295
 800ccd8:	e106      	b.n	800cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	627b      	str	r3, [r7, #36]	@ 0x24
 800cce0:	e068      	b.n	800cdb4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	685b      	ldr	r3, [r3, #4]
 800cce6:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800cce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccea:	889b      	ldrh	r3, [r3, #4]
 800ccec:	b29a      	uxth	r2, r3
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	889b      	ldrh	r3, [r3, #4]
 800ccf2:	b29b      	uxth	r3, r3
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d235      	bcs.n	800cd64 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ccf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccfc:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ccfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d020      	beq.n	800cd46 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800cd04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd06:	889b      	ldrh	r3, [r3, #4]
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd0c:	88db      	ldrh	r3, [r3, #6]
 800cd0e:	b29b      	uxth	r3, r3
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d307      	bcc.n	800cd24 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800cd14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd16:	88db      	ldrh	r3, [r3, #6]
 800cd18:	b29a      	uxth	r2, r3
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	889b      	ldrh	r3, [r3, #4]
 800cd1e:	b29b      	uxth	r3, r3
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d902      	bls.n	800cd2a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd24:	f04f 33ff 	mov.w	r3, #4294967295
 800cd28:	e0de      	b.n	800cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800cd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd2c:	68ba      	ldr	r2, [r7, #8]
 800cd2e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800cd30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd32:	88db      	ldrh	r3, [r3, #6]
 800cd34:	b29a      	uxth	r2, r3
 800cd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd38:	889b      	ldrh	r3, [r3, #4]
 800cd3a:	b29b      	uxth	r3, r3
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d03d      	beq.n	800cdbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cd40:	2300      	movs	r3, #0
 800cd42:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800cd44:	e03a      	b.n	800cdbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800cd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd48:	88db      	ldrh	r3, [r3, #6]
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	889b      	ldrh	r3, [r3, #4]
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d902      	bls.n	800cd5c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd56:	f04f 33ff 	mov.w	r3, #4294967295
 800cd5a:	e0c5      	b.n	800cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	68ba      	ldr	r2, [r7, #8]
 800cd60:	605a      	str	r2, [r3, #4]
      break;
 800cd62:	e02b      	b.n	800cdbc <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800cd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd66:	889b      	ldrh	r3, [r3, #4]
 800cd68:	b29a      	uxth	r2, r3
 800cd6a:	693b      	ldr	r3, [r7, #16]
 800cd6c:	889b      	ldrh	r3, [r3, #4]
 800cd6e:	b29b      	uxth	r3, r3
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d102      	bne.n	800cd7a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd74:	f04f 33ff 	mov.w	r3, #4294967295
 800cd78:	e0b6      	b.n	800cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800cd7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd7c:	889b      	ldrh	r3, [r3, #4]
 800cd7e:	b29a      	uxth	r2, r3
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	88db      	ldrh	r3, [r3, #6]
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	429a      	cmp	r2, r3
 800cd88:	d202      	bcs.n	800cd90 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800cd8a:	f04f 33ff 	mov.w	r3, #4294967295
 800cd8e:	e0ab      	b.n	800cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800cd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d009      	beq.n	800cdaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800cd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd98:	88db      	ldrh	r3, [r3, #6]
 800cd9a:	b29a      	uxth	r2, r3
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	889b      	ldrh	r3, [r3, #4]
 800cda0:	b29b      	uxth	r3, r3
 800cda2:	429a      	cmp	r2, r3
 800cda4:	d001      	beq.n	800cdaa <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800cda6:	2300      	movs	r3, #0
 800cda8:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800cdaa:	693b      	ldr	r3, [r7, #16]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 800cdb0:	693b      	ldr	r3, [r7, #16]
 800cdb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d193      	bne.n	800cce2 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800cdba:	e000      	b.n	800cdbe <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800cdbc:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800cdbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d12d      	bne.n	800ce20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800cdc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d01c      	beq.n	800ce04 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800cdca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdcc:	88db      	ldrh	r3, [r3, #6]
 800cdce:	b29a      	uxth	r2, r3
 800cdd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdd2:	889b      	ldrh	r3, [r3, #4]
 800cdd4:	b29b      	uxth	r3, r3
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	d906      	bls.n	800cde8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800cdda:	4b45      	ldr	r3, [pc, #276]	@ (800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cddc:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 800cde0:	4944      	ldr	r1, [pc, #272]	@ (800cef4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800cde2:	4845      	ldr	r0, [pc, #276]	@ (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cde4:	f000 fda0 	bl	800d928 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800cde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800cdee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdf0:	88db      	ldrh	r3, [r3, #6]
 800cdf2:	b29a      	uxth	r2, r3
 800cdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf6:	889b      	ldrh	r3, [r3, #4]
 800cdf8:	b29b      	uxth	r3, r3
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d010      	beq.n	800ce20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800cdfe:	2300      	movs	r3, #0
 800ce00:	623b      	str	r3, [r7, #32]
 800ce02:	e00d      	b.n	800ce20 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d006      	beq.n	800ce1a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ce0c:	4b38      	ldr	r3, [pc, #224]	@ (800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ce0e:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 800ce12:	493a      	ldr	r1, [pc, #232]	@ (800cefc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800ce14:	4838      	ldr	r0, [pc, #224]	@ (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ce16:	f000 fd87 	bl	800d928 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d105      	bne.n	800ce32 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	7f9b      	ldrb	r3, [r3, #30]
 800ce2a:	f003 0301 	and.w	r3, r3, #1
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d059      	beq.n	800cee6 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800ce32:	6a3b      	ldr	r3, [r7, #32]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d04f      	beq.n	800ced8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	685b      	ldr	r3, [r3, #4]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d006      	beq.n	800ce4e <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	889b      	ldrh	r3, [r3, #4]
 800ce48:	b29b      	uxth	r3, r3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d002      	beq.n	800ce54 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	623b      	str	r3, [r7, #32]
 800ce52:	e041      	b.n	800ced8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ce54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce56:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 800ce58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ce5e:	e012      	b.n	800ce86 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800ce60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 800ce66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce68:	88db      	ldrh	r3, [r3, #6]
 800ce6a:	b29a      	uxth	r2, r3
 800ce6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce6e:	889b      	ldrh	r3, [r3, #4]
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	429a      	cmp	r2, r3
 800ce74:	d002      	beq.n	800ce7c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800ce76:	2300      	movs	r3, #0
 800ce78:	623b      	str	r3, [r7, #32]
            break;
 800ce7a:	e007      	b.n	800ce8c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800ce7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce7e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 800ce80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 800ce86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1e9      	bne.n	800ce60 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d022      	beq.n	800ced8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d106      	bne.n	800cea8 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800ce9a:	4b15      	ldr	r3, [pc, #84]	@ (800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ce9c:	f240 12df 	movw	r2, #479	@ 0x1df
 800cea0:	4917      	ldr	r1, [pc, #92]	@ (800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800cea2:	4815      	ldr	r0, [pc, #84]	@ (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cea4:	f000 fd40 	bl	800d928 <iprintf>
          LWIP_ASSERT("sanity check",
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	685b      	ldr	r3, [r3, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
 800ceae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ceb0:	429a      	cmp	r2, r3
 800ceb2:	d106      	bne.n	800cec2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800ceb4:	4b0e      	ldr	r3, [pc, #56]	@ (800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ceb6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800ceba:	4911      	ldr	r1, [pc, #68]	@ (800cf00 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800cebc:	480e      	ldr	r0, [pc, #56]	@ (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800cebe:	f000 fd33 	bl	800d928 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800cec2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d006      	beq.n	800ced8 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800ceca:	4b09      	ldr	r3, [pc, #36]	@ (800cef0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800cecc:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 800ced0:	490c      	ldr	r1, [pc, #48]	@ (800cf04 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800ced2:	4809      	ldr	r0, [pc, #36]	@ (800cef8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ced4:	f000 fd28 	bl	800d928 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800ced8:	6a3b      	ldr	r3, [r7, #32]
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	bf14      	ite	ne
 800cede:	2301      	movne	r3, #1
 800cee0:	2300      	moveq	r3, #0
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	e000      	b.n	800cee8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3730      	adds	r7, #48	@ 0x30
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	0800fd98 	.word	0x0800fd98
 800cef4:	0800fe7c 	.word	0x0800fe7c
 800cef8:	0800fde0 	.word	0x0800fde0
 800cefc:	0800fe9c 	.word	0x0800fe9c
 800cf00:	0800fed4 	.word	0x0800fed4
 800cf04:	0800fee4 	.word	0x0800fee4

0800cf08 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08e      	sub	sp, #56	@ 0x38
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800cf16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf18:	781b      	ldrb	r3, [r3, #0]
 800cf1a:	f003 030f 	and.w	r3, r3, #15
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	009b      	lsls	r3, r3, #2
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	2b14      	cmp	r3, #20
 800cf26:	f040 8171 	bne.w	800d20c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800cf2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf2c:	88db      	ldrh	r3, [r3, #6]
 800cf2e:	b29b      	uxth	r3, r3
 800cf30:	4618      	mov	r0, r3
 800cf32:	f7f9 ff2f 	bl	8006d94 <lwip_htons>
 800cf36:	4603      	mov	r3, r0
 800cf38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf3c:	b29b      	uxth	r3, r3
 800cf3e:	00db      	lsls	r3, r3, #3
 800cf40:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800cf42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf44:	885b      	ldrh	r3, [r3, #2]
 800cf46:	b29b      	uxth	r3, r3
 800cf48:	4618      	mov	r0, r3
 800cf4a:	f7f9 ff23 	bl	8006d94 <lwip_htons>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800cf52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf54:	781b      	ldrb	r3, [r3, #0]
 800cf56:	f003 030f 	and.w	r3, r3, #15
 800cf5a:	b2db      	uxtb	r3, r3
 800cf5c:	009b      	lsls	r3, r3, #2
 800cf5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 800cf62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cf66:	b29b      	uxth	r3, r3
 800cf68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	f0c0 8150 	bcc.w	800d210 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800cf70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800cf74:	b29b      	uxth	r3, r3
 800cf76:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800cf78:	1ad3      	subs	r3, r2, r3
 800cf7a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7fb faad 	bl	80084dc <pbuf_clen>
 800cf82:	4603      	mov	r3, r0
 800cf84:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800cf86:	4b8c      	ldr	r3, [pc, #560]	@ (800d1b8 <ip4_reass+0x2b0>)
 800cf88:	881b      	ldrh	r3, [r3, #0]
 800cf8a:	461a      	mov	r2, r3
 800cf8c:	8c3b      	ldrh	r3, [r7, #32]
 800cf8e:	4413      	add	r3, r2
 800cf90:	2b0a      	cmp	r3, #10
 800cf92:	dd10      	ble.n	800cfb6 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cf94:	8c3b      	ldrh	r3, [r7, #32]
 800cf96:	4619      	mov	r1, r3
 800cf98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cf9a:	f7ff fd81 	bl	800caa0 <ip_reass_remove_oldest_datagram>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f000 8137 	beq.w	800d214 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800cfa6:	4b84      	ldr	r3, [pc, #528]	@ (800d1b8 <ip4_reass+0x2b0>)
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	461a      	mov	r2, r3
 800cfac:	8c3b      	ldrh	r3, [r7, #32]
 800cfae:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800cfb0:	2b0a      	cmp	r3, #10
 800cfb2:	f300 812f 	bgt.w	800d214 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cfb6:	4b81      	ldr	r3, [pc, #516]	@ (800d1bc <ip4_reass+0x2b4>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfbc:	e015      	b.n	800cfea <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfc0:	695a      	ldr	r2, [r3, #20]
 800cfc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfc4:	68db      	ldr	r3, [r3, #12]
 800cfc6:	429a      	cmp	r2, r3
 800cfc8:	d10c      	bne.n	800cfe4 <ip4_reass+0xdc>
 800cfca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfcc:	699a      	ldr	r2, [r3, #24]
 800cfce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfd0:	691b      	ldr	r3, [r3, #16]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d106      	bne.n	800cfe4 <ip4_reass+0xdc>
 800cfd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfd8:	899a      	ldrh	r2, [r3, #12]
 800cfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfdc:	889b      	ldrh	r3, [r3, #4]
 800cfde:	b29b      	uxth	r3, r3
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d006      	beq.n	800cff2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800cfe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1e6      	bne.n	800cfbe <ip4_reass+0xb6>
 800cff0:	e000      	b.n	800cff4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800cff2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800cff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d109      	bne.n	800d00e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800cffa:	8c3b      	ldrh	r3, [r7, #32]
 800cffc:	4619      	mov	r1, r3
 800cffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d000:	f7ff fdb0 	bl	800cb64 <ip_reass_enqueue_new_datagram>
 800d004:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800d006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d11c      	bne.n	800d046 <ip4_reass+0x13e>
      goto nullreturn;
 800d00c:	e105      	b.n	800d21a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d010:	88db      	ldrh	r3, [r3, #6]
 800d012:	b29b      	uxth	r3, r3
 800d014:	4618      	mov	r0, r3
 800d016:	f7f9 febd 	bl	8006d94 <lwip_htons>
 800d01a:	4603      	mov	r3, r0
 800d01c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d020:	2b00      	cmp	r3, #0
 800d022:	d110      	bne.n	800d046 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800d024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d026:	89db      	ldrh	r3, [r3, #14]
 800d028:	4618      	mov	r0, r3
 800d02a:	f7f9 feb3 	bl	8006d94 <lwip_htons>
 800d02e:	4603      	mov	r3, r0
 800d030:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800d034:	2b00      	cmp	r3, #0
 800d036:	d006      	beq.n	800d046 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800d038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d03a:	3308      	adds	r3, #8
 800d03c:	2214      	movs	r2, #20
 800d03e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d040:	4618      	mov	r0, r3
 800d042:	f000 fd4c 	bl	800dade <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800d046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d048:	88db      	ldrh	r3, [r3, #6]
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	f003 0320 	and.w	r3, r3, #32
 800d050:	2b00      	cmp	r3, #0
 800d052:	bf0c      	ite	eq
 800d054:	2301      	moveq	r3, #1
 800d056:	2300      	movne	r3, #0
 800d058:	b2db      	uxtb	r3, r3
 800d05a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d00e      	beq.n	800d080 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800d062:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d064:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d066:	4413      	add	r3, r2
 800d068:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800d06a:	8b7a      	ldrh	r2, [r7, #26]
 800d06c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800d06e:	429a      	cmp	r2, r3
 800d070:	f0c0 80a0 	bcc.w	800d1b4 <ip4_reass+0x2ac>
 800d074:	8b7b      	ldrh	r3, [r7, #26]
 800d076:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 800d07a:	4293      	cmp	r3, r2
 800d07c:	f200 809a 	bhi.w	800d1b4 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800d080:	69fa      	ldr	r2, [r7, #28]
 800d082:	6879      	ldr	r1, [r7, #4]
 800d084:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d086:	f7ff fdd5 	bl	800cc34 <ip_reass_chain_frag_into_datagram_and_validate>
 800d08a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	f000 809b 	beq.w	800d1cc <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800d096:	4b48      	ldr	r3, [pc, #288]	@ (800d1b8 <ip4_reass+0x2b0>)
 800d098:	881a      	ldrh	r2, [r3, #0]
 800d09a:	8c3b      	ldrh	r3, [r7, #32]
 800d09c:	4413      	add	r3, r2
 800d09e:	b29a      	uxth	r2, r3
 800d0a0:	4b45      	ldr	r3, [pc, #276]	@ (800d1b8 <ip4_reass+0x2b0>)
 800d0a2:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800d0a4:	69fb      	ldr	r3, [r7, #28]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00d      	beq.n	800d0c6 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800d0aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800d0ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800d0ae:	4413      	add	r3, r2
 800d0b0:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0b4:	8a7a      	ldrh	r2, [r7, #18]
 800d0b6:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ba:	7f9b      	ldrb	r3, [r3, #30]
 800d0bc:	f043 0301 	orr.w	r3, r3, #1
 800d0c0:	b2da      	uxtb	r2, r3
 800d0c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0c4:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800d0c6:	697b      	ldr	r3, [r7, #20]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d171      	bne.n	800d1b0 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800d0cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0ce:	8b9b      	ldrh	r3, [r3, #28]
 800d0d0:	3314      	adds	r3, #20
 800d0d2:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800d0d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0d6:	685b      	ldr	r3, [r3, #4]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800d0de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	685b      	ldr	r3, [r3, #4]
 800d0e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800d0e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0e8:	3308      	adds	r3, #8
 800d0ea:	2214      	movs	r2, #20
 800d0ec:	4619      	mov	r1, r3
 800d0ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d0f0:	f000 fcf5 	bl	800dade <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800d0f4:	8a3b      	ldrh	r3, [r7, #16]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7f9 fe4c 	bl	8006d94 <lwip_htons>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	461a      	mov	r2, r3
 800d100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d102:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800d104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d106:	2200      	movs	r2, #0
 800d108:	719a      	strb	r2, [r3, #6]
 800d10a:	2200      	movs	r2, #0
 800d10c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800d10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d110:	2200      	movs	r2, #0
 800d112:	729a      	strb	r2, [r3, #10]
 800d114:	2200      	movs	r2, #0
 800d116:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800d118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d11a:	685b      	ldr	r3, [r3, #4]
 800d11c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800d11e:	e00d      	b.n	800d13c <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800d120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d122:	685b      	ldr	r3, [r3, #4]
 800d124:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800d126:	2114      	movs	r1, #20
 800d128:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800d12a:	f7fb f8c9 	bl	80082c0 <pbuf_remove_header>
      pbuf_cat(p, r);
 800d12e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f7fb fa0d 	bl	8008550 <pbuf_cat>
      r = iprh->next_pbuf;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 800d13c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d1ee      	bne.n	800d120 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800d142:	4b1e      	ldr	r3, [pc, #120]	@ (800d1bc <ip4_reass+0x2b4>)
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d148:	429a      	cmp	r2, r3
 800d14a:	d102      	bne.n	800d152 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800d14c:	2300      	movs	r3, #0
 800d14e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d150:	e010      	b.n	800d174 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d152:	4b1a      	ldr	r3, [pc, #104]	@ (800d1bc <ip4_reass+0x2b4>)
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d158:	e007      	b.n	800d16a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800d15a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d160:	429a      	cmp	r2, r3
 800d162:	d006      	beq.n	800d172 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800d164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d16a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d1f4      	bne.n	800d15a <ip4_reass+0x252>
 800d170:	e000      	b.n	800d174 <ip4_reass+0x26c>
          break;
 800d172:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800d174:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d176:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d178:	f7ff fd2e 	bl	800cbd8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f7fb f9ad 	bl	80084dc <pbuf_clen>
 800d182:	4603      	mov	r3, r0
 800d184:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800d186:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b8 <ip4_reass+0x2b0>)
 800d188:	881b      	ldrh	r3, [r3, #0]
 800d18a:	8c3a      	ldrh	r2, [r7, #32]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d906      	bls.n	800d19e <ip4_reass+0x296>
 800d190:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c0 <ip4_reass+0x2b8>)
 800d192:	f240 229b 	movw	r2, #667	@ 0x29b
 800d196:	490b      	ldr	r1, [pc, #44]	@ (800d1c4 <ip4_reass+0x2bc>)
 800d198:	480b      	ldr	r0, [pc, #44]	@ (800d1c8 <ip4_reass+0x2c0>)
 800d19a:	f000 fbc5 	bl	800d928 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800d19e:	4b06      	ldr	r3, [pc, #24]	@ (800d1b8 <ip4_reass+0x2b0>)
 800d1a0:	881a      	ldrh	r2, [r3, #0]
 800d1a2:	8c3b      	ldrh	r3, [r7, #32]
 800d1a4:	1ad3      	subs	r3, r2, r3
 800d1a6:	b29a      	uxth	r2, r3
 800d1a8:	4b03      	ldr	r3, [pc, #12]	@ (800d1b8 <ip4_reass+0x2b0>)
 800d1aa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	e038      	b.n	800d222 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	e036      	b.n	800d222 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 800d1b4:	bf00      	nop
 800d1b6:	e00a      	b.n	800d1ce <ip4_reass+0x2c6>
 800d1b8:	200095f4 	.word	0x200095f4
 800d1bc:	200095f0 	.word	0x200095f0
 800d1c0:	0800fd98 	.word	0x0800fd98
 800d1c4:	0800ff08 	.word	0x0800ff08
 800d1c8:	0800fde0 	.word	0x0800fde0
    goto nullreturn_ipr;
 800d1cc:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800d1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d106      	bne.n	800d1e2 <ip4_reass+0x2da>
 800d1d4:	4b15      	ldr	r3, [pc, #84]	@ (800d22c <ip4_reass+0x324>)
 800d1d6:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 800d1da:	4915      	ldr	r1, [pc, #84]	@ (800d230 <ip4_reass+0x328>)
 800d1dc:	4815      	ldr	r0, [pc, #84]	@ (800d234 <ip4_reass+0x32c>)
 800d1de:	f000 fba3 	bl	800d928 <iprintf>
  if (ipr->p == NULL) {
 800d1e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d116      	bne.n	800d218 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800d1ea:	4b13      	ldr	r3, [pc, #76]	@ (800d238 <ip4_reass+0x330>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d006      	beq.n	800d202 <ip4_reass+0x2fa>
 800d1f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d22c <ip4_reass+0x324>)
 800d1f6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 800d1fa:	4910      	ldr	r1, [pc, #64]	@ (800d23c <ip4_reass+0x334>)
 800d1fc:	480d      	ldr	r0, [pc, #52]	@ (800d234 <ip4_reass+0x32c>)
 800d1fe:	f000 fb93 	bl	800d928 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800d202:	2100      	movs	r1, #0
 800d204:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d206:	f7ff fce7 	bl	800cbd8 <ip_reass_dequeue_datagram>
 800d20a:	e006      	b.n	800d21a <ip4_reass+0x312>
    goto nullreturn;
 800d20c:	bf00      	nop
 800d20e:	e004      	b.n	800d21a <ip4_reass+0x312>
    goto nullreturn;
 800d210:	bf00      	nop
 800d212:	e002      	b.n	800d21a <ip4_reass+0x312>
      goto nullreturn;
 800d214:	bf00      	nop
 800d216:	e000      	b.n	800d21a <ip4_reass+0x312>
  }

nullreturn:
 800d218:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7fb f8d6 	bl	80083cc <pbuf_free>
  return NULL;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3738      	adds	r7, #56	@ 0x38
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	0800fd98 	.word	0x0800fd98
 800d230:	0800ff24 	.word	0x0800ff24
 800d234:	0800fde0 	.word	0x0800fde0
 800d238:	200095f0 	.word	0x200095f0
 800d23c:	0800ff30 	.word	0x0800ff30

0800d240 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800d244:	2002      	movs	r0, #2
 800d246:	f7fa fa27 	bl	8007698 <memp_malloc>
 800d24a:	4603      	mov	r3, r0
}
 800d24c:	4618      	mov	r0, r3
 800d24e:	bd80      	pop	{r7, pc}

0800d250 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b082      	sub	sp, #8
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d106      	bne.n	800d26c <ip_frag_free_pbuf_custom_ref+0x1c>
 800d25e:	4b07      	ldr	r3, [pc, #28]	@ (800d27c <ip_frag_free_pbuf_custom_ref+0x2c>)
 800d260:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 800d264:	4906      	ldr	r1, [pc, #24]	@ (800d280 <ip_frag_free_pbuf_custom_ref+0x30>)
 800d266:	4807      	ldr	r0, [pc, #28]	@ (800d284 <ip_frag_free_pbuf_custom_ref+0x34>)
 800d268:	f000 fb5e 	bl	800d928 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800d26c:	6879      	ldr	r1, [r7, #4]
 800d26e:	2002      	movs	r0, #2
 800d270:	f7fa fa82 	bl	8007778 <memp_free>
}
 800d274:	bf00      	nop
 800d276:	3708      	adds	r7, #8
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	0800fd98 	.word	0x0800fd98
 800d280:	0800ff50 	.word	0x0800ff50
 800d284:	0800fde0 	.word	0x0800fde0

0800d288 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d106      	bne.n	800d2a8 <ipfrag_free_pbuf_custom+0x20>
 800d29a:	4b11      	ldr	r3, [pc, #68]	@ (800d2e0 <ipfrag_free_pbuf_custom+0x58>)
 800d29c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 800d2a0:	4910      	ldr	r1, [pc, #64]	@ (800d2e4 <ipfrag_free_pbuf_custom+0x5c>)
 800d2a2:	4811      	ldr	r0, [pc, #68]	@ (800d2e8 <ipfrag_free_pbuf_custom+0x60>)
 800d2a4:	f000 fb40 	bl	800d928 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	429a      	cmp	r2, r3
 800d2ae:	d006      	beq.n	800d2be <ipfrag_free_pbuf_custom+0x36>
 800d2b0:	4b0b      	ldr	r3, [pc, #44]	@ (800d2e0 <ipfrag_free_pbuf_custom+0x58>)
 800d2b2:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800d2b6:	490d      	ldr	r1, [pc, #52]	@ (800d2ec <ipfrag_free_pbuf_custom+0x64>)
 800d2b8:	480b      	ldr	r0, [pc, #44]	@ (800d2e8 <ipfrag_free_pbuf_custom+0x60>)
 800d2ba:	f000 fb35 	bl	800d928 <iprintf>
  if (pcr->original != NULL) {
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	695b      	ldr	r3, [r3, #20]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d004      	beq.n	800d2d0 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	695b      	ldr	r3, [r3, #20]
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f7fb f87e 	bl	80083cc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800d2d0:	68f8      	ldr	r0, [r7, #12]
 800d2d2:	f7ff ffbd 	bl	800d250 <ip_frag_free_pbuf_custom_ref>
}
 800d2d6:	bf00      	nop
 800d2d8:	3710      	adds	r7, #16
 800d2da:	46bd      	mov	sp, r7
 800d2dc:	bd80      	pop	{r7, pc}
 800d2de:	bf00      	nop
 800d2e0:	0800fd98 	.word	0x0800fd98
 800d2e4:	0800ff5c 	.word	0x0800ff5c
 800d2e8:	0800fde0 	.word	0x0800fde0
 800d2ec:	0800ff68 	.word	0x0800ff68

0800d2f0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b094      	sub	sp, #80	@ 0x50
 800d2f4:	af02      	add	r7, sp, #8
 800d2f6:	60f8      	str	r0, [r7, #12]
 800d2f8:	60b9      	str	r1, [r7, #8]
 800d2fa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800d302:	68bb      	ldr	r3, [r7, #8]
 800d304:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d306:	3b14      	subs	r3, #20
 800d308:	2b00      	cmp	r3, #0
 800d30a:	da00      	bge.n	800d30e <ip4_frag+0x1e>
 800d30c:	3307      	adds	r3, #7
 800d30e:	10db      	asrs	r3, r3, #3
 800d310:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800d312:	2314      	movs	r3, #20
 800d314:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 800d31c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d31e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800d320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d322:	781b      	ldrb	r3, [r3, #0]
 800d324:	f003 030f 	and.w	r3, r3, #15
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	009b      	lsls	r3, r3, #2
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b14      	cmp	r3, #20
 800d330:	d002      	beq.n	800d338 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800d332:	f06f 0305 	mvn.w	r3, #5
 800d336:	e110      	b.n	800d55a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	895b      	ldrh	r3, [r3, #10]
 800d33c:	2b13      	cmp	r3, #19
 800d33e:	d809      	bhi.n	800d354 <ip4_frag+0x64>
 800d340:	4b88      	ldr	r3, [pc, #544]	@ (800d564 <ip4_frag+0x274>)
 800d342:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 800d346:	4988      	ldr	r1, [pc, #544]	@ (800d568 <ip4_frag+0x278>)
 800d348:	4888      	ldr	r0, [pc, #544]	@ (800d56c <ip4_frag+0x27c>)
 800d34a:	f000 faed 	bl	800d928 <iprintf>
 800d34e:	f06f 0305 	mvn.w	r3, #5
 800d352:	e102      	b.n	800d55a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800d354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d356:	88db      	ldrh	r3, [r3, #6]
 800d358:	b29b      	uxth	r3, r3
 800d35a:	4618      	mov	r0, r3
 800d35c:	f7f9 fd1a 	bl	8006d94 <lwip_htons>
 800d360:	4603      	mov	r3, r0
 800d362:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 800d364:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d366:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d36a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800d36e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d370:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800d374:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	891b      	ldrh	r3, [r3, #8]
 800d37a:	3b14      	subs	r3, #20
 800d37c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 800d380:	e0e1      	b.n	800d546 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800d382:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d384:	00db      	lsls	r3, r3, #3
 800d386:	b29b      	uxth	r3, r3
 800d388:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d38c:	4293      	cmp	r3, r2
 800d38e:	bf28      	it	cs
 800d390:	4613      	movcs	r3, r2
 800d392:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800d394:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800d398:	2114      	movs	r1, #20
 800d39a:	200e      	movs	r0, #14
 800d39c:	f7fa fd34 	bl	8007e08 <pbuf_alloc>
 800d3a0:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 800d3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	f000 80d5 	beq.w	800d554 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800d3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3ac:	895b      	ldrh	r3, [r3, #10]
 800d3ae:	2b13      	cmp	r3, #19
 800d3b0:	d806      	bhi.n	800d3c0 <ip4_frag+0xd0>
 800d3b2:	4b6c      	ldr	r3, [pc, #432]	@ (800d564 <ip4_frag+0x274>)
 800d3b4:	f44f 7249 	mov.w	r2, #804	@ 0x324
 800d3b8:	496d      	ldr	r1, [pc, #436]	@ (800d570 <ip4_frag+0x280>)
 800d3ba:	486c      	ldr	r0, [pc, #432]	@ (800d56c <ip4_frag+0x27c>)
 800d3bc:	f000 fab4 	bl	800d928 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800d3c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	2214      	movs	r2, #20
 800d3c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	f000 fb88 	bl	800dade <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800d3ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 800d3d4:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d3d6:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 800d3da:	e064      	b.n	800d4a6 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	895a      	ldrh	r2, [r3, #10]
 800d3e0:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d3e2:	1ad3      	subs	r3, r2, r3
 800d3e4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	895b      	ldrh	r3, [r3, #10]
 800d3ea:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d3ec:	429a      	cmp	r2, r3
 800d3ee:	d906      	bls.n	800d3fe <ip4_frag+0x10e>
 800d3f0:	4b5c      	ldr	r3, [pc, #368]	@ (800d564 <ip4_frag+0x274>)
 800d3f2:	f240 322d 	movw	r2, #813	@ 0x32d
 800d3f6:	495f      	ldr	r1, [pc, #380]	@ (800d574 <ip4_frag+0x284>)
 800d3f8:	485c      	ldr	r0, [pc, #368]	@ (800d56c <ip4_frag+0x27c>)
 800d3fa:	f000 fa95 	bl	800d928 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800d3fe:	8bfa      	ldrh	r2, [r7, #30]
 800d400:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d404:	4293      	cmp	r3, r2
 800d406:	bf28      	it	cs
 800d408:	4613      	movcs	r3, r2
 800d40a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800d40e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d412:	2b00      	cmp	r3, #0
 800d414:	d105      	bne.n	800d422 <ip4_frag+0x132>
        poff = 0;
 800d416:	2300      	movs	r3, #0
 800d418:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	60fb      	str	r3, [r7, #12]
        continue;
 800d420:	e041      	b.n	800d4a6 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800d422:	f7ff ff0d 	bl	800d240 <ip_frag_alloc_pbuf_custom_ref>
 800d426:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d103      	bne.n	800d436 <ip4_frag+0x146>
        pbuf_free(rambuf);
 800d42e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d430:	f7fa ffcc 	bl	80083cc <pbuf_free>
        goto memerr;
 800d434:	e08f      	b.n	800d556 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d436:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800d43c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800d43e:	4413      	add	r3, r2
 800d440:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 800d444:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d448:	9201      	str	r2, [sp, #4]
 800d44a:	9300      	str	r3, [sp, #0]
 800d44c:	4603      	mov	r3, r0
 800d44e:	2241      	movs	r2, #65	@ 0x41
 800d450:	2000      	movs	r0, #0
 800d452:	f7fa fe01 	bl	8008058 <pbuf_alloced_custom>
 800d456:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d106      	bne.n	800d46c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800d45e:	69b8      	ldr	r0, [r7, #24]
 800d460:	f7ff fef6 	bl	800d250 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800d464:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d466:	f7fa ffb1 	bl	80083cc <pbuf_free>
        goto memerr;
 800d46a:	e074      	b.n	800d556 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 800d46c:	68f8      	ldr	r0, [r7, #12]
 800d46e:	f7fb f84d 	bl	800850c <pbuf_ref>
      pcr->original = p;
 800d472:	69bb      	ldr	r3, [r7, #24]
 800d474:	68fa      	ldr	r2, [r7, #12]
 800d476:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	4a3f      	ldr	r2, [pc, #252]	@ (800d578 <ip4_frag+0x288>)
 800d47c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800d47e:	6979      	ldr	r1, [r7, #20]
 800d480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d482:	f7fb f865 	bl	8008550 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800d486:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800d48a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d48e:	1ad3      	subs	r3, r2, r3
 800d490:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 800d494:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d004      	beq.n	800d4a6 <ip4_frag+0x1b6>
        poff = 0;
 800d49c:	2300      	movs	r3, #0
 800d49e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800d4a6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d196      	bne.n	800d3dc <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800d4ae:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 800d4b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d4b4:	4413      	add	r3, r2
 800d4b6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d4bc:	f1a3 0213 	sub.w	r2, r3, #19
 800d4c0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	bfcc      	ite	gt
 800d4c8:	2301      	movgt	r3, #1
 800d4ca:	2300      	movle	r3, #0
 800d4cc:	b2db      	uxtb	r3, r3
 800d4ce:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800d4d0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800d4d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d4d8:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 800d4da:	6a3b      	ldr	r3, [r7, #32]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d002      	beq.n	800d4e6 <ip4_frag+0x1f6>
 800d4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d003      	beq.n	800d4ee <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800d4e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4e8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800d4ec:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800d4ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800d4f0:	4618      	mov	r0, r3
 800d4f2:	f7f9 fc4f 	bl	8006d94 <lwip_htons>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4fc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800d4fe:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d500:	3314      	adds	r3, #20
 800d502:	b29b      	uxth	r3, r3
 800d504:	4618      	mov	r0, r3
 800d506:	f7f9 fc45 	bl	8006d94 <lwip_htons>
 800d50a:	4603      	mov	r3, r0
 800d50c:	461a      	mov	r2, r3
 800d50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d510:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800d512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d514:	2200      	movs	r2, #0
 800d516:	729a      	strb	r2, [r3, #10]
 800d518:	2200      	movs	r2, #0
 800d51a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	695b      	ldr	r3, [r3, #20]
 800d520:	687a      	ldr	r2, [r7, #4]
 800d522:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d524:	68b8      	ldr	r0, [r7, #8]
 800d526:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800d528:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d52a:	f7fa ff4f 	bl	80083cc <pbuf_free>
    left = (u16_t)(left - fragsize);
 800d52e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800d532:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 800d53a:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 800d53e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d540:	4413      	add	r3, r2
 800d542:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 800d546:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	f47f af19 	bne.w	800d382 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800d550:	2300      	movs	r3, #0
 800d552:	e002      	b.n	800d55a <ip4_frag+0x26a>
      goto memerr;
 800d554:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800d556:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d55a:	4618      	mov	r0, r3
 800d55c:	3748      	adds	r7, #72	@ 0x48
 800d55e:	46bd      	mov	sp, r7
 800d560:	bd80      	pop	{r7, pc}
 800d562:	bf00      	nop
 800d564:	0800fd98 	.word	0x0800fd98
 800d568:	0800ff74 	.word	0x0800ff74
 800d56c:	0800fde0 	.word	0x0800fde0
 800d570:	0800ff90 	.word	0x0800ff90
 800d574:	0800ffb0 	.word	0x0800ffb0
 800d578:	0800d289 	.word	0x0800d289

0800d57c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b086      	sub	sp, #24
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800d586:	230e      	movs	r3, #14
 800d588:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	895b      	ldrh	r3, [r3, #10]
 800d58e:	2b0e      	cmp	r3, #14
 800d590:	d96e      	bls.n	800d670 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	7bdb      	ldrb	r3, [r3, #15]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d106      	bne.n	800d5a8 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	b2da      	uxtb	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800d5ae:	693b      	ldr	r3, [r7, #16]
 800d5b0:	7b1a      	ldrb	r2, [r3, #12]
 800d5b2:	7b5b      	ldrb	r3, [r3, #13]
 800d5b4:	021b      	lsls	r3, r3, #8
 800d5b6:	4313      	orrs	r3, r2
 800d5b8:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	781b      	ldrb	r3, [r3, #0]
 800d5be:	f003 0301 	and.w	r3, r3, #1
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d023      	beq.n	800d60e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	2b01      	cmp	r3, #1
 800d5cc:	d10f      	bne.n	800d5ee <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d5ce:	693b      	ldr	r3, [r7, #16]
 800d5d0:	785b      	ldrb	r3, [r3, #1]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d11b      	bne.n	800d60e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800d5d6:	693b      	ldr	r3, [r7, #16]
 800d5d8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800d5da:	2b5e      	cmp	r3, #94	@ 0x5e
 800d5dc:	d117      	bne.n	800d60e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	7b5b      	ldrb	r3, [r3, #13]
 800d5e2:	f043 0310 	orr.w	r3, r3, #16
 800d5e6:	b2da      	uxtb	r2, r3
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	735a      	strb	r2, [r3, #13]
 800d5ec:	e00f      	b.n	800d60e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	2206      	movs	r2, #6
 800d5f2:	4928      	ldr	r1, [pc, #160]	@ (800d694 <ethernet_input+0x118>)
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f000 f9ec 	bl	800d9d2 <memcmp>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d106      	bne.n	800d60e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	7b5b      	ldrb	r3, [r3, #13]
 800d604:	f043 0308 	orr.w	r3, r3, #8
 800d608:	b2da      	uxtb	r2, r3
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800d60e:	89fb      	ldrh	r3, [r7, #14]
 800d610:	2b08      	cmp	r3, #8
 800d612:	d003      	beq.n	800d61c <ethernet_input+0xa0>
 800d614:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d618:	d014      	beq.n	800d644 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800d61a:	e032      	b.n	800d682 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d622:	f003 0308 	and.w	r3, r3, #8
 800d626:	2b00      	cmp	r3, #0
 800d628:	d024      	beq.n	800d674 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d62a:	8afb      	ldrh	r3, [r7, #22]
 800d62c:	4619      	mov	r1, r3
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f7fa fe46 	bl	80082c0 <pbuf_remove_header>
 800d634:	4603      	mov	r3, r0
 800d636:	2b00      	cmp	r3, #0
 800d638:	d11e      	bne.n	800d678 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800d63a:	6839      	ldr	r1, [r7, #0]
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7fe ff0d 	bl	800c45c <ip4_input>
      break;
 800d642:	e013      	b.n	800d66c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800d64a:	f003 0308 	and.w	r3, r3, #8
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d014      	beq.n	800d67c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800d652:	8afb      	ldrh	r3, [r7, #22]
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f7fa fe32 	bl	80082c0 <pbuf_remove_header>
 800d65c:	4603      	mov	r3, r0
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d10e      	bne.n	800d680 <ethernet_input+0x104>
        etharp_input(p, netif);
 800d662:	6839      	ldr	r1, [r7, #0]
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f7fe f8a9 	bl	800b7bc <etharp_input>
      break;
 800d66a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800d66c:	2300      	movs	r3, #0
 800d66e:	e00c      	b.n	800d68a <ethernet_input+0x10e>
    goto free_and_return;
 800d670:	bf00      	nop
 800d672:	e006      	b.n	800d682 <ethernet_input+0x106>
        goto free_and_return;
 800d674:	bf00      	nop
 800d676:	e004      	b.n	800d682 <ethernet_input+0x106>
        goto free_and_return;
 800d678:	bf00      	nop
 800d67a:	e002      	b.n	800d682 <ethernet_input+0x106>
        goto free_and_return;
 800d67c:	bf00      	nop
 800d67e:	e000      	b.n	800d682 <ethernet_input+0x106>
        goto free_and_return;
 800d680:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f7fa fea2 	bl	80083cc <pbuf_free>
  return ERR_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}
 800d692:	bf00      	nop
 800d694:	08010108 	.word	0x08010108

0800d698 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800d698:	b580      	push	{r7, lr}
 800d69a:	b086      	sub	sp, #24
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
 800d6a4:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800d6a6:	8c3b      	ldrh	r3, [r7, #32]
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f7f9 fb73 	bl	8006d94 <lwip_htons>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800d6b2:	210e      	movs	r1, #14
 800d6b4:	68b8      	ldr	r0, [r7, #8]
 800d6b6:	f7fa fdf3 	bl	80082a0 <pbuf_add_header>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d125      	bne.n	800d70c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	685b      	ldr	r3, [r3, #4]
 800d6c4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800d6c6:	693b      	ldr	r3, [r7, #16]
 800d6c8:	8afa      	ldrh	r2, [r7, #22]
 800d6ca:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	2206      	movs	r2, #6
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	f000 fa03 	bl	800dade <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	3306      	adds	r3, #6
 800d6dc:	2206      	movs	r2, #6
 800d6de:	6879      	ldr	r1, [r7, #4]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f000 f9fc 	bl	800dade <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d6ec:	2b06      	cmp	r3, #6
 800d6ee:	d006      	beq.n	800d6fe <ethernet_output+0x66>
 800d6f0:	4b0a      	ldr	r3, [pc, #40]	@ (800d71c <ethernet_output+0x84>)
 800d6f2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 800d6f6:	490a      	ldr	r1, [pc, #40]	@ (800d720 <ethernet_output+0x88>)
 800d6f8:	480a      	ldr	r0, [pc, #40]	@ (800d724 <ethernet_output+0x8c>)
 800d6fa:	f000 f915 	bl	800d928 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	68b9      	ldr	r1, [r7, #8]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	4798      	blx	r3
 800d708:	4603      	mov	r3, r0
 800d70a:	e002      	b.n	800d712 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800d70c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800d70e:	f06f 0301 	mvn.w	r3, #1
}
 800d712:	4618      	mov	r0, r3
 800d714:	3718      	adds	r7, #24
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}
 800d71a:	bf00      	nop
 800d71c:	0800ffc0 	.word	0x0800ffc0
 800d720:	0800fff8 	.word	0x0800fff8
 800d724:	0801002c 	.word	0x0801002c

0800d728 <rand>:
 800d728:	4b16      	ldr	r3, [pc, #88]	@ (800d784 <rand+0x5c>)
 800d72a:	b510      	push	{r4, lr}
 800d72c:	681c      	ldr	r4, [r3, #0]
 800d72e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d730:	b9b3      	cbnz	r3, 800d760 <rand+0x38>
 800d732:	2018      	movs	r0, #24
 800d734:	f000 fa4a 	bl	800dbcc <malloc>
 800d738:	4602      	mov	r2, r0
 800d73a:	6320      	str	r0, [r4, #48]	@ 0x30
 800d73c:	b920      	cbnz	r0, 800d748 <rand+0x20>
 800d73e:	4b12      	ldr	r3, [pc, #72]	@ (800d788 <rand+0x60>)
 800d740:	4812      	ldr	r0, [pc, #72]	@ (800d78c <rand+0x64>)
 800d742:	2152      	movs	r1, #82	@ 0x52
 800d744:	f000 f9da 	bl	800dafc <__assert_func>
 800d748:	4911      	ldr	r1, [pc, #68]	@ (800d790 <rand+0x68>)
 800d74a:	4b12      	ldr	r3, [pc, #72]	@ (800d794 <rand+0x6c>)
 800d74c:	e9c0 1300 	strd	r1, r3, [r0]
 800d750:	4b11      	ldr	r3, [pc, #68]	@ (800d798 <rand+0x70>)
 800d752:	6083      	str	r3, [r0, #8]
 800d754:	230b      	movs	r3, #11
 800d756:	8183      	strh	r3, [r0, #12]
 800d758:	2100      	movs	r1, #0
 800d75a:	2001      	movs	r0, #1
 800d75c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800d760:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d762:	480e      	ldr	r0, [pc, #56]	@ (800d79c <rand+0x74>)
 800d764:	690b      	ldr	r3, [r1, #16]
 800d766:	694c      	ldr	r4, [r1, #20]
 800d768:	4a0d      	ldr	r2, [pc, #52]	@ (800d7a0 <rand+0x78>)
 800d76a:	4358      	muls	r0, r3
 800d76c:	fb02 0004 	mla	r0, r2, r4, r0
 800d770:	fba3 3202 	umull	r3, r2, r3, r2
 800d774:	3301      	adds	r3, #1
 800d776:	eb40 0002 	adc.w	r0, r0, r2
 800d77a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800d77e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800d782:	bd10      	pop	{r4, pc}
 800d784:	20000034 	.word	0x20000034
 800d788:	08010116 	.word	0x08010116
 800d78c:	0801012d 	.word	0x0801012d
 800d790:	abcd330e 	.word	0xabcd330e
 800d794:	e66d1234 	.word	0xe66d1234
 800d798:	0005deec 	.word	0x0005deec
 800d79c:	5851f42d 	.word	0x5851f42d
 800d7a0:	4c957f2d 	.word	0x4c957f2d

0800d7a4 <std>:
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	b510      	push	{r4, lr}
 800d7a8:	4604      	mov	r4, r0
 800d7aa:	e9c0 3300 	strd	r3, r3, [r0]
 800d7ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7b2:	6083      	str	r3, [r0, #8]
 800d7b4:	8181      	strh	r1, [r0, #12]
 800d7b6:	6643      	str	r3, [r0, #100]	@ 0x64
 800d7b8:	81c2      	strh	r2, [r0, #14]
 800d7ba:	6183      	str	r3, [r0, #24]
 800d7bc:	4619      	mov	r1, r3
 800d7be:	2208      	movs	r2, #8
 800d7c0:	305c      	adds	r0, #92	@ 0x5c
 800d7c2:	f000 f916 	bl	800d9f2 <memset>
 800d7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800d7fc <std+0x58>)
 800d7c8:	6263      	str	r3, [r4, #36]	@ 0x24
 800d7ca:	4b0d      	ldr	r3, [pc, #52]	@ (800d800 <std+0x5c>)
 800d7cc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d7ce:	4b0d      	ldr	r3, [pc, #52]	@ (800d804 <std+0x60>)
 800d7d0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d7d2:	4b0d      	ldr	r3, [pc, #52]	@ (800d808 <std+0x64>)
 800d7d4:	6323      	str	r3, [r4, #48]	@ 0x30
 800d7d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d80c <std+0x68>)
 800d7d8:	6224      	str	r4, [r4, #32]
 800d7da:	429c      	cmp	r4, r3
 800d7dc:	d006      	beq.n	800d7ec <std+0x48>
 800d7de:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d7e2:	4294      	cmp	r4, r2
 800d7e4:	d002      	beq.n	800d7ec <std+0x48>
 800d7e6:	33d0      	adds	r3, #208	@ 0xd0
 800d7e8:	429c      	cmp	r4, r3
 800d7ea:	d105      	bne.n	800d7f8 <std+0x54>
 800d7ec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d7f4:	f000 b970 	b.w	800dad8 <__retarget_lock_init_recursive>
 800d7f8:	bd10      	pop	{r4, pc}
 800d7fa:	bf00      	nop
 800d7fc:	0800d94d 	.word	0x0800d94d
 800d800:	0800d96f 	.word	0x0800d96f
 800d804:	0800d9a7 	.word	0x0800d9a7
 800d808:	0800d9cb 	.word	0x0800d9cb
 800d80c:	200095f8 	.word	0x200095f8

0800d810 <stdio_exit_handler>:
 800d810:	4a02      	ldr	r2, [pc, #8]	@ (800d81c <stdio_exit_handler+0xc>)
 800d812:	4903      	ldr	r1, [pc, #12]	@ (800d820 <stdio_exit_handler+0x10>)
 800d814:	4803      	ldr	r0, [pc, #12]	@ (800d824 <stdio_exit_handler+0x14>)
 800d816:	f000 b869 	b.w	800d8ec <_fwalk_sglue>
 800d81a:	bf00      	nop
 800d81c:	20000028 	.word	0x20000028
 800d820:	0800e3dd 	.word	0x0800e3dd
 800d824:	20000038 	.word	0x20000038

0800d828 <cleanup_stdio>:
 800d828:	6841      	ldr	r1, [r0, #4]
 800d82a:	4b0c      	ldr	r3, [pc, #48]	@ (800d85c <cleanup_stdio+0x34>)
 800d82c:	4299      	cmp	r1, r3
 800d82e:	b510      	push	{r4, lr}
 800d830:	4604      	mov	r4, r0
 800d832:	d001      	beq.n	800d838 <cleanup_stdio+0x10>
 800d834:	f000 fdd2 	bl	800e3dc <_fflush_r>
 800d838:	68a1      	ldr	r1, [r4, #8]
 800d83a:	4b09      	ldr	r3, [pc, #36]	@ (800d860 <cleanup_stdio+0x38>)
 800d83c:	4299      	cmp	r1, r3
 800d83e:	d002      	beq.n	800d846 <cleanup_stdio+0x1e>
 800d840:	4620      	mov	r0, r4
 800d842:	f000 fdcb 	bl	800e3dc <_fflush_r>
 800d846:	68e1      	ldr	r1, [r4, #12]
 800d848:	4b06      	ldr	r3, [pc, #24]	@ (800d864 <cleanup_stdio+0x3c>)
 800d84a:	4299      	cmp	r1, r3
 800d84c:	d004      	beq.n	800d858 <cleanup_stdio+0x30>
 800d84e:	4620      	mov	r0, r4
 800d850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d854:	f000 bdc2 	b.w	800e3dc <_fflush_r>
 800d858:	bd10      	pop	{r4, pc}
 800d85a:	bf00      	nop
 800d85c:	200095f8 	.word	0x200095f8
 800d860:	20009660 	.word	0x20009660
 800d864:	200096c8 	.word	0x200096c8

0800d868 <global_stdio_init.part.0>:
 800d868:	b510      	push	{r4, lr}
 800d86a:	4b0b      	ldr	r3, [pc, #44]	@ (800d898 <global_stdio_init.part.0+0x30>)
 800d86c:	4c0b      	ldr	r4, [pc, #44]	@ (800d89c <global_stdio_init.part.0+0x34>)
 800d86e:	4a0c      	ldr	r2, [pc, #48]	@ (800d8a0 <global_stdio_init.part.0+0x38>)
 800d870:	601a      	str	r2, [r3, #0]
 800d872:	4620      	mov	r0, r4
 800d874:	2200      	movs	r2, #0
 800d876:	2104      	movs	r1, #4
 800d878:	f7ff ff94 	bl	800d7a4 <std>
 800d87c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d880:	2201      	movs	r2, #1
 800d882:	2109      	movs	r1, #9
 800d884:	f7ff ff8e 	bl	800d7a4 <std>
 800d888:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d88c:	2202      	movs	r2, #2
 800d88e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d892:	2112      	movs	r1, #18
 800d894:	f7ff bf86 	b.w	800d7a4 <std>
 800d898:	20009730 	.word	0x20009730
 800d89c:	200095f8 	.word	0x200095f8
 800d8a0:	0800d811 	.word	0x0800d811

0800d8a4 <__sfp_lock_acquire>:
 800d8a4:	4801      	ldr	r0, [pc, #4]	@ (800d8ac <__sfp_lock_acquire+0x8>)
 800d8a6:	f000 b918 	b.w	800dada <__retarget_lock_acquire_recursive>
 800d8aa:	bf00      	nop
 800d8ac:	20009739 	.word	0x20009739

0800d8b0 <__sfp_lock_release>:
 800d8b0:	4801      	ldr	r0, [pc, #4]	@ (800d8b8 <__sfp_lock_release+0x8>)
 800d8b2:	f000 b913 	b.w	800dadc <__retarget_lock_release_recursive>
 800d8b6:	bf00      	nop
 800d8b8:	20009739 	.word	0x20009739

0800d8bc <__sinit>:
 800d8bc:	b510      	push	{r4, lr}
 800d8be:	4604      	mov	r4, r0
 800d8c0:	f7ff fff0 	bl	800d8a4 <__sfp_lock_acquire>
 800d8c4:	6a23      	ldr	r3, [r4, #32]
 800d8c6:	b11b      	cbz	r3, 800d8d0 <__sinit+0x14>
 800d8c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8cc:	f7ff bff0 	b.w	800d8b0 <__sfp_lock_release>
 800d8d0:	4b04      	ldr	r3, [pc, #16]	@ (800d8e4 <__sinit+0x28>)
 800d8d2:	6223      	str	r3, [r4, #32]
 800d8d4:	4b04      	ldr	r3, [pc, #16]	@ (800d8e8 <__sinit+0x2c>)
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d1f5      	bne.n	800d8c8 <__sinit+0xc>
 800d8dc:	f7ff ffc4 	bl	800d868 <global_stdio_init.part.0>
 800d8e0:	e7f2      	b.n	800d8c8 <__sinit+0xc>
 800d8e2:	bf00      	nop
 800d8e4:	0800d829 	.word	0x0800d829
 800d8e8:	20009730 	.word	0x20009730

0800d8ec <_fwalk_sglue>:
 800d8ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d8f0:	4607      	mov	r7, r0
 800d8f2:	4688      	mov	r8, r1
 800d8f4:	4614      	mov	r4, r2
 800d8f6:	2600      	movs	r6, #0
 800d8f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d8fc:	f1b9 0901 	subs.w	r9, r9, #1
 800d900:	d505      	bpl.n	800d90e <_fwalk_sglue+0x22>
 800d902:	6824      	ldr	r4, [r4, #0]
 800d904:	2c00      	cmp	r4, #0
 800d906:	d1f7      	bne.n	800d8f8 <_fwalk_sglue+0xc>
 800d908:	4630      	mov	r0, r6
 800d90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d90e:	89ab      	ldrh	r3, [r5, #12]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d907      	bls.n	800d924 <_fwalk_sglue+0x38>
 800d914:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d918:	3301      	adds	r3, #1
 800d91a:	d003      	beq.n	800d924 <_fwalk_sglue+0x38>
 800d91c:	4629      	mov	r1, r5
 800d91e:	4638      	mov	r0, r7
 800d920:	47c0      	blx	r8
 800d922:	4306      	orrs	r6, r0
 800d924:	3568      	adds	r5, #104	@ 0x68
 800d926:	e7e9      	b.n	800d8fc <_fwalk_sglue+0x10>

0800d928 <iprintf>:
 800d928:	b40f      	push	{r0, r1, r2, r3}
 800d92a:	b507      	push	{r0, r1, r2, lr}
 800d92c:	4906      	ldr	r1, [pc, #24]	@ (800d948 <iprintf+0x20>)
 800d92e:	ab04      	add	r3, sp, #16
 800d930:	6808      	ldr	r0, [r1, #0]
 800d932:	f853 2b04 	ldr.w	r2, [r3], #4
 800d936:	6881      	ldr	r1, [r0, #8]
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	f000 fa27 	bl	800dd8c <_vfiprintf_r>
 800d93e:	b003      	add	sp, #12
 800d940:	f85d eb04 	ldr.w	lr, [sp], #4
 800d944:	b004      	add	sp, #16
 800d946:	4770      	bx	lr
 800d948:	20000034 	.word	0x20000034

0800d94c <__sread>:
 800d94c:	b510      	push	{r4, lr}
 800d94e:	460c      	mov	r4, r1
 800d950:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d954:	f000 f878 	bl	800da48 <_read_r>
 800d958:	2800      	cmp	r0, #0
 800d95a:	bfab      	itete	ge
 800d95c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d95e:	89a3      	ldrhlt	r3, [r4, #12]
 800d960:	181b      	addge	r3, r3, r0
 800d962:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d966:	bfac      	ite	ge
 800d968:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d96a:	81a3      	strhlt	r3, [r4, #12]
 800d96c:	bd10      	pop	{r4, pc}

0800d96e <__swrite>:
 800d96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d972:	461f      	mov	r7, r3
 800d974:	898b      	ldrh	r3, [r1, #12]
 800d976:	05db      	lsls	r3, r3, #23
 800d978:	4605      	mov	r5, r0
 800d97a:	460c      	mov	r4, r1
 800d97c:	4616      	mov	r6, r2
 800d97e:	d505      	bpl.n	800d98c <__swrite+0x1e>
 800d980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d984:	2302      	movs	r3, #2
 800d986:	2200      	movs	r2, #0
 800d988:	f000 f84c 	bl	800da24 <_lseek_r>
 800d98c:	89a3      	ldrh	r3, [r4, #12]
 800d98e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d992:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d996:	81a3      	strh	r3, [r4, #12]
 800d998:	4632      	mov	r2, r6
 800d99a:	463b      	mov	r3, r7
 800d99c:	4628      	mov	r0, r5
 800d99e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a2:	f000 b863 	b.w	800da6c <_write_r>

0800d9a6 <__sseek>:
 800d9a6:	b510      	push	{r4, lr}
 800d9a8:	460c      	mov	r4, r1
 800d9aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ae:	f000 f839 	bl	800da24 <_lseek_r>
 800d9b2:	1c43      	adds	r3, r0, #1
 800d9b4:	89a3      	ldrh	r3, [r4, #12]
 800d9b6:	bf15      	itete	ne
 800d9b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d9ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d9be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d9c2:	81a3      	strheq	r3, [r4, #12]
 800d9c4:	bf18      	it	ne
 800d9c6:	81a3      	strhne	r3, [r4, #12]
 800d9c8:	bd10      	pop	{r4, pc}

0800d9ca <__sclose>:
 800d9ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ce:	f000 b819 	b.w	800da04 <_close_r>

0800d9d2 <memcmp>:
 800d9d2:	b510      	push	{r4, lr}
 800d9d4:	3901      	subs	r1, #1
 800d9d6:	4402      	add	r2, r0
 800d9d8:	4290      	cmp	r0, r2
 800d9da:	d101      	bne.n	800d9e0 <memcmp+0xe>
 800d9dc:	2000      	movs	r0, #0
 800d9de:	e005      	b.n	800d9ec <memcmp+0x1a>
 800d9e0:	7803      	ldrb	r3, [r0, #0]
 800d9e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d9e6:	42a3      	cmp	r3, r4
 800d9e8:	d001      	beq.n	800d9ee <memcmp+0x1c>
 800d9ea:	1b18      	subs	r0, r3, r4
 800d9ec:	bd10      	pop	{r4, pc}
 800d9ee:	3001      	adds	r0, #1
 800d9f0:	e7f2      	b.n	800d9d8 <memcmp+0x6>

0800d9f2 <memset>:
 800d9f2:	4402      	add	r2, r0
 800d9f4:	4603      	mov	r3, r0
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d100      	bne.n	800d9fc <memset+0xa>
 800d9fa:	4770      	bx	lr
 800d9fc:	f803 1b01 	strb.w	r1, [r3], #1
 800da00:	e7f9      	b.n	800d9f6 <memset+0x4>
	...

0800da04 <_close_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	4d06      	ldr	r5, [pc, #24]	@ (800da20 <_close_r+0x1c>)
 800da08:	2300      	movs	r3, #0
 800da0a:	4604      	mov	r4, r0
 800da0c:	4608      	mov	r0, r1
 800da0e:	602b      	str	r3, [r5, #0]
 800da10:	f7f3 fb4e 	bl	80010b0 <_close>
 800da14:	1c43      	adds	r3, r0, #1
 800da16:	d102      	bne.n	800da1e <_close_r+0x1a>
 800da18:	682b      	ldr	r3, [r5, #0]
 800da1a:	b103      	cbz	r3, 800da1e <_close_r+0x1a>
 800da1c:	6023      	str	r3, [r4, #0]
 800da1e:	bd38      	pop	{r3, r4, r5, pc}
 800da20:	20009734 	.word	0x20009734

0800da24 <_lseek_r>:
 800da24:	b538      	push	{r3, r4, r5, lr}
 800da26:	4d07      	ldr	r5, [pc, #28]	@ (800da44 <_lseek_r+0x20>)
 800da28:	4604      	mov	r4, r0
 800da2a:	4608      	mov	r0, r1
 800da2c:	4611      	mov	r1, r2
 800da2e:	2200      	movs	r2, #0
 800da30:	602a      	str	r2, [r5, #0]
 800da32:	461a      	mov	r2, r3
 800da34:	f7f3 fb63 	bl	80010fe <_lseek>
 800da38:	1c43      	adds	r3, r0, #1
 800da3a:	d102      	bne.n	800da42 <_lseek_r+0x1e>
 800da3c:	682b      	ldr	r3, [r5, #0]
 800da3e:	b103      	cbz	r3, 800da42 <_lseek_r+0x1e>
 800da40:	6023      	str	r3, [r4, #0]
 800da42:	bd38      	pop	{r3, r4, r5, pc}
 800da44:	20009734 	.word	0x20009734

0800da48 <_read_r>:
 800da48:	b538      	push	{r3, r4, r5, lr}
 800da4a:	4d07      	ldr	r5, [pc, #28]	@ (800da68 <_read_r+0x20>)
 800da4c:	4604      	mov	r4, r0
 800da4e:	4608      	mov	r0, r1
 800da50:	4611      	mov	r1, r2
 800da52:	2200      	movs	r2, #0
 800da54:	602a      	str	r2, [r5, #0]
 800da56:	461a      	mov	r2, r3
 800da58:	f7f3 faf1 	bl	800103e <_read>
 800da5c:	1c43      	adds	r3, r0, #1
 800da5e:	d102      	bne.n	800da66 <_read_r+0x1e>
 800da60:	682b      	ldr	r3, [r5, #0]
 800da62:	b103      	cbz	r3, 800da66 <_read_r+0x1e>
 800da64:	6023      	str	r3, [r4, #0]
 800da66:	bd38      	pop	{r3, r4, r5, pc}
 800da68:	20009734 	.word	0x20009734

0800da6c <_write_r>:
 800da6c:	b538      	push	{r3, r4, r5, lr}
 800da6e:	4d07      	ldr	r5, [pc, #28]	@ (800da8c <_write_r+0x20>)
 800da70:	4604      	mov	r4, r0
 800da72:	4608      	mov	r0, r1
 800da74:	4611      	mov	r1, r2
 800da76:	2200      	movs	r2, #0
 800da78:	602a      	str	r2, [r5, #0]
 800da7a:	461a      	mov	r2, r3
 800da7c:	f7f3 fafc 	bl	8001078 <_write>
 800da80:	1c43      	adds	r3, r0, #1
 800da82:	d102      	bne.n	800da8a <_write_r+0x1e>
 800da84:	682b      	ldr	r3, [r5, #0]
 800da86:	b103      	cbz	r3, 800da8a <_write_r+0x1e>
 800da88:	6023      	str	r3, [r4, #0]
 800da8a:	bd38      	pop	{r3, r4, r5, pc}
 800da8c:	20009734 	.word	0x20009734

0800da90 <__libc_init_array>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	4d0d      	ldr	r5, [pc, #52]	@ (800dac8 <__libc_init_array+0x38>)
 800da94:	4c0d      	ldr	r4, [pc, #52]	@ (800dacc <__libc_init_array+0x3c>)
 800da96:	1b64      	subs	r4, r4, r5
 800da98:	10a4      	asrs	r4, r4, #2
 800da9a:	2600      	movs	r6, #0
 800da9c:	42a6      	cmp	r6, r4
 800da9e:	d109      	bne.n	800dab4 <__libc_init_array+0x24>
 800daa0:	4d0b      	ldr	r5, [pc, #44]	@ (800dad0 <__libc_init_array+0x40>)
 800daa2:	4c0c      	ldr	r4, [pc, #48]	@ (800dad4 <__libc_init_array+0x44>)
 800daa4:	f000 fe48 	bl	800e738 <_init>
 800daa8:	1b64      	subs	r4, r4, r5
 800daaa:	10a4      	asrs	r4, r4, #2
 800daac:	2600      	movs	r6, #0
 800daae:	42a6      	cmp	r6, r4
 800dab0:	d105      	bne.n	800dabe <__libc_init_array+0x2e>
 800dab2:	bd70      	pop	{r4, r5, r6, pc}
 800dab4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dab8:	4798      	blx	r3
 800daba:	3601      	adds	r6, #1
 800dabc:	e7ee      	b.n	800da9c <__libc_init_array+0xc>
 800dabe:	f855 3b04 	ldr.w	r3, [r5], #4
 800dac2:	4798      	blx	r3
 800dac4:	3601      	adds	r6, #1
 800dac6:	e7f2      	b.n	800daae <__libc_init_array+0x1e>
 800dac8:	080101fc 	.word	0x080101fc
 800dacc:	080101fc 	.word	0x080101fc
 800dad0:	080101fc 	.word	0x080101fc
 800dad4:	08010200 	.word	0x08010200

0800dad8 <__retarget_lock_init_recursive>:
 800dad8:	4770      	bx	lr

0800dada <__retarget_lock_acquire_recursive>:
 800dada:	4770      	bx	lr

0800dadc <__retarget_lock_release_recursive>:
 800dadc:	4770      	bx	lr

0800dade <memcpy>:
 800dade:	440a      	add	r2, r1
 800dae0:	4291      	cmp	r1, r2
 800dae2:	f100 33ff 	add.w	r3, r0, #4294967295
 800dae6:	d100      	bne.n	800daea <memcpy+0xc>
 800dae8:	4770      	bx	lr
 800daea:	b510      	push	{r4, lr}
 800daec:	f811 4b01 	ldrb.w	r4, [r1], #1
 800daf0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800daf4:	4291      	cmp	r1, r2
 800daf6:	d1f9      	bne.n	800daec <memcpy+0xe>
 800daf8:	bd10      	pop	{r4, pc}
	...

0800dafc <__assert_func>:
 800dafc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dafe:	4614      	mov	r4, r2
 800db00:	461a      	mov	r2, r3
 800db02:	4b09      	ldr	r3, [pc, #36]	@ (800db28 <__assert_func+0x2c>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	4605      	mov	r5, r0
 800db08:	68d8      	ldr	r0, [r3, #12]
 800db0a:	b14c      	cbz	r4, 800db20 <__assert_func+0x24>
 800db0c:	4b07      	ldr	r3, [pc, #28]	@ (800db2c <__assert_func+0x30>)
 800db0e:	9100      	str	r1, [sp, #0]
 800db10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800db14:	4906      	ldr	r1, [pc, #24]	@ (800db30 <__assert_func+0x34>)
 800db16:	462b      	mov	r3, r5
 800db18:	f000 fc88 	bl	800e42c <fiprintf>
 800db1c:	f000 fd3c 	bl	800e598 <abort>
 800db20:	4b04      	ldr	r3, [pc, #16]	@ (800db34 <__assert_func+0x38>)
 800db22:	461c      	mov	r4, r3
 800db24:	e7f3      	b.n	800db0e <__assert_func+0x12>
 800db26:	bf00      	nop
 800db28:	20000034 	.word	0x20000034
 800db2c:	08010185 	.word	0x08010185
 800db30:	08010192 	.word	0x08010192
 800db34:	080101c0 	.word	0x080101c0

0800db38 <_free_r>:
 800db38:	b538      	push	{r3, r4, r5, lr}
 800db3a:	4605      	mov	r5, r0
 800db3c:	2900      	cmp	r1, #0
 800db3e:	d041      	beq.n	800dbc4 <_free_r+0x8c>
 800db40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db44:	1f0c      	subs	r4, r1, #4
 800db46:	2b00      	cmp	r3, #0
 800db48:	bfb8      	it	lt
 800db4a:	18e4      	addlt	r4, r4, r3
 800db4c:	f000 f8e8 	bl	800dd20 <__malloc_lock>
 800db50:	4a1d      	ldr	r2, [pc, #116]	@ (800dbc8 <_free_r+0x90>)
 800db52:	6813      	ldr	r3, [r2, #0]
 800db54:	b933      	cbnz	r3, 800db64 <_free_r+0x2c>
 800db56:	6063      	str	r3, [r4, #4]
 800db58:	6014      	str	r4, [r2, #0]
 800db5a:	4628      	mov	r0, r5
 800db5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db60:	f000 b8e4 	b.w	800dd2c <__malloc_unlock>
 800db64:	42a3      	cmp	r3, r4
 800db66:	d908      	bls.n	800db7a <_free_r+0x42>
 800db68:	6820      	ldr	r0, [r4, #0]
 800db6a:	1821      	adds	r1, r4, r0
 800db6c:	428b      	cmp	r3, r1
 800db6e:	bf01      	itttt	eq
 800db70:	6819      	ldreq	r1, [r3, #0]
 800db72:	685b      	ldreq	r3, [r3, #4]
 800db74:	1809      	addeq	r1, r1, r0
 800db76:	6021      	streq	r1, [r4, #0]
 800db78:	e7ed      	b.n	800db56 <_free_r+0x1e>
 800db7a:	461a      	mov	r2, r3
 800db7c:	685b      	ldr	r3, [r3, #4]
 800db7e:	b10b      	cbz	r3, 800db84 <_free_r+0x4c>
 800db80:	42a3      	cmp	r3, r4
 800db82:	d9fa      	bls.n	800db7a <_free_r+0x42>
 800db84:	6811      	ldr	r1, [r2, #0]
 800db86:	1850      	adds	r0, r2, r1
 800db88:	42a0      	cmp	r0, r4
 800db8a:	d10b      	bne.n	800dba4 <_free_r+0x6c>
 800db8c:	6820      	ldr	r0, [r4, #0]
 800db8e:	4401      	add	r1, r0
 800db90:	1850      	adds	r0, r2, r1
 800db92:	4283      	cmp	r3, r0
 800db94:	6011      	str	r1, [r2, #0]
 800db96:	d1e0      	bne.n	800db5a <_free_r+0x22>
 800db98:	6818      	ldr	r0, [r3, #0]
 800db9a:	685b      	ldr	r3, [r3, #4]
 800db9c:	6053      	str	r3, [r2, #4]
 800db9e:	4408      	add	r0, r1
 800dba0:	6010      	str	r0, [r2, #0]
 800dba2:	e7da      	b.n	800db5a <_free_r+0x22>
 800dba4:	d902      	bls.n	800dbac <_free_r+0x74>
 800dba6:	230c      	movs	r3, #12
 800dba8:	602b      	str	r3, [r5, #0]
 800dbaa:	e7d6      	b.n	800db5a <_free_r+0x22>
 800dbac:	6820      	ldr	r0, [r4, #0]
 800dbae:	1821      	adds	r1, r4, r0
 800dbb0:	428b      	cmp	r3, r1
 800dbb2:	bf04      	itt	eq
 800dbb4:	6819      	ldreq	r1, [r3, #0]
 800dbb6:	685b      	ldreq	r3, [r3, #4]
 800dbb8:	6063      	str	r3, [r4, #4]
 800dbba:	bf04      	itt	eq
 800dbbc:	1809      	addeq	r1, r1, r0
 800dbbe:	6021      	streq	r1, [r4, #0]
 800dbc0:	6054      	str	r4, [r2, #4]
 800dbc2:	e7ca      	b.n	800db5a <_free_r+0x22>
 800dbc4:	bd38      	pop	{r3, r4, r5, pc}
 800dbc6:	bf00      	nop
 800dbc8:	20009740 	.word	0x20009740

0800dbcc <malloc>:
 800dbcc:	4b02      	ldr	r3, [pc, #8]	@ (800dbd8 <malloc+0xc>)
 800dbce:	4601      	mov	r1, r0
 800dbd0:	6818      	ldr	r0, [r3, #0]
 800dbd2:	f000 b825 	b.w	800dc20 <_malloc_r>
 800dbd6:	bf00      	nop
 800dbd8:	20000034 	.word	0x20000034

0800dbdc <sbrk_aligned>:
 800dbdc:	b570      	push	{r4, r5, r6, lr}
 800dbde:	4e0f      	ldr	r6, [pc, #60]	@ (800dc1c <sbrk_aligned+0x40>)
 800dbe0:	460c      	mov	r4, r1
 800dbe2:	6831      	ldr	r1, [r6, #0]
 800dbe4:	4605      	mov	r5, r0
 800dbe6:	b911      	cbnz	r1, 800dbee <sbrk_aligned+0x12>
 800dbe8:	f000 fcc6 	bl	800e578 <_sbrk_r>
 800dbec:	6030      	str	r0, [r6, #0]
 800dbee:	4621      	mov	r1, r4
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	f000 fcc1 	bl	800e578 <_sbrk_r>
 800dbf6:	1c43      	adds	r3, r0, #1
 800dbf8:	d103      	bne.n	800dc02 <sbrk_aligned+0x26>
 800dbfa:	f04f 34ff 	mov.w	r4, #4294967295
 800dbfe:	4620      	mov	r0, r4
 800dc00:	bd70      	pop	{r4, r5, r6, pc}
 800dc02:	1cc4      	adds	r4, r0, #3
 800dc04:	f024 0403 	bic.w	r4, r4, #3
 800dc08:	42a0      	cmp	r0, r4
 800dc0a:	d0f8      	beq.n	800dbfe <sbrk_aligned+0x22>
 800dc0c:	1a21      	subs	r1, r4, r0
 800dc0e:	4628      	mov	r0, r5
 800dc10:	f000 fcb2 	bl	800e578 <_sbrk_r>
 800dc14:	3001      	adds	r0, #1
 800dc16:	d1f2      	bne.n	800dbfe <sbrk_aligned+0x22>
 800dc18:	e7ef      	b.n	800dbfa <sbrk_aligned+0x1e>
 800dc1a:	bf00      	nop
 800dc1c:	2000973c 	.word	0x2000973c

0800dc20 <_malloc_r>:
 800dc20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc24:	1ccd      	adds	r5, r1, #3
 800dc26:	f025 0503 	bic.w	r5, r5, #3
 800dc2a:	3508      	adds	r5, #8
 800dc2c:	2d0c      	cmp	r5, #12
 800dc2e:	bf38      	it	cc
 800dc30:	250c      	movcc	r5, #12
 800dc32:	2d00      	cmp	r5, #0
 800dc34:	4606      	mov	r6, r0
 800dc36:	db01      	blt.n	800dc3c <_malloc_r+0x1c>
 800dc38:	42a9      	cmp	r1, r5
 800dc3a:	d904      	bls.n	800dc46 <_malloc_r+0x26>
 800dc3c:	230c      	movs	r3, #12
 800dc3e:	6033      	str	r3, [r6, #0]
 800dc40:	2000      	movs	r0, #0
 800dc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dd1c <_malloc_r+0xfc>
 800dc4a:	f000 f869 	bl	800dd20 <__malloc_lock>
 800dc4e:	f8d8 3000 	ldr.w	r3, [r8]
 800dc52:	461c      	mov	r4, r3
 800dc54:	bb44      	cbnz	r4, 800dca8 <_malloc_r+0x88>
 800dc56:	4629      	mov	r1, r5
 800dc58:	4630      	mov	r0, r6
 800dc5a:	f7ff ffbf 	bl	800dbdc <sbrk_aligned>
 800dc5e:	1c43      	adds	r3, r0, #1
 800dc60:	4604      	mov	r4, r0
 800dc62:	d158      	bne.n	800dd16 <_malloc_r+0xf6>
 800dc64:	f8d8 4000 	ldr.w	r4, [r8]
 800dc68:	4627      	mov	r7, r4
 800dc6a:	2f00      	cmp	r7, #0
 800dc6c:	d143      	bne.n	800dcf6 <_malloc_r+0xd6>
 800dc6e:	2c00      	cmp	r4, #0
 800dc70:	d04b      	beq.n	800dd0a <_malloc_r+0xea>
 800dc72:	6823      	ldr	r3, [r4, #0]
 800dc74:	4639      	mov	r1, r7
 800dc76:	4630      	mov	r0, r6
 800dc78:	eb04 0903 	add.w	r9, r4, r3
 800dc7c:	f000 fc7c 	bl	800e578 <_sbrk_r>
 800dc80:	4581      	cmp	r9, r0
 800dc82:	d142      	bne.n	800dd0a <_malloc_r+0xea>
 800dc84:	6821      	ldr	r1, [r4, #0]
 800dc86:	1a6d      	subs	r5, r5, r1
 800dc88:	4629      	mov	r1, r5
 800dc8a:	4630      	mov	r0, r6
 800dc8c:	f7ff ffa6 	bl	800dbdc <sbrk_aligned>
 800dc90:	3001      	adds	r0, #1
 800dc92:	d03a      	beq.n	800dd0a <_malloc_r+0xea>
 800dc94:	6823      	ldr	r3, [r4, #0]
 800dc96:	442b      	add	r3, r5
 800dc98:	6023      	str	r3, [r4, #0]
 800dc9a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc9e:	685a      	ldr	r2, [r3, #4]
 800dca0:	bb62      	cbnz	r2, 800dcfc <_malloc_r+0xdc>
 800dca2:	f8c8 7000 	str.w	r7, [r8]
 800dca6:	e00f      	b.n	800dcc8 <_malloc_r+0xa8>
 800dca8:	6822      	ldr	r2, [r4, #0]
 800dcaa:	1b52      	subs	r2, r2, r5
 800dcac:	d420      	bmi.n	800dcf0 <_malloc_r+0xd0>
 800dcae:	2a0b      	cmp	r2, #11
 800dcb0:	d917      	bls.n	800dce2 <_malloc_r+0xc2>
 800dcb2:	1961      	adds	r1, r4, r5
 800dcb4:	42a3      	cmp	r3, r4
 800dcb6:	6025      	str	r5, [r4, #0]
 800dcb8:	bf18      	it	ne
 800dcba:	6059      	strne	r1, [r3, #4]
 800dcbc:	6863      	ldr	r3, [r4, #4]
 800dcbe:	bf08      	it	eq
 800dcc0:	f8c8 1000 	streq.w	r1, [r8]
 800dcc4:	5162      	str	r2, [r4, r5]
 800dcc6:	604b      	str	r3, [r1, #4]
 800dcc8:	4630      	mov	r0, r6
 800dcca:	f000 f82f 	bl	800dd2c <__malloc_unlock>
 800dcce:	f104 000b 	add.w	r0, r4, #11
 800dcd2:	1d23      	adds	r3, r4, #4
 800dcd4:	f020 0007 	bic.w	r0, r0, #7
 800dcd8:	1ac2      	subs	r2, r0, r3
 800dcda:	bf1c      	itt	ne
 800dcdc:	1a1b      	subne	r3, r3, r0
 800dcde:	50a3      	strne	r3, [r4, r2]
 800dce0:	e7af      	b.n	800dc42 <_malloc_r+0x22>
 800dce2:	6862      	ldr	r2, [r4, #4]
 800dce4:	42a3      	cmp	r3, r4
 800dce6:	bf0c      	ite	eq
 800dce8:	f8c8 2000 	streq.w	r2, [r8]
 800dcec:	605a      	strne	r2, [r3, #4]
 800dcee:	e7eb      	b.n	800dcc8 <_malloc_r+0xa8>
 800dcf0:	4623      	mov	r3, r4
 800dcf2:	6864      	ldr	r4, [r4, #4]
 800dcf4:	e7ae      	b.n	800dc54 <_malloc_r+0x34>
 800dcf6:	463c      	mov	r4, r7
 800dcf8:	687f      	ldr	r7, [r7, #4]
 800dcfa:	e7b6      	b.n	800dc6a <_malloc_r+0x4a>
 800dcfc:	461a      	mov	r2, r3
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	42a3      	cmp	r3, r4
 800dd02:	d1fb      	bne.n	800dcfc <_malloc_r+0xdc>
 800dd04:	2300      	movs	r3, #0
 800dd06:	6053      	str	r3, [r2, #4]
 800dd08:	e7de      	b.n	800dcc8 <_malloc_r+0xa8>
 800dd0a:	230c      	movs	r3, #12
 800dd0c:	6033      	str	r3, [r6, #0]
 800dd0e:	4630      	mov	r0, r6
 800dd10:	f000 f80c 	bl	800dd2c <__malloc_unlock>
 800dd14:	e794      	b.n	800dc40 <_malloc_r+0x20>
 800dd16:	6005      	str	r5, [r0, #0]
 800dd18:	e7d6      	b.n	800dcc8 <_malloc_r+0xa8>
 800dd1a:	bf00      	nop
 800dd1c:	20009740 	.word	0x20009740

0800dd20 <__malloc_lock>:
 800dd20:	4801      	ldr	r0, [pc, #4]	@ (800dd28 <__malloc_lock+0x8>)
 800dd22:	f7ff beda 	b.w	800dada <__retarget_lock_acquire_recursive>
 800dd26:	bf00      	nop
 800dd28:	20009738 	.word	0x20009738

0800dd2c <__malloc_unlock>:
 800dd2c:	4801      	ldr	r0, [pc, #4]	@ (800dd34 <__malloc_unlock+0x8>)
 800dd2e:	f7ff bed5 	b.w	800dadc <__retarget_lock_release_recursive>
 800dd32:	bf00      	nop
 800dd34:	20009738 	.word	0x20009738

0800dd38 <__sfputc_r>:
 800dd38:	6893      	ldr	r3, [r2, #8]
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	b410      	push	{r4}
 800dd40:	6093      	str	r3, [r2, #8]
 800dd42:	da08      	bge.n	800dd56 <__sfputc_r+0x1e>
 800dd44:	6994      	ldr	r4, [r2, #24]
 800dd46:	42a3      	cmp	r3, r4
 800dd48:	db01      	blt.n	800dd4e <__sfputc_r+0x16>
 800dd4a:	290a      	cmp	r1, #10
 800dd4c:	d103      	bne.n	800dd56 <__sfputc_r+0x1e>
 800dd4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd52:	f000 bb7d 	b.w	800e450 <__swbuf_r>
 800dd56:	6813      	ldr	r3, [r2, #0]
 800dd58:	1c58      	adds	r0, r3, #1
 800dd5a:	6010      	str	r0, [r2, #0]
 800dd5c:	7019      	strb	r1, [r3, #0]
 800dd5e:	4608      	mov	r0, r1
 800dd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd64:	4770      	bx	lr

0800dd66 <__sfputs_r>:
 800dd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd68:	4606      	mov	r6, r0
 800dd6a:	460f      	mov	r7, r1
 800dd6c:	4614      	mov	r4, r2
 800dd6e:	18d5      	adds	r5, r2, r3
 800dd70:	42ac      	cmp	r4, r5
 800dd72:	d101      	bne.n	800dd78 <__sfputs_r+0x12>
 800dd74:	2000      	movs	r0, #0
 800dd76:	e007      	b.n	800dd88 <__sfputs_r+0x22>
 800dd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd7c:	463a      	mov	r2, r7
 800dd7e:	4630      	mov	r0, r6
 800dd80:	f7ff ffda 	bl	800dd38 <__sfputc_r>
 800dd84:	1c43      	adds	r3, r0, #1
 800dd86:	d1f3      	bne.n	800dd70 <__sfputs_r+0xa>
 800dd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd8c <_vfiprintf_r>:
 800dd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	460d      	mov	r5, r1
 800dd92:	b09d      	sub	sp, #116	@ 0x74
 800dd94:	4614      	mov	r4, r2
 800dd96:	4698      	mov	r8, r3
 800dd98:	4606      	mov	r6, r0
 800dd9a:	b118      	cbz	r0, 800dda4 <_vfiprintf_r+0x18>
 800dd9c:	6a03      	ldr	r3, [r0, #32]
 800dd9e:	b90b      	cbnz	r3, 800dda4 <_vfiprintf_r+0x18>
 800dda0:	f7ff fd8c 	bl	800d8bc <__sinit>
 800dda4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800dda6:	07d9      	lsls	r1, r3, #31
 800dda8:	d405      	bmi.n	800ddb6 <_vfiprintf_r+0x2a>
 800ddaa:	89ab      	ldrh	r3, [r5, #12]
 800ddac:	059a      	lsls	r2, r3, #22
 800ddae:	d402      	bmi.n	800ddb6 <_vfiprintf_r+0x2a>
 800ddb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ddb2:	f7ff fe92 	bl	800dada <__retarget_lock_acquire_recursive>
 800ddb6:	89ab      	ldrh	r3, [r5, #12]
 800ddb8:	071b      	lsls	r3, r3, #28
 800ddba:	d501      	bpl.n	800ddc0 <_vfiprintf_r+0x34>
 800ddbc:	692b      	ldr	r3, [r5, #16]
 800ddbe:	b99b      	cbnz	r3, 800dde8 <_vfiprintf_r+0x5c>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	f000 fb82 	bl	800e4cc <__swsetup_r>
 800ddc8:	b170      	cbz	r0, 800dde8 <_vfiprintf_r+0x5c>
 800ddca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ddcc:	07dc      	lsls	r4, r3, #31
 800ddce:	d504      	bpl.n	800ddda <_vfiprintf_r+0x4e>
 800ddd0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddd4:	b01d      	add	sp, #116	@ 0x74
 800ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddda:	89ab      	ldrh	r3, [r5, #12]
 800dddc:	0598      	lsls	r0, r3, #22
 800ddde:	d4f7      	bmi.n	800ddd0 <_vfiprintf_r+0x44>
 800dde0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800dde2:	f7ff fe7b 	bl	800dadc <__retarget_lock_release_recursive>
 800dde6:	e7f3      	b.n	800ddd0 <_vfiprintf_r+0x44>
 800dde8:	2300      	movs	r3, #0
 800ddea:	9309      	str	r3, [sp, #36]	@ 0x24
 800ddec:	2320      	movs	r3, #32
 800ddee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ddf2:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddf6:	2330      	movs	r3, #48	@ 0x30
 800ddf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800dfa8 <_vfiprintf_r+0x21c>
 800ddfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800de00:	f04f 0901 	mov.w	r9, #1
 800de04:	4623      	mov	r3, r4
 800de06:	469a      	mov	sl, r3
 800de08:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de0c:	b10a      	cbz	r2, 800de12 <_vfiprintf_r+0x86>
 800de0e:	2a25      	cmp	r2, #37	@ 0x25
 800de10:	d1f9      	bne.n	800de06 <_vfiprintf_r+0x7a>
 800de12:	ebba 0b04 	subs.w	fp, sl, r4
 800de16:	d00b      	beq.n	800de30 <_vfiprintf_r+0xa4>
 800de18:	465b      	mov	r3, fp
 800de1a:	4622      	mov	r2, r4
 800de1c:	4629      	mov	r1, r5
 800de1e:	4630      	mov	r0, r6
 800de20:	f7ff ffa1 	bl	800dd66 <__sfputs_r>
 800de24:	3001      	adds	r0, #1
 800de26:	f000 80a7 	beq.w	800df78 <_vfiprintf_r+0x1ec>
 800de2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800de2c:	445a      	add	r2, fp
 800de2e:	9209      	str	r2, [sp, #36]	@ 0x24
 800de30:	f89a 3000 	ldrb.w	r3, [sl]
 800de34:	2b00      	cmp	r3, #0
 800de36:	f000 809f 	beq.w	800df78 <_vfiprintf_r+0x1ec>
 800de3a:	2300      	movs	r3, #0
 800de3c:	f04f 32ff 	mov.w	r2, #4294967295
 800de40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de44:	f10a 0a01 	add.w	sl, sl, #1
 800de48:	9304      	str	r3, [sp, #16]
 800de4a:	9307      	str	r3, [sp, #28]
 800de4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800de50:	931a      	str	r3, [sp, #104]	@ 0x68
 800de52:	4654      	mov	r4, sl
 800de54:	2205      	movs	r2, #5
 800de56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de5a:	4853      	ldr	r0, [pc, #332]	@ (800dfa8 <_vfiprintf_r+0x21c>)
 800de5c:	f7f2 f9f0 	bl	8000240 <memchr>
 800de60:	9a04      	ldr	r2, [sp, #16]
 800de62:	b9d8      	cbnz	r0, 800de9c <_vfiprintf_r+0x110>
 800de64:	06d1      	lsls	r1, r2, #27
 800de66:	bf44      	itt	mi
 800de68:	2320      	movmi	r3, #32
 800de6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de6e:	0713      	lsls	r3, r2, #28
 800de70:	bf44      	itt	mi
 800de72:	232b      	movmi	r3, #43	@ 0x2b
 800de74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800de78:	f89a 3000 	ldrb.w	r3, [sl]
 800de7c:	2b2a      	cmp	r3, #42	@ 0x2a
 800de7e:	d015      	beq.n	800deac <_vfiprintf_r+0x120>
 800de80:	9a07      	ldr	r2, [sp, #28]
 800de82:	4654      	mov	r4, sl
 800de84:	2000      	movs	r0, #0
 800de86:	f04f 0c0a 	mov.w	ip, #10
 800de8a:	4621      	mov	r1, r4
 800de8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de90:	3b30      	subs	r3, #48	@ 0x30
 800de92:	2b09      	cmp	r3, #9
 800de94:	d94b      	bls.n	800df2e <_vfiprintf_r+0x1a2>
 800de96:	b1b0      	cbz	r0, 800dec6 <_vfiprintf_r+0x13a>
 800de98:	9207      	str	r2, [sp, #28]
 800de9a:	e014      	b.n	800dec6 <_vfiprintf_r+0x13a>
 800de9c:	eba0 0308 	sub.w	r3, r0, r8
 800dea0:	fa09 f303 	lsl.w	r3, r9, r3
 800dea4:	4313      	orrs	r3, r2
 800dea6:	9304      	str	r3, [sp, #16]
 800dea8:	46a2      	mov	sl, r4
 800deaa:	e7d2      	b.n	800de52 <_vfiprintf_r+0xc6>
 800deac:	9b03      	ldr	r3, [sp, #12]
 800deae:	1d19      	adds	r1, r3, #4
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	9103      	str	r1, [sp, #12]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	bfbb      	ittet	lt
 800deb8:	425b      	neglt	r3, r3
 800deba:	f042 0202 	orrlt.w	r2, r2, #2
 800debe:	9307      	strge	r3, [sp, #28]
 800dec0:	9307      	strlt	r3, [sp, #28]
 800dec2:	bfb8      	it	lt
 800dec4:	9204      	strlt	r2, [sp, #16]
 800dec6:	7823      	ldrb	r3, [r4, #0]
 800dec8:	2b2e      	cmp	r3, #46	@ 0x2e
 800deca:	d10a      	bne.n	800dee2 <_vfiprintf_r+0x156>
 800decc:	7863      	ldrb	r3, [r4, #1]
 800dece:	2b2a      	cmp	r3, #42	@ 0x2a
 800ded0:	d132      	bne.n	800df38 <_vfiprintf_r+0x1ac>
 800ded2:	9b03      	ldr	r3, [sp, #12]
 800ded4:	1d1a      	adds	r2, r3, #4
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	9203      	str	r2, [sp, #12]
 800deda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dede:	3402      	adds	r4, #2
 800dee0:	9305      	str	r3, [sp, #20]
 800dee2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800dfb8 <_vfiprintf_r+0x22c>
 800dee6:	7821      	ldrb	r1, [r4, #0]
 800dee8:	2203      	movs	r2, #3
 800deea:	4650      	mov	r0, sl
 800deec:	f7f2 f9a8 	bl	8000240 <memchr>
 800def0:	b138      	cbz	r0, 800df02 <_vfiprintf_r+0x176>
 800def2:	9b04      	ldr	r3, [sp, #16]
 800def4:	eba0 000a 	sub.w	r0, r0, sl
 800def8:	2240      	movs	r2, #64	@ 0x40
 800defa:	4082      	lsls	r2, r0
 800defc:	4313      	orrs	r3, r2
 800defe:	3401      	adds	r4, #1
 800df00:	9304      	str	r3, [sp, #16]
 800df02:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df06:	4829      	ldr	r0, [pc, #164]	@ (800dfac <_vfiprintf_r+0x220>)
 800df08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800df0c:	2206      	movs	r2, #6
 800df0e:	f7f2 f997 	bl	8000240 <memchr>
 800df12:	2800      	cmp	r0, #0
 800df14:	d03f      	beq.n	800df96 <_vfiprintf_r+0x20a>
 800df16:	4b26      	ldr	r3, [pc, #152]	@ (800dfb0 <_vfiprintf_r+0x224>)
 800df18:	bb1b      	cbnz	r3, 800df62 <_vfiprintf_r+0x1d6>
 800df1a:	9b03      	ldr	r3, [sp, #12]
 800df1c:	3307      	adds	r3, #7
 800df1e:	f023 0307 	bic.w	r3, r3, #7
 800df22:	3308      	adds	r3, #8
 800df24:	9303      	str	r3, [sp, #12]
 800df26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df28:	443b      	add	r3, r7
 800df2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800df2c:	e76a      	b.n	800de04 <_vfiprintf_r+0x78>
 800df2e:	fb0c 3202 	mla	r2, ip, r2, r3
 800df32:	460c      	mov	r4, r1
 800df34:	2001      	movs	r0, #1
 800df36:	e7a8      	b.n	800de8a <_vfiprintf_r+0xfe>
 800df38:	2300      	movs	r3, #0
 800df3a:	3401      	adds	r4, #1
 800df3c:	9305      	str	r3, [sp, #20]
 800df3e:	4619      	mov	r1, r3
 800df40:	f04f 0c0a 	mov.w	ip, #10
 800df44:	4620      	mov	r0, r4
 800df46:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df4a:	3a30      	subs	r2, #48	@ 0x30
 800df4c:	2a09      	cmp	r2, #9
 800df4e:	d903      	bls.n	800df58 <_vfiprintf_r+0x1cc>
 800df50:	2b00      	cmp	r3, #0
 800df52:	d0c6      	beq.n	800dee2 <_vfiprintf_r+0x156>
 800df54:	9105      	str	r1, [sp, #20]
 800df56:	e7c4      	b.n	800dee2 <_vfiprintf_r+0x156>
 800df58:	fb0c 2101 	mla	r1, ip, r1, r2
 800df5c:	4604      	mov	r4, r0
 800df5e:	2301      	movs	r3, #1
 800df60:	e7f0      	b.n	800df44 <_vfiprintf_r+0x1b8>
 800df62:	ab03      	add	r3, sp, #12
 800df64:	9300      	str	r3, [sp, #0]
 800df66:	462a      	mov	r2, r5
 800df68:	4b12      	ldr	r3, [pc, #72]	@ (800dfb4 <_vfiprintf_r+0x228>)
 800df6a:	a904      	add	r1, sp, #16
 800df6c:	4630      	mov	r0, r6
 800df6e:	f3af 8000 	nop.w
 800df72:	4607      	mov	r7, r0
 800df74:	1c78      	adds	r0, r7, #1
 800df76:	d1d6      	bne.n	800df26 <_vfiprintf_r+0x19a>
 800df78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df7a:	07d9      	lsls	r1, r3, #31
 800df7c:	d405      	bmi.n	800df8a <_vfiprintf_r+0x1fe>
 800df7e:	89ab      	ldrh	r3, [r5, #12]
 800df80:	059a      	lsls	r2, r3, #22
 800df82:	d402      	bmi.n	800df8a <_vfiprintf_r+0x1fe>
 800df84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df86:	f7ff fda9 	bl	800dadc <__retarget_lock_release_recursive>
 800df8a:	89ab      	ldrh	r3, [r5, #12]
 800df8c:	065b      	lsls	r3, r3, #25
 800df8e:	f53f af1f 	bmi.w	800ddd0 <_vfiprintf_r+0x44>
 800df92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800df94:	e71e      	b.n	800ddd4 <_vfiprintf_r+0x48>
 800df96:	ab03      	add	r3, sp, #12
 800df98:	9300      	str	r3, [sp, #0]
 800df9a:	462a      	mov	r2, r5
 800df9c:	4b05      	ldr	r3, [pc, #20]	@ (800dfb4 <_vfiprintf_r+0x228>)
 800df9e:	a904      	add	r1, sp, #16
 800dfa0:	4630      	mov	r0, r6
 800dfa2:	f000 f879 	bl	800e098 <_printf_i>
 800dfa6:	e7e4      	b.n	800df72 <_vfiprintf_r+0x1e6>
 800dfa8:	080101c1 	.word	0x080101c1
 800dfac:	080101cb 	.word	0x080101cb
 800dfb0:	00000000 	.word	0x00000000
 800dfb4:	0800dd67 	.word	0x0800dd67
 800dfb8:	080101c7 	.word	0x080101c7

0800dfbc <_printf_common>:
 800dfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc0:	4616      	mov	r6, r2
 800dfc2:	4698      	mov	r8, r3
 800dfc4:	688a      	ldr	r2, [r1, #8]
 800dfc6:	690b      	ldr	r3, [r1, #16]
 800dfc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	bfb8      	it	lt
 800dfd0:	4613      	movlt	r3, r2
 800dfd2:	6033      	str	r3, [r6, #0]
 800dfd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dfd8:	4607      	mov	r7, r0
 800dfda:	460c      	mov	r4, r1
 800dfdc:	b10a      	cbz	r2, 800dfe2 <_printf_common+0x26>
 800dfde:	3301      	adds	r3, #1
 800dfe0:	6033      	str	r3, [r6, #0]
 800dfe2:	6823      	ldr	r3, [r4, #0]
 800dfe4:	0699      	lsls	r1, r3, #26
 800dfe6:	bf42      	ittt	mi
 800dfe8:	6833      	ldrmi	r3, [r6, #0]
 800dfea:	3302      	addmi	r3, #2
 800dfec:	6033      	strmi	r3, [r6, #0]
 800dfee:	6825      	ldr	r5, [r4, #0]
 800dff0:	f015 0506 	ands.w	r5, r5, #6
 800dff4:	d106      	bne.n	800e004 <_printf_common+0x48>
 800dff6:	f104 0a19 	add.w	sl, r4, #25
 800dffa:	68e3      	ldr	r3, [r4, #12]
 800dffc:	6832      	ldr	r2, [r6, #0]
 800dffe:	1a9b      	subs	r3, r3, r2
 800e000:	42ab      	cmp	r3, r5
 800e002:	dc26      	bgt.n	800e052 <_printf_common+0x96>
 800e004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e008:	6822      	ldr	r2, [r4, #0]
 800e00a:	3b00      	subs	r3, #0
 800e00c:	bf18      	it	ne
 800e00e:	2301      	movne	r3, #1
 800e010:	0692      	lsls	r2, r2, #26
 800e012:	d42b      	bmi.n	800e06c <_printf_common+0xb0>
 800e014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e018:	4641      	mov	r1, r8
 800e01a:	4638      	mov	r0, r7
 800e01c:	47c8      	blx	r9
 800e01e:	3001      	adds	r0, #1
 800e020:	d01e      	beq.n	800e060 <_printf_common+0xa4>
 800e022:	6823      	ldr	r3, [r4, #0]
 800e024:	6922      	ldr	r2, [r4, #16]
 800e026:	f003 0306 	and.w	r3, r3, #6
 800e02a:	2b04      	cmp	r3, #4
 800e02c:	bf02      	ittt	eq
 800e02e:	68e5      	ldreq	r5, [r4, #12]
 800e030:	6833      	ldreq	r3, [r6, #0]
 800e032:	1aed      	subeq	r5, r5, r3
 800e034:	68a3      	ldr	r3, [r4, #8]
 800e036:	bf0c      	ite	eq
 800e038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e03c:	2500      	movne	r5, #0
 800e03e:	4293      	cmp	r3, r2
 800e040:	bfc4      	itt	gt
 800e042:	1a9b      	subgt	r3, r3, r2
 800e044:	18ed      	addgt	r5, r5, r3
 800e046:	2600      	movs	r6, #0
 800e048:	341a      	adds	r4, #26
 800e04a:	42b5      	cmp	r5, r6
 800e04c:	d11a      	bne.n	800e084 <_printf_common+0xc8>
 800e04e:	2000      	movs	r0, #0
 800e050:	e008      	b.n	800e064 <_printf_common+0xa8>
 800e052:	2301      	movs	r3, #1
 800e054:	4652      	mov	r2, sl
 800e056:	4641      	mov	r1, r8
 800e058:	4638      	mov	r0, r7
 800e05a:	47c8      	blx	r9
 800e05c:	3001      	adds	r0, #1
 800e05e:	d103      	bne.n	800e068 <_printf_common+0xac>
 800e060:	f04f 30ff 	mov.w	r0, #4294967295
 800e064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e068:	3501      	adds	r5, #1
 800e06a:	e7c6      	b.n	800dffa <_printf_common+0x3e>
 800e06c:	18e1      	adds	r1, r4, r3
 800e06e:	1c5a      	adds	r2, r3, #1
 800e070:	2030      	movs	r0, #48	@ 0x30
 800e072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e076:	4422      	add	r2, r4
 800e078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e07c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e080:	3302      	adds	r3, #2
 800e082:	e7c7      	b.n	800e014 <_printf_common+0x58>
 800e084:	2301      	movs	r3, #1
 800e086:	4622      	mov	r2, r4
 800e088:	4641      	mov	r1, r8
 800e08a:	4638      	mov	r0, r7
 800e08c:	47c8      	blx	r9
 800e08e:	3001      	adds	r0, #1
 800e090:	d0e6      	beq.n	800e060 <_printf_common+0xa4>
 800e092:	3601      	adds	r6, #1
 800e094:	e7d9      	b.n	800e04a <_printf_common+0x8e>
	...

0800e098 <_printf_i>:
 800e098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e09c:	7e0f      	ldrb	r7, [r1, #24]
 800e09e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e0a0:	2f78      	cmp	r7, #120	@ 0x78
 800e0a2:	4691      	mov	r9, r2
 800e0a4:	4680      	mov	r8, r0
 800e0a6:	460c      	mov	r4, r1
 800e0a8:	469a      	mov	sl, r3
 800e0aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e0ae:	d807      	bhi.n	800e0c0 <_printf_i+0x28>
 800e0b0:	2f62      	cmp	r7, #98	@ 0x62
 800e0b2:	d80a      	bhi.n	800e0ca <_printf_i+0x32>
 800e0b4:	2f00      	cmp	r7, #0
 800e0b6:	f000 80d1 	beq.w	800e25c <_printf_i+0x1c4>
 800e0ba:	2f58      	cmp	r7, #88	@ 0x58
 800e0bc:	f000 80b8 	beq.w	800e230 <_printf_i+0x198>
 800e0c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e0c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e0c8:	e03a      	b.n	800e140 <_printf_i+0xa8>
 800e0ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e0ce:	2b15      	cmp	r3, #21
 800e0d0:	d8f6      	bhi.n	800e0c0 <_printf_i+0x28>
 800e0d2:	a101      	add	r1, pc, #4	@ (adr r1, 800e0d8 <_printf_i+0x40>)
 800e0d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e0d8:	0800e131 	.word	0x0800e131
 800e0dc:	0800e145 	.word	0x0800e145
 800e0e0:	0800e0c1 	.word	0x0800e0c1
 800e0e4:	0800e0c1 	.word	0x0800e0c1
 800e0e8:	0800e0c1 	.word	0x0800e0c1
 800e0ec:	0800e0c1 	.word	0x0800e0c1
 800e0f0:	0800e145 	.word	0x0800e145
 800e0f4:	0800e0c1 	.word	0x0800e0c1
 800e0f8:	0800e0c1 	.word	0x0800e0c1
 800e0fc:	0800e0c1 	.word	0x0800e0c1
 800e100:	0800e0c1 	.word	0x0800e0c1
 800e104:	0800e243 	.word	0x0800e243
 800e108:	0800e16f 	.word	0x0800e16f
 800e10c:	0800e1fd 	.word	0x0800e1fd
 800e110:	0800e0c1 	.word	0x0800e0c1
 800e114:	0800e0c1 	.word	0x0800e0c1
 800e118:	0800e265 	.word	0x0800e265
 800e11c:	0800e0c1 	.word	0x0800e0c1
 800e120:	0800e16f 	.word	0x0800e16f
 800e124:	0800e0c1 	.word	0x0800e0c1
 800e128:	0800e0c1 	.word	0x0800e0c1
 800e12c:	0800e205 	.word	0x0800e205
 800e130:	6833      	ldr	r3, [r6, #0]
 800e132:	1d1a      	adds	r2, r3, #4
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	6032      	str	r2, [r6, #0]
 800e138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e13c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e140:	2301      	movs	r3, #1
 800e142:	e09c      	b.n	800e27e <_printf_i+0x1e6>
 800e144:	6833      	ldr	r3, [r6, #0]
 800e146:	6820      	ldr	r0, [r4, #0]
 800e148:	1d19      	adds	r1, r3, #4
 800e14a:	6031      	str	r1, [r6, #0]
 800e14c:	0606      	lsls	r6, r0, #24
 800e14e:	d501      	bpl.n	800e154 <_printf_i+0xbc>
 800e150:	681d      	ldr	r5, [r3, #0]
 800e152:	e003      	b.n	800e15c <_printf_i+0xc4>
 800e154:	0645      	lsls	r5, r0, #25
 800e156:	d5fb      	bpl.n	800e150 <_printf_i+0xb8>
 800e158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e15c:	2d00      	cmp	r5, #0
 800e15e:	da03      	bge.n	800e168 <_printf_i+0xd0>
 800e160:	232d      	movs	r3, #45	@ 0x2d
 800e162:	426d      	negs	r5, r5
 800e164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e168:	4858      	ldr	r0, [pc, #352]	@ (800e2cc <_printf_i+0x234>)
 800e16a:	230a      	movs	r3, #10
 800e16c:	e011      	b.n	800e192 <_printf_i+0xfa>
 800e16e:	6821      	ldr	r1, [r4, #0]
 800e170:	6833      	ldr	r3, [r6, #0]
 800e172:	0608      	lsls	r0, r1, #24
 800e174:	f853 5b04 	ldr.w	r5, [r3], #4
 800e178:	d402      	bmi.n	800e180 <_printf_i+0xe8>
 800e17a:	0649      	lsls	r1, r1, #25
 800e17c:	bf48      	it	mi
 800e17e:	b2ad      	uxthmi	r5, r5
 800e180:	2f6f      	cmp	r7, #111	@ 0x6f
 800e182:	4852      	ldr	r0, [pc, #328]	@ (800e2cc <_printf_i+0x234>)
 800e184:	6033      	str	r3, [r6, #0]
 800e186:	bf14      	ite	ne
 800e188:	230a      	movne	r3, #10
 800e18a:	2308      	moveq	r3, #8
 800e18c:	2100      	movs	r1, #0
 800e18e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e192:	6866      	ldr	r6, [r4, #4]
 800e194:	60a6      	str	r6, [r4, #8]
 800e196:	2e00      	cmp	r6, #0
 800e198:	db05      	blt.n	800e1a6 <_printf_i+0x10e>
 800e19a:	6821      	ldr	r1, [r4, #0]
 800e19c:	432e      	orrs	r6, r5
 800e19e:	f021 0104 	bic.w	r1, r1, #4
 800e1a2:	6021      	str	r1, [r4, #0]
 800e1a4:	d04b      	beq.n	800e23e <_printf_i+0x1a6>
 800e1a6:	4616      	mov	r6, r2
 800e1a8:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1ac:	fb03 5711 	mls	r7, r3, r1, r5
 800e1b0:	5dc7      	ldrb	r7, [r0, r7]
 800e1b2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1b6:	462f      	mov	r7, r5
 800e1b8:	42bb      	cmp	r3, r7
 800e1ba:	460d      	mov	r5, r1
 800e1bc:	d9f4      	bls.n	800e1a8 <_printf_i+0x110>
 800e1be:	2b08      	cmp	r3, #8
 800e1c0:	d10b      	bne.n	800e1da <_printf_i+0x142>
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	07df      	lsls	r7, r3, #31
 800e1c6:	d508      	bpl.n	800e1da <_printf_i+0x142>
 800e1c8:	6923      	ldr	r3, [r4, #16]
 800e1ca:	6861      	ldr	r1, [r4, #4]
 800e1cc:	4299      	cmp	r1, r3
 800e1ce:	bfde      	ittt	le
 800e1d0:	2330      	movle	r3, #48	@ 0x30
 800e1d2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1d6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e1da:	1b92      	subs	r2, r2, r6
 800e1dc:	6122      	str	r2, [r4, #16]
 800e1de:	f8cd a000 	str.w	sl, [sp]
 800e1e2:	464b      	mov	r3, r9
 800e1e4:	aa03      	add	r2, sp, #12
 800e1e6:	4621      	mov	r1, r4
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	f7ff fee7 	bl	800dfbc <_printf_common>
 800e1ee:	3001      	adds	r0, #1
 800e1f0:	d14a      	bne.n	800e288 <_printf_i+0x1f0>
 800e1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e1f6:	b004      	add	sp, #16
 800e1f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1fc:	6823      	ldr	r3, [r4, #0]
 800e1fe:	f043 0320 	orr.w	r3, r3, #32
 800e202:	6023      	str	r3, [r4, #0]
 800e204:	4832      	ldr	r0, [pc, #200]	@ (800e2d0 <_printf_i+0x238>)
 800e206:	2778      	movs	r7, #120	@ 0x78
 800e208:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e20c:	6823      	ldr	r3, [r4, #0]
 800e20e:	6831      	ldr	r1, [r6, #0]
 800e210:	061f      	lsls	r7, r3, #24
 800e212:	f851 5b04 	ldr.w	r5, [r1], #4
 800e216:	d402      	bmi.n	800e21e <_printf_i+0x186>
 800e218:	065f      	lsls	r7, r3, #25
 800e21a:	bf48      	it	mi
 800e21c:	b2ad      	uxthmi	r5, r5
 800e21e:	6031      	str	r1, [r6, #0]
 800e220:	07d9      	lsls	r1, r3, #31
 800e222:	bf44      	itt	mi
 800e224:	f043 0320 	orrmi.w	r3, r3, #32
 800e228:	6023      	strmi	r3, [r4, #0]
 800e22a:	b11d      	cbz	r5, 800e234 <_printf_i+0x19c>
 800e22c:	2310      	movs	r3, #16
 800e22e:	e7ad      	b.n	800e18c <_printf_i+0xf4>
 800e230:	4826      	ldr	r0, [pc, #152]	@ (800e2cc <_printf_i+0x234>)
 800e232:	e7e9      	b.n	800e208 <_printf_i+0x170>
 800e234:	6823      	ldr	r3, [r4, #0]
 800e236:	f023 0320 	bic.w	r3, r3, #32
 800e23a:	6023      	str	r3, [r4, #0]
 800e23c:	e7f6      	b.n	800e22c <_printf_i+0x194>
 800e23e:	4616      	mov	r6, r2
 800e240:	e7bd      	b.n	800e1be <_printf_i+0x126>
 800e242:	6833      	ldr	r3, [r6, #0]
 800e244:	6825      	ldr	r5, [r4, #0]
 800e246:	6961      	ldr	r1, [r4, #20]
 800e248:	1d18      	adds	r0, r3, #4
 800e24a:	6030      	str	r0, [r6, #0]
 800e24c:	062e      	lsls	r6, r5, #24
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	d501      	bpl.n	800e256 <_printf_i+0x1be>
 800e252:	6019      	str	r1, [r3, #0]
 800e254:	e002      	b.n	800e25c <_printf_i+0x1c4>
 800e256:	0668      	lsls	r0, r5, #25
 800e258:	d5fb      	bpl.n	800e252 <_printf_i+0x1ba>
 800e25a:	8019      	strh	r1, [r3, #0]
 800e25c:	2300      	movs	r3, #0
 800e25e:	6123      	str	r3, [r4, #16]
 800e260:	4616      	mov	r6, r2
 800e262:	e7bc      	b.n	800e1de <_printf_i+0x146>
 800e264:	6833      	ldr	r3, [r6, #0]
 800e266:	1d1a      	adds	r2, r3, #4
 800e268:	6032      	str	r2, [r6, #0]
 800e26a:	681e      	ldr	r6, [r3, #0]
 800e26c:	6862      	ldr	r2, [r4, #4]
 800e26e:	2100      	movs	r1, #0
 800e270:	4630      	mov	r0, r6
 800e272:	f7f1 ffe5 	bl	8000240 <memchr>
 800e276:	b108      	cbz	r0, 800e27c <_printf_i+0x1e4>
 800e278:	1b80      	subs	r0, r0, r6
 800e27a:	6060      	str	r0, [r4, #4]
 800e27c:	6863      	ldr	r3, [r4, #4]
 800e27e:	6123      	str	r3, [r4, #16]
 800e280:	2300      	movs	r3, #0
 800e282:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e286:	e7aa      	b.n	800e1de <_printf_i+0x146>
 800e288:	6923      	ldr	r3, [r4, #16]
 800e28a:	4632      	mov	r2, r6
 800e28c:	4649      	mov	r1, r9
 800e28e:	4640      	mov	r0, r8
 800e290:	47d0      	blx	sl
 800e292:	3001      	adds	r0, #1
 800e294:	d0ad      	beq.n	800e1f2 <_printf_i+0x15a>
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	079b      	lsls	r3, r3, #30
 800e29a:	d413      	bmi.n	800e2c4 <_printf_i+0x22c>
 800e29c:	68e0      	ldr	r0, [r4, #12]
 800e29e:	9b03      	ldr	r3, [sp, #12]
 800e2a0:	4298      	cmp	r0, r3
 800e2a2:	bfb8      	it	lt
 800e2a4:	4618      	movlt	r0, r3
 800e2a6:	e7a6      	b.n	800e1f6 <_printf_i+0x15e>
 800e2a8:	2301      	movs	r3, #1
 800e2aa:	4632      	mov	r2, r6
 800e2ac:	4649      	mov	r1, r9
 800e2ae:	4640      	mov	r0, r8
 800e2b0:	47d0      	blx	sl
 800e2b2:	3001      	adds	r0, #1
 800e2b4:	d09d      	beq.n	800e1f2 <_printf_i+0x15a>
 800e2b6:	3501      	adds	r5, #1
 800e2b8:	68e3      	ldr	r3, [r4, #12]
 800e2ba:	9903      	ldr	r1, [sp, #12]
 800e2bc:	1a5b      	subs	r3, r3, r1
 800e2be:	42ab      	cmp	r3, r5
 800e2c0:	dcf2      	bgt.n	800e2a8 <_printf_i+0x210>
 800e2c2:	e7eb      	b.n	800e29c <_printf_i+0x204>
 800e2c4:	2500      	movs	r5, #0
 800e2c6:	f104 0619 	add.w	r6, r4, #25
 800e2ca:	e7f5      	b.n	800e2b8 <_printf_i+0x220>
 800e2cc:	080101d2 	.word	0x080101d2
 800e2d0:	080101e3 	.word	0x080101e3

0800e2d4 <__sflush_r>:
 800e2d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2dc:	0716      	lsls	r6, r2, #28
 800e2de:	4605      	mov	r5, r0
 800e2e0:	460c      	mov	r4, r1
 800e2e2:	d454      	bmi.n	800e38e <__sflush_r+0xba>
 800e2e4:	684b      	ldr	r3, [r1, #4]
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	dc02      	bgt.n	800e2f0 <__sflush_r+0x1c>
 800e2ea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	dd48      	ble.n	800e382 <__sflush_r+0xae>
 800e2f0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2f2:	2e00      	cmp	r6, #0
 800e2f4:	d045      	beq.n	800e382 <__sflush_r+0xae>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e2fc:	682f      	ldr	r7, [r5, #0]
 800e2fe:	6a21      	ldr	r1, [r4, #32]
 800e300:	602b      	str	r3, [r5, #0]
 800e302:	d030      	beq.n	800e366 <__sflush_r+0x92>
 800e304:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e306:	89a3      	ldrh	r3, [r4, #12]
 800e308:	0759      	lsls	r1, r3, #29
 800e30a:	d505      	bpl.n	800e318 <__sflush_r+0x44>
 800e30c:	6863      	ldr	r3, [r4, #4]
 800e30e:	1ad2      	subs	r2, r2, r3
 800e310:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e312:	b10b      	cbz	r3, 800e318 <__sflush_r+0x44>
 800e314:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e316:	1ad2      	subs	r2, r2, r3
 800e318:	2300      	movs	r3, #0
 800e31a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e31c:	6a21      	ldr	r1, [r4, #32]
 800e31e:	4628      	mov	r0, r5
 800e320:	47b0      	blx	r6
 800e322:	1c43      	adds	r3, r0, #1
 800e324:	89a3      	ldrh	r3, [r4, #12]
 800e326:	d106      	bne.n	800e336 <__sflush_r+0x62>
 800e328:	6829      	ldr	r1, [r5, #0]
 800e32a:	291d      	cmp	r1, #29
 800e32c:	d82b      	bhi.n	800e386 <__sflush_r+0xb2>
 800e32e:	4a2a      	ldr	r2, [pc, #168]	@ (800e3d8 <__sflush_r+0x104>)
 800e330:	40ca      	lsrs	r2, r1
 800e332:	07d6      	lsls	r6, r2, #31
 800e334:	d527      	bpl.n	800e386 <__sflush_r+0xb2>
 800e336:	2200      	movs	r2, #0
 800e338:	6062      	str	r2, [r4, #4]
 800e33a:	04d9      	lsls	r1, r3, #19
 800e33c:	6922      	ldr	r2, [r4, #16]
 800e33e:	6022      	str	r2, [r4, #0]
 800e340:	d504      	bpl.n	800e34c <__sflush_r+0x78>
 800e342:	1c42      	adds	r2, r0, #1
 800e344:	d101      	bne.n	800e34a <__sflush_r+0x76>
 800e346:	682b      	ldr	r3, [r5, #0]
 800e348:	b903      	cbnz	r3, 800e34c <__sflush_r+0x78>
 800e34a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e34c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e34e:	602f      	str	r7, [r5, #0]
 800e350:	b1b9      	cbz	r1, 800e382 <__sflush_r+0xae>
 800e352:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e356:	4299      	cmp	r1, r3
 800e358:	d002      	beq.n	800e360 <__sflush_r+0x8c>
 800e35a:	4628      	mov	r0, r5
 800e35c:	f7ff fbec 	bl	800db38 <_free_r>
 800e360:	2300      	movs	r3, #0
 800e362:	6363      	str	r3, [r4, #52]	@ 0x34
 800e364:	e00d      	b.n	800e382 <__sflush_r+0xae>
 800e366:	2301      	movs	r3, #1
 800e368:	4628      	mov	r0, r5
 800e36a:	47b0      	blx	r6
 800e36c:	4602      	mov	r2, r0
 800e36e:	1c50      	adds	r0, r2, #1
 800e370:	d1c9      	bne.n	800e306 <__sflush_r+0x32>
 800e372:	682b      	ldr	r3, [r5, #0]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d0c6      	beq.n	800e306 <__sflush_r+0x32>
 800e378:	2b1d      	cmp	r3, #29
 800e37a:	d001      	beq.n	800e380 <__sflush_r+0xac>
 800e37c:	2b16      	cmp	r3, #22
 800e37e:	d11e      	bne.n	800e3be <__sflush_r+0xea>
 800e380:	602f      	str	r7, [r5, #0]
 800e382:	2000      	movs	r0, #0
 800e384:	e022      	b.n	800e3cc <__sflush_r+0xf8>
 800e386:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e38a:	b21b      	sxth	r3, r3
 800e38c:	e01b      	b.n	800e3c6 <__sflush_r+0xf2>
 800e38e:	690f      	ldr	r7, [r1, #16]
 800e390:	2f00      	cmp	r7, #0
 800e392:	d0f6      	beq.n	800e382 <__sflush_r+0xae>
 800e394:	0793      	lsls	r3, r2, #30
 800e396:	680e      	ldr	r6, [r1, #0]
 800e398:	bf08      	it	eq
 800e39a:	694b      	ldreq	r3, [r1, #20]
 800e39c:	600f      	str	r7, [r1, #0]
 800e39e:	bf18      	it	ne
 800e3a0:	2300      	movne	r3, #0
 800e3a2:	eba6 0807 	sub.w	r8, r6, r7
 800e3a6:	608b      	str	r3, [r1, #8]
 800e3a8:	f1b8 0f00 	cmp.w	r8, #0
 800e3ac:	dde9      	ble.n	800e382 <__sflush_r+0xae>
 800e3ae:	6a21      	ldr	r1, [r4, #32]
 800e3b0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3b2:	4643      	mov	r3, r8
 800e3b4:	463a      	mov	r2, r7
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	47b0      	blx	r6
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	dc08      	bgt.n	800e3d0 <__sflush_r+0xfc>
 800e3be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3c6:	81a3      	strh	r3, [r4, #12]
 800e3c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3d0:	4407      	add	r7, r0
 800e3d2:	eba8 0800 	sub.w	r8, r8, r0
 800e3d6:	e7e7      	b.n	800e3a8 <__sflush_r+0xd4>
 800e3d8:	20400001 	.word	0x20400001

0800e3dc <_fflush_r>:
 800e3dc:	b538      	push	{r3, r4, r5, lr}
 800e3de:	690b      	ldr	r3, [r1, #16]
 800e3e0:	4605      	mov	r5, r0
 800e3e2:	460c      	mov	r4, r1
 800e3e4:	b913      	cbnz	r3, 800e3ec <_fflush_r+0x10>
 800e3e6:	2500      	movs	r5, #0
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	bd38      	pop	{r3, r4, r5, pc}
 800e3ec:	b118      	cbz	r0, 800e3f6 <_fflush_r+0x1a>
 800e3ee:	6a03      	ldr	r3, [r0, #32]
 800e3f0:	b90b      	cbnz	r3, 800e3f6 <_fflush_r+0x1a>
 800e3f2:	f7ff fa63 	bl	800d8bc <__sinit>
 800e3f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d0f3      	beq.n	800e3e6 <_fflush_r+0xa>
 800e3fe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e400:	07d0      	lsls	r0, r2, #31
 800e402:	d404      	bmi.n	800e40e <_fflush_r+0x32>
 800e404:	0599      	lsls	r1, r3, #22
 800e406:	d402      	bmi.n	800e40e <_fflush_r+0x32>
 800e408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e40a:	f7ff fb66 	bl	800dada <__retarget_lock_acquire_recursive>
 800e40e:	4628      	mov	r0, r5
 800e410:	4621      	mov	r1, r4
 800e412:	f7ff ff5f 	bl	800e2d4 <__sflush_r>
 800e416:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e418:	07da      	lsls	r2, r3, #31
 800e41a:	4605      	mov	r5, r0
 800e41c:	d4e4      	bmi.n	800e3e8 <_fflush_r+0xc>
 800e41e:	89a3      	ldrh	r3, [r4, #12]
 800e420:	059b      	lsls	r3, r3, #22
 800e422:	d4e1      	bmi.n	800e3e8 <_fflush_r+0xc>
 800e424:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e426:	f7ff fb59 	bl	800dadc <__retarget_lock_release_recursive>
 800e42a:	e7dd      	b.n	800e3e8 <_fflush_r+0xc>

0800e42c <fiprintf>:
 800e42c:	b40e      	push	{r1, r2, r3}
 800e42e:	b503      	push	{r0, r1, lr}
 800e430:	4601      	mov	r1, r0
 800e432:	ab03      	add	r3, sp, #12
 800e434:	4805      	ldr	r0, [pc, #20]	@ (800e44c <fiprintf+0x20>)
 800e436:	f853 2b04 	ldr.w	r2, [r3], #4
 800e43a:	6800      	ldr	r0, [r0, #0]
 800e43c:	9301      	str	r3, [sp, #4]
 800e43e:	f7ff fca5 	bl	800dd8c <_vfiprintf_r>
 800e442:	b002      	add	sp, #8
 800e444:	f85d eb04 	ldr.w	lr, [sp], #4
 800e448:	b003      	add	sp, #12
 800e44a:	4770      	bx	lr
 800e44c:	20000034 	.word	0x20000034

0800e450 <__swbuf_r>:
 800e450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e452:	460e      	mov	r6, r1
 800e454:	4614      	mov	r4, r2
 800e456:	4605      	mov	r5, r0
 800e458:	b118      	cbz	r0, 800e462 <__swbuf_r+0x12>
 800e45a:	6a03      	ldr	r3, [r0, #32]
 800e45c:	b90b      	cbnz	r3, 800e462 <__swbuf_r+0x12>
 800e45e:	f7ff fa2d 	bl	800d8bc <__sinit>
 800e462:	69a3      	ldr	r3, [r4, #24]
 800e464:	60a3      	str	r3, [r4, #8]
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	071a      	lsls	r2, r3, #28
 800e46a:	d501      	bpl.n	800e470 <__swbuf_r+0x20>
 800e46c:	6923      	ldr	r3, [r4, #16]
 800e46e:	b943      	cbnz	r3, 800e482 <__swbuf_r+0x32>
 800e470:	4621      	mov	r1, r4
 800e472:	4628      	mov	r0, r5
 800e474:	f000 f82a 	bl	800e4cc <__swsetup_r>
 800e478:	b118      	cbz	r0, 800e482 <__swbuf_r+0x32>
 800e47a:	f04f 37ff 	mov.w	r7, #4294967295
 800e47e:	4638      	mov	r0, r7
 800e480:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e482:	6823      	ldr	r3, [r4, #0]
 800e484:	6922      	ldr	r2, [r4, #16]
 800e486:	1a98      	subs	r0, r3, r2
 800e488:	6963      	ldr	r3, [r4, #20]
 800e48a:	b2f6      	uxtb	r6, r6
 800e48c:	4283      	cmp	r3, r0
 800e48e:	4637      	mov	r7, r6
 800e490:	dc05      	bgt.n	800e49e <__swbuf_r+0x4e>
 800e492:	4621      	mov	r1, r4
 800e494:	4628      	mov	r0, r5
 800e496:	f7ff ffa1 	bl	800e3dc <_fflush_r>
 800e49a:	2800      	cmp	r0, #0
 800e49c:	d1ed      	bne.n	800e47a <__swbuf_r+0x2a>
 800e49e:	68a3      	ldr	r3, [r4, #8]
 800e4a0:	3b01      	subs	r3, #1
 800e4a2:	60a3      	str	r3, [r4, #8]
 800e4a4:	6823      	ldr	r3, [r4, #0]
 800e4a6:	1c5a      	adds	r2, r3, #1
 800e4a8:	6022      	str	r2, [r4, #0]
 800e4aa:	701e      	strb	r6, [r3, #0]
 800e4ac:	6962      	ldr	r2, [r4, #20]
 800e4ae:	1c43      	adds	r3, r0, #1
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d004      	beq.n	800e4be <__swbuf_r+0x6e>
 800e4b4:	89a3      	ldrh	r3, [r4, #12]
 800e4b6:	07db      	lsls	r3, r3, #31
 800e4b8:	d5e1      	bpl.n	800e47e <__swbuf_r+0x2e>
 800e4ba:	2e0a      	cmp	r6, #10
 800e4bc:	d1df      	bne.n	800e47e <__swbuf_r+0x2e>
 800e4be:	4621      	mov	r1, r4
 800e4c0:	4628      	mov	r0, r5
 800e4c2:	f7ff ff8b 	bl	800e3dc <_fflush_r>
 800e4c6:	2800      	cmp	r0, #0
 800e4c8:	d0d9      	beq.n	800e47e <__swbuf_r+0x2e>
 800e4ca:	e7d6      	b.n	800e47a <__swbuf_r+0x2a>

0800e4cc <__swsetup_r>:
 800e4cc:	b538      	push	{r3, r4, r5, lr}
 800e4ce:	4b29      	ldr	r3, [pc, #164]	@ (800e574 <__swsetup_r+0xa8>)
 800e4d0:	4605      	mov	r5, r0
 800e4d2:	6818      	ldr	r0, [r3, #0]
 800e4d4:	460c      	mov	r4, r1
 800e4d6:	b118      	cbz	r0, 800e4e0 <__swsetup_r+0x14>
 800e4d8:	6a03      	ldr	r3, [r0, #32]
 800e4da:	b90b      	cbnz	r3, 800e4e0 <__swsetup_r+0x14>
 800e4dc:	f7ff f9ee 	bl	800d8bc <__sinit>
 800e4e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e4e4:	0719      	lsls	r1, r3, #28
 800e4e6:	d422      	bmi.n	800e52e <__swsetup_r+0x62>
 800e4e8:	06da      	lsls	r2, r3, #27
 800e4ea:	d407      	bmi.n	800e4fc <__swsetup_r+0x30>
 800e4ec:	2209      	movs	r2, #9
 800e4ee:	602a      	str	r2, [r5, #0]
 800e4f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e4f4:	81a3      	strh	r3, [r4, #12]
 800e4f6:	f04f 30ff 	mov.w	r0, #4294967295
 800e4fa:	e033      	b.n	800e564 <__swsetup_r+0x98>
 800e4fc:	0758      	lsls	r0, r3, #29
 800e4fe:	d512      	bpl.n	800e526 <__swsetup_r+0x5a>
 800e500:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e502:	b141      	cbz	r1, 800e516 <__swsetup_r+0x4a>
 800e504:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e508:	4299      	cmp	r1, r3
 800e50a:	d002      	beq.n	800e512 <__swsetup_r+0x46>
 800e50c:	4628      	mov	r0, r5
 800e50e:	f7ff fb13 	bl	800db38 <_free_r>
 800e512:	2300      	movs	r3, #0
 800e514:	6363      	str	r3, [r4, #52]	@ 0x34
 800e516:	89a3      	ldrh	r3, [r4, #12]
 800e518:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e51c:	81a3      	strh	r3, [r4, #12]
 800e51e:	2300      	movs	r3, #0
 800e520:	6063      	str	r3, [r4, #4]
 800e522:	6923      	ldr	r3, [r4, #16]
 800e524:	6023      	str	r3, [r4, #0]
 800e526:	89a3      	ldrh	r3, [r4, #12]
 800e528:	f043 0308 	orr.w	r3, r3, #8
 800e52c:	81a3      	strh	r3, [r4, #12]
 800e52e:	6923      	ldr	r3, [r4, #16]
 800e530:	b94b      	cbnz	r3, 800e546 <__swsetup_r+0x7a>
 800e532:	89a3      	ldrh	r3, [r4, #12]
 800e534:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e538:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e53c:	d003      	beq.n	800e546 <__swsetup_r+0x7a>
 800e53e:	4621      	mov	r1, r4
 800e540:	4628      	mov	r0, r5
 800e542:	f000 f856 	bl	800e5f2 <__smakebuf_r>
 800e546:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e54a:	f013 0201 	ands.w	r2, r3, #1
 800e54e:	d00a      	beq.n	800e566 <__swsetup_r+0x9a>
 800e550:	2200      	movs	r2, #0
 800e552:	60a2      	str	r2, [r4, #8]
 800e554:	6962      	ldr	r2, [r4, #20]
 800e556:	4252      	negs	r2, r2
 800e558:	61a2      	str	r2, [r4, #24]
 800e55a:	6922      	ldr	r2, [r4, #16]
 800e55c:	b942      	cbnz	r2, 800e570 <__swsetup_r+0xa4>
 800e55e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e562:	d1c5      	bne.n	800e4f0 <__swsetup_r+0x24>
 800e564:	bd38      	pop	{r3, r4, r5, pc}
 800e566:	0799      	lsls	r1, r3, #30
 800e568:	bf58      	it	pl
 800e56a:	6962      	ldrpl	r2, [r4, #20]
 800e56c:	60a2      	str	r2, [r4, #8]
 800e56e:	e7f4      	b.n	800e55a <__swsetup_r+0x8e>
 800e570:	2000      	movs	r0, #0
 800e572:	e7f7      	b.n	800e564 <__swsetup_r+0x98>
 800e574:	20000034 	.word	0x20000034

0800e578 <_sbrk_r>:
 800e578:	b538      	push	{r3, r4, r5, lr}
 800e57a:	4d06      	ldr	r5, [pc, #24]	@ (800e594 <_sbrk_r+0x1c>)
 800e57c:	2300      	movs	r3, #0
 800e57e:	4604      	mov	r4, r0
 800e580:	4608      	mov	r0, r1
 800e582:	602b      	str	r3, [r5, #0]
 800e584:	f7f2 fdc8 	bl	8001118 <_sbrk>
 800e588:	1c43      	adds	r3, r0, #1
 800e58a:	d102      	bne.n	800e592 <_sbrk_r+0x1a>
 800e58c:	682b      	ldr	r3, [r5, #0]
 800e58e:	b103      	cbz	r3, 800e592 <_sbrk_r+0x1a>
 800e590:	6023      	str	r3, [r4, #0]
 800e592:	bd38      	pop	{r3, r4, r5, pc}
 800e594:	20009734 	.word	0x20009734

0800e598 <abort>:
 800e598:	b508      	push	{r3, lr}
 800e59a:	2006      	movs	r0, #6
 800e59c:	f000 f88e 	bl	800e6bc <raise>
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	f7f2 fd41 	bl	8001028 <_exit>

0800e5a6 <__swhatbuf_r>:
 800e5a6:	b570      	push	{r4, r5, r6, lr}
 800e5a8:	460c      	mov	r4, r1
 800e5aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5ae:	2900      	cmp	r1, #0
 800e5b0:	b096      	sub	sp, #88	@ 0x58
 800e5b2:	4615      	mov	r5, r2
 800e5b4:	461e      	mov	r6, r3
 800e5b6:	da0d      	bge.n	800e5d4 <__swhatbuf_r+0x2e>
 800e5b8:	89a3      	ldrh	r3, [r4, #12]
 800e5ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e5be:	f04f 0100 	mov.w	r1, #0
 800e5c2:	bf14      	ite	ne
 800e5c4:	2340      	movne	r3, #64	@ 0x40
 800e5c6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e5ca:	2000      	movs	r0, #0
 800e5cc:	6031      	str	r1, [r6, #0]
 800e5ce:	602b      	str	r3, [r5, #0]
 800e5d0:	b016      	add	sp, #88	@ 0x58
 800e5d2:	bd70      	pop	{r4, r5, r6, pc}
 800e5d4:	466a      	mov	r2, sp
 800e5d6:	f000 f879 	bl	800e6cc <_fstat_r>
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	dbec      	blt.n	800e5b8 <__swhatbuf_r+0x12>
 800e5de:	9901      	ldr	r1, [sp, #4]
 800e5e0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e5e4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e5e8:	4259      	negs	r1, r3
 800e5ea:	4159      	adcs	r1, r3
 800e5ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e5f0:	e7eb      	b.n	800e5ca <__swhatbuf_r+0x24>

0800e5f2 <__smakebuf_r>:
 800e5f2:	898b      	ldrh	r3, [r1, #12]
 800e5f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e5f6:	079d      	lsls	r5, r3, #30
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	460c      	mov	r4, r1
 800e5fc:	d507      	bpl.n	800e60e <__smakebuf_r+0x1c>
 800e5fe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e602:	6023      	str	r3, [r4, #0]
 800e604:	6123      	str	r3, [r4, #16]
 800e606:	2301      	movs	r3, #1
 800e608:	6163      	str	r3, [r4, #20]
 800e60a:	b003      	add	sp, #12
 800e60c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e60e:	ab01      	add	r3, sp, #4
 800e610:	466a      	mov	r2, sp
 800e612:	f7ff ffc8 	bl	800e5a6 <__swhatbuf_r>
 800e616:	9f00      	ldr	r7, [sp, #0]
 800e618:	4605      	mov	r5, r0
 800e61a:	4639      	mov	r1, r7
 800e61c:	4630      	mov	r0, r6
 800e61e:	f7ff faff 	bl	800dc20 <_malloc_r>
 800e622:	b948      	cbnz	r0, 800e638 <__smakebuf_r+0x46>
 800e624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e628:	059a      	lsls	r2, r3, #22
 800e62a:	d4ee      	bmi.n	800e60a <__smakebuf_r+0x18>
 800e62c:	f023 0303 	bic.w	r3, r3, #3
 800e630:	f043 0302 	orr.w	r3, r3, #2
 800e634:	81a3      	strh	r3, [r4, #12]
 800e636:	e7e2      	b.n	800e5fe <__smakebuf_r+0xc>
 800e638:	89a3      	ldrh	r3, [r4, #12]
 800e63a:	6020      	str	r0, [r4, #0]
 800e63c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e640:	81a3      	strh	r3, [r4, #12]
 800e642:	9b01      	ldr	r3, [sp, #4]
 800e644:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e648:	b15b      	cbz	r3, 800e662 <__smakebuf_r+0x70>
 800e64a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e64e:	4630      	mov	r0, r6
 800e650:	f000 f84e 	bl	800e6f0 <_isatty_r>
 800e654:	b128      	cbz	r0, 800e662 <__smakebuf_r+0x70>
 800e656:	89a3      	ldrh	r3, [r4, #12]
 800e658:	f023 0303 	bic.w	r3, r3, #3
 800e65c:	f043 0301 	orr.w	r3, r3, #1
 800e660:	81a3      	strh	r3, [r4, #12]
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	431d      	orrs	r5, r3
 800e666:	81a5      	strh	r5, [r4, #12]
 800e668:	e7cf      	b.n	800e60a <__smakebuf_r+0x18>

0800e66a <_raise_r>:
 800e66a:	291f      	cmp	r1, #31
 800e66c:	b538      	push	{r3, r4, r5, lr}
 800e66e:	4605      	mov	r5, r0
 800e670:	460c      	mov	r4, r1
 800e672:	d904      	bls.n	800e67e <_raise_r+0x14>
 800e674:	2316      	movs	r3, #22
 800e676:	6003      	str	r3, [r0, #0]
 800e678:	f04f 30ff 	mov.w	r0, #4294967295
 800e67c:	bd38      	pop	{r3, r4, r5, pc}
 800e67e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e680:	b112      	cbz	r2, 800e688 <_raise_r+0x1e>
 800e682:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e686:	b94b      	cbnz	r3, 800e69c <_raise_r+0x32>
 800e688:	4628      	mov	r0, r5
 800e68a:	f000 f853 	bl	800e734 <_getpid_r>
 800e68e:	4622      	mov	r2, r4
 800e690:	4601      	mov	r1, r0
 800e692:	4628      	mov	r0, r5
 800e694:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e698:	f000 b83a 	b.w	800e710 <_kill_r>
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d00a      	beq.n	800e6b6 <_raise_r+0x4c>
 800e6a0:	1c59      	adds	r1, r3, #1
 800e6a2:	d103      	bne.n	800e6ac <_raise_r+0x42>
 800e6a4:	2316      	movs	r3, #22
 800e6a6:	6003      	str	r3, [r0, #0]
 800e6a8:	2001      	movs	r0, #1
 800e6aa:	e7e7      	b.n	800e67c <_raise_r+0x12>
 800e6ac:	2100      	movs	r1, #0
 800e6ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e6b2:	4620      	mov	r0, r4
 800e6b4:	4798      	blx	r3
 800e6b6:	2000      	movs	r0, #0
 800e6b8:	e7e0      	b.n	800e67c <_raise_r+0x12>
	...

0800e6bc <raise>:
 800e6bc:	4b02      	ldr	r3, [pc, #8]	@ (800e6c8 <raise+0xc>)
 800e6be:	4601      	mov	r1, r0
 800e6c0:	6818      	ldr	r0, [r3, #0]
 800e6c2:	f7ff bfd2 	b.w	800e66a <_raise_r>
 800e6c6:	bf00      	nop
 800e6c8:	20000034 	.word	0x20000034

0800e6cc <_fstat_r>:
 800e6cc:	b538      	push	{r3, r4, r5, lr}
 800e6ce:	4d07      	ldr	r5, [pc, #28]	@ (800e6ec <_fstat_r+0x20>)
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	4608      	mov	r0, r1
 800e6d6:	4611      	mov	r1, r2
 800e6d8:	602b      	str	r3, [r5, #0]
 800e6da:	f7f2 fcf5 	bl	80010c8 <_fstat>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	d102      	bne.n	800e6e8 <_fstat_r+0x1c>
 800e6e2:	682b      	ldr	r3, [r5, #0]
 800e6e4:	b103      	cbz	r3, 800e6e8 <_fstat_r+0x1c>
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ea:	bf00      	nop
 800e6ec:	20009734 	.word	0x20009734

0800e6f0 <_isatty_r>:
 800e6f0:	b538      	push	{r3, r4, r5, lr}
 800e6f2:	4d06      	ldr	r5, [pc, #24]	@ (800e70c <_isatty_r+0x1c>)
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	4608      	mov	r0, r1
 800e6fa:	602b      	str	r3, [r5, #0]
 800e6fc:	f7f2 fcf4 	bl	80010e8 <_isatty>
 800e700:	1c43      	adds	r3, r0, #1
 800e702:	d102      	bne.n	800e70a <_isatty_r+0x1a>
 800e704:	682b      	ldr	r3, [r5, #0]
 800e706:	b103      	cbz	r3, 800e70a <_isatty_r+0x1a>
 800e708:	6023      	str	r3, [r4, #0]
 800e70a:	bd38      	pop	{r3, r4, r5, pc}
 800e70c:	20009734 	.word	0x20009734

0800e710 <_kill_r>:
 800e710:	b538      	push	{r3, r4, r5, lr}
 800e712:	4d07      	ldr	r5, [pc, #28]	@ (800e730 <_kill_r+0x20>)
 800e714:	2300      	movs	r3, #0
 800e716:	4604      	mov	r4, r0
 800e718:	4608      	mov	r0, r1
 800e71a:	4611      	mov	r1, r2
 800e71c:	602b      	str	r3, [r5, #0]
 800e71e:	f7f2 fc71 	bl	8001004 <_kill>
 800e722:	1c43      	adds	r3, r0, #1
 800e724:	d102      	bne.n	800e72c <_kill_r+0x1c>
 800e726:	682b      	ldr	r3, [r5, #0]
 800e728:	b103      	cbz	r3, 800e72c <_kill_r+0x1c>
 800e72a:	6023      	str	r3, [r4, #0]
 800e72c:	bd38      	pop	{r3, r4, r5, pc}
 800e72e:	bf00      	nop
 800e730:	20009734 	.word	0x20009734

0800e734 <_getpid_r>:
 800e734:	f7f2 bc5e 	b.w	8000ff4 <_getpid>

0800e738 <_init>:
 800e738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e73a:	bf00      	nop
 800e73c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e73e:	bc08      	pop	{r3}
 800e740:	469e      	mov	lr, r3
 800e742:	4770      	bx	lr

0800e744 <_fini>:
 800e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e746:	bf00      	nop
 800e748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e74a:	bc08      	pop	{r3}
 800e74c:	469e      	mov	lr, r3
 800e74e:	4770      	bx	lr
