
SAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b28  08000200  08000200  00001200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08005d28  08005d28  00006d28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d84  08005d84  0000705c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005d84  08005d84  00006d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d8c  08005d8c  0000705c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d8c  08005d8c  00006d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d90  08005d90  00006d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08005d94  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012b80  2000005c  08005df0  0000705c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012bdc  08005df0  00007bdc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000705c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd7d  00000000  00000000  0000708a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eb3  00000000  00000000  00013e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00015cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007af  00000000  00000000  000166a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026bc0  00000000  00000000  00016e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c991  00000000  00000000  0003da17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f40c0  00000000  00000000  0004a3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e468  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ce0  00000000  00000000  0013e4ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000003d  00000000  00000000  0014118c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	@ (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	@ (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	@ (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08005d10 	.word	0x08005d10

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	@ (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	@ (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	@ (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08005d10 	.word	0x08005d10

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fe01 	bl	8001216 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f818 	bl	8000648 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Delay(50);
 8000618:	2032      	movs	r0, #50	@ 0x32
 800061a:	f000 fe59 	bl	80012d0 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f93b 	bl	8000898 <MX_GPIO_Init>
  MX_DMA_Init();
 8000622:	f000 f907 	bl	8000834 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000626:	f000 f8d5 	bl	80007d4 <MX_USART3_UART_Init>
  MX_SAI2_Init();
 800062a:	f000 f87b 	bl	8000724 <MX_SAI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t *)sai_dma_buffer, 2 * AUDIO_BUFFER_SIZE);
 800062e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000632:	4903      	ldr	r1, [pc, #12]	@ (8000640 <main+0x34>)
 8000634:	4803      	ldr	r0, [pc, #12]	@ (8000644 <main+0x38>)
 8000636:	f003 fa09 	bl	8003a4c <HAL_SAI_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800063a:	bf00      	nop
 800063c:	e7fd      	b.n	800063a <main+0x2e>
 800063e:	bf00      	nop
 8000640:	20000244 	.word	0x20000244
 8000644:	20000078 	.word	0x20000078

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b094      	sub	sp, #80	@ 0x50
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 031c 	add.w	r3, r7, #28
 8000652:	2234      	movs	r2, #52	@ 0x34
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f004 fedc 	bl	8005414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]
 800066a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066c:	4b2b      	ldr	r3, [pc, #172]	@ (800071c <SystemClock_Config+0xd4>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a2a      	ldr	r2, [pc, #168]	@ (800071c <SystemClock_Config+0xd4>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xd4>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	4b26      	ldr	r3, [pc, #152]	@ (8000720 <SystemClock_Config+0xd8>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a25      	ldr	r2, [pc, #148]	@ (8000720 <SystemClock_Config+0xd8>)
 800068a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800068e:	6013      	str	r3, [r2, #0]
 8000690:	4b23      	ldr	r3, [pc, #140]	@ (8000720 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000698:	603b      	str	r3, [r7, #0]
 800069a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800069c:	2302      	movs	r3, #2
 800069e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a4:	2310      	movs	r3, #16
 80006a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a8:	2302      	movs	r3, #2
 80006aa:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ac:	2300      	movs	r3, #0
 80006ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b0:	2308      	movs	r3, #8
 80006b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006b4:	23d8      	movs	r3, #216	@ 0xd8
 80006b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006b8:	2302      	movs	r3, #2
 80006ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 031c 	add.w	r3, r7, #28
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 fd57 	bl	800217c <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006d4:	f000 fb3c 	bl	8000d50 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006d8:	f001 fd00 	bl	80020dc <HAL_PWREx_EnableOverDrive>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e2:	f000 fb35 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	230f      	movs	r3, #15
 80006e8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2302      	movs	r3, #2
 80006ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	2107      	movs	r1, #7
 8000704:	4618      	mov	r0, r3
 8000706:	f001 ffe7 	bl	80026d8 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000710:	f000 fb1e 	bl	8000d50 <Error_Handler>
  }
}
 8000714:	bf00      	nop
 8000716:	3750      	adds	r7, #80	@ 0x50
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
 8000728:	4b28      	ldr	r3, [pc, #160]	@ (80007cc <MX_SAI2_Init+0xa8>)
 800072a:	4a29      	ldr	r2, [pc, #164]	@ (80007d0 <MX_SAI2_Init+0xac>)
 800072c:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800072e:	4b27      	ldr	r3, [pc, #156]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000730:	2200      	movs	r2, #0
 8000732:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 8000734:	4b25      	ldr	r3, [pc, #148]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000736:	2201      	movs	r2, #1
 8000738:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 800073a:	4b24      	ldr	r3, [pc, #144]	@ (80007cc <MX_SAI2_Init+0xa8>)
 800073c:	22c0      	movs	r2, #192	@ 0xc0
 800073e:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000742:	2200      	movs	r2, #0
 8000744:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000746:	4b21      	ldr	r3, [pc, #132]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000748:	2200      	movs	r2, #0
 800074a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <MX_SAI2_Init+0xa8>)
 800074e:	2200      	movs	r2, #0
 8000750:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000752:	4b1e      	ldr	r3, [pc, #120]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000758:	4b1c      	ldr	r3, [pc, #112]	@ (80007cc <MX_SAI2_Init+0xa8>)
 800075a:	2200      	movs	r2, #0
 800075c:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800075e:	4b1b      	ldr	r3, [pc, #108]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_22K;
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000766:	f245 6222 	movw	r2, #22050	@ 0x5622
 800076a:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800076c:	4b17      	ldr	r3, [pc, #92]	@ (80007cc <MX_SAI2_Init+0xa8>)
 800076e:	2200      	movs	r2, #0
 8000770:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8000772:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000774:	2200      	movs	r2, #0
 8000776:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000778:	4b14      	ldr	r3, [pc, #80]	@ (80007cc <MX_SAI2_Init+0xa8>)
 800077a:	2200      	movs	r2, #0
 800077c:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.FrameInit.FrameLength = 64;
 800077e:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000780:	2240      	movs	r2, #64	@ 0x40
 8000782:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 8000784:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000786:	2220      	movs	r2, #32
 8000788:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800078a:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <MX_SAI2_Init+0xa8>)
 800078c:	2200      	movs	r2, #0
 800078e:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000790:	4b0e      	ldr	r3, [pc, #56]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000792:	2200      	movs	r2, #0
 8000794:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8000796:	4b0d      	ldr	r3, [pc, #52]	@ (80007cc <MX_SAI2_Init+0xa8>)
 8000798:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800079c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 1;
 800079e:	4b0b      	ldr	r3, [pc, #44]	@ (80007cc <MX_SAI2_Init+0xa8>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80007a4:	4b09      	ldr	r3, [pc, #36]	@ (80007cc <MX_SAI2_Init+0xa8>)
 80007a6:	2280      	movs	r2, #128	@ 0x80
 80007a8:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <MX_SAI2_Init+0xa8>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000001;
 80007b0:	4b06      	ldr	r3, [pc, #24]	@ (80007cc <MX_SAI2_Init+0xa8>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	@ (80007cc <MX_SAI2_Init+0xa8>)
 80007b8:	f002 ff46 	bl	8003648 <HAL_SAI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_SAI2_Init+0xa2>
  {
    Error_Handler();
 80007c2:	f000 fac5 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000078 	.word	0x20000078
 80007d0:	40015c24 	.word	0x40015c24

080007d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 80007da:	4a14      	ldr	r2, [pc, #80]	@ (800082c <MX_USART3_UART_Init+0x58>)
 80007dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 500000;
 80007de:	4b12      	ldr	r3, [pc, #72]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 80007e0:	4a13      	ldr	r2, [pc, #76]	@ (8000830 <MX_USART3_UART_Init+0x5c>)
 80007e2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 80007f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 80007f8:	2208      	movs	r2, #8
 80007fa:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000802:	4b09      	ldr	r3, [pc, #36]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 8000804:	2200      	movs	r2, #0
 8000806:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 800080a:	2200      	movs	r2, #0
 800080c:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800080e:	4b06      	ldr	r3, [pc, #24]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 8000810:	2200      	movs	r2, #0
 8000812:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	@ (8000828 <MX_USART3_UART_Init+0x54>)
 8000816:	f003 fc6b 	bl	80040f0 <HAL_UART_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8000820:	f000 fa96 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000015c 	.word	0x2000015c
 800082c:	40004800 	.word	0x40004800
 8000830:	0007a120 	.word	0x0007a120

08000834 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <MX_DMA_Init+0x60>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a15      	ldr	r2, [pc, #84]	@ (8000894 <MX_DMA_Init+0x60>)
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b13      	ldr	r3, [pc, #76]	@ (8000894 <MX_DMA_Init+0x60>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000852:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <MX_DMA_Init+0x60>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a0f      	ldr	r2, [pc, #60]	@ (8000894 <MX_DMA_Init+0x60>)
 8000858:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b0d      	ldr	r3, [pc, #52]	@ (8000894 <MX_DMA_Init+0x60>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800086a:	2200      	movs	r2, #0
 800086c:	2100      	movs	r1, #0
 800086e:	200e      	movs	r0, #14
 8000870:	f000 fe2d 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000874:	200e      	movs	r0, #14
 8000876:	f000 fe46 	bl	8001506 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800087a:	2200      	movs	r2, #0
 800087c:	2100      	movs	r1, #0
 800087e:	2039      	movs	r0, #57	@ 0x39
 8000880:	f000 fe25 	bl	80014ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000884:	2039      	movs	r0, #57	@ 0x39
 8000886:	f000 fe3e 	bl	8001506 <HAL_NVIC_EnableIRQ>

}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800

08000898 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b08c      	sub	sp, #48	@ 0x30
 800089c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ae:	4b7d      	ldr	r3, [pc, #500]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a7c      	ldr	r2, [pc, #496]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008b4:	f043 0304 	orr.w	r3, r3, #4
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b7a      	ldr	r3, [pc, #488]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0304 	and.w	r3, r3, #4
 80008c2:	61bb      	str	r3, [r7, #24]
 80008c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008c6:	4b77      	ldr	r3, [pc, #476]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	4a76      	ldr	r2, [pc, #472]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d2:	4b74      	ldr	r3, [pc, #464]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008da:	617b      	str	r3, [r7, #20]
 80008dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008de:	4b71      	ldr	r3, [pc, #452]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a70      	ldr	r2, [pc, #448]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b6e      	ldr	r3, [pc, #440]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f6:	4b6b      	ldr	r3, [pc, #428]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fa:	4a6a      	ldr	r2, [pc, #424]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	6313      	str	r3, [r2, #48]	@ 0x30
 8000902:	4b68      	ldr	r3, [pc, #416]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800090e:	4b65      	ldr	r3, [pc, #404]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000912:	4a64      	ldr	r2, [pc, #400]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 8000914:	f043 0310 	orr.w	r3, r3, #16
 8000918:	6313      	str	r3, [r2, #48]	@ 0x30
 800091a:	4b62      	ldr	r3, [pc, #392]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	f003 0310 	and.w	r3, r3, #16
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b5f      	ldr	r3, [pc, #380]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a5e      	ldr	r2, [pc, #376]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b5c      	ldr	r3, [pc, #368]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800093e:	4b59      	ldr	r3, [pc, #356]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000942:	4a58      	ldr	r2, [pc, #352]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 8000944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000948:	6313      	str	r3, [r2, #48]	@ 0x30
 800094a:	4b56      	ldr	r3, [pc, #344]	@ (8000aa4 <MX_GPIO_Init+0x20c>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800094e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f244 0181 	movw	r1, #16513	@ 0x4081
 800095c:	4852      	ldr	r0, [pc, #328]	@ (8000aa8 <MX_GPIO_Init+0x210>)
 800095e:	f001 fba3 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2140      	movs	r1, #64	@ 0x40
 8000966:	4851      	ldr	r0, [pc, #324]	@ (8000aac <MX_GPIO_Init+0x214>)
 8000968:	f001 fb9e 	bl	80020a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800096c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000972:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000976:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	484b      	ldr	r0, [pc, #300]	@ (8000ab0 <MX_GPIO_Init+0x218>)
 8000984:	f001 f9e4 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000988:	2332      	movs	r3, #50	@ 0x32
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098c:	2302      	movs	r3, #2
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000998:	230b      	movs	r3, #11
 800099a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4843      	ldr	r0, [pc, #268]	@ (8000ab0 <MX_GPIO_Init+0x218>)
 80009a4:	f001 f9d4 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009a8:	2386      	movs	r3, #134	@ 0x86
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b4:	2303      	movs	r3, #3
 80009b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009b8:	230b      	movs	r3, #11
 80009ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	483c      	ldr	r0, [pc, #240]	@ (8000ab4 <MX_GPIO_Init+0x21c>)
 80009c4:	f001 f9c4 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009c8:	f244 0381 	movw	r3, #16513	@ 0x4081
 80009cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ce:	2301      	movs	r3, #1
 80009d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d6:	2300      	movs	r3, #0
 80009d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	4619      	mov	r1, r3
 80009e0:	4831      	ldr	r0, [pc, #196]	@ (8000aa8 <MX_GPIO_Init+0x210>)
 80009e2:	f001 f9b5 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f8:	230b      	movs	r3, #11
 80009fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4829      	ldr	r0, [pc, #164]	@ (8000aa8 <MX_GPIO_Init+0x210>)
 8000a04:	f001 f9a4 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a08:	2340      	movs	r3, #64	@ 0x40
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0c:	2301      	movs	r3, #1
 8000a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4823      	ldr	r0, [pc, #140]	@ (8000aac <MX_GPIO_Init+0x214>)
 8000a20:	f001 f996 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a24:	2380      	movs	r3, #128	@ 0x80
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	481d      	ldr	r0, [pc, #116]	@ (8000aac <MX_GPIO_Init+0x214>)
 8000a38:	f001 f98a 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a3c:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a4e:	230a      	movs	r3, #10
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	4816      	ldr	r0, [pc, #88]	@ (8000ab4 <MX_GPIO_Init+0x21c>)
 8000a5a:	f001 f979 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	4810      	ldr	r0, [pc, #64]	@ (8000ab4 <MX_GPIO_Init+0x21c>)
 8000a74:	f001 f96c 	bl	8001d50 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a78:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a8e:	f107 031c 	add.w	r3, r7, #28
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_GPIO_Init+0x214>)
 8000a96:	f001 f95b 	bl	8001d50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3730      	adds	r7, #48	@ 0x30
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400
 8000aac:	40021800 	.word	0x40021800
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <convert_24bit_to_signed>:

/* USER CODE BEGIN 4 */

int32_t convert_24bit_to_signed(uint32_t raw)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    // Mask to 24 bits
    raw &= 0x00FFFFFF;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8000ac6:	607b      	str	r3, [r7, #4]

    // If the 23rd bit (sign bit) is set, sign-extend to 32-bit negative
    if (raw & 0x00800000)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d003      	beq.n	8000ada <convert_24bit_to_signed+0x22>
        raw |= 0xFF000000;  // Fill top 8 bits with 1s to keep it negative
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8000ad8:	607b      	str	r3, [r7, #4]

    return (int32_t)raw;
 8000ada:	687b      	ldr	r3, [r7, #4]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	370c      	adds	r7, #12
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr

08000ae8 <UART_Queue_IsFull>:

uint8_t UART_Queue_IsFull()
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
    return ((uart_queue_tail + 1) % UART_QUEUE_SIZE) == uart_queue_head;
 8000aec:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <UART_Queue_IsFull+0x34>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	3301      	adds	r3, #1
 8000af4:	425a      	negs	r2, r3
 8000af6:	f003 031f 	and.w	r3, r3, #31
 8000afa:	f002 021f 	and.w	r2, r2, #31
 8000afe:	bf58      	it	pl
 8000b00:	4253      	negpl	r3, r2
 8000b02:	4a07      	ldr	r2, [pc, #28]	@ (8000b20 <UART_Queue_IsFull+0x38>)
 8000b04:	7812      	ldrb	r2, [r2, #0]
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	bf0c      	ite	eq
 8000b0c:	2301      	moveq	r3, #1
 8000b0e:	2300      	movne	r3, #0
 8000b10:	b2db      	uxtb	r3, r3
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	20012285 	.word	0x20012285
 8000b20:	20012284 	.word	0x20012284

08000b24 <UART_Queue_IsEmpty>:

uint8_t UART_Queue_IsEmpty()
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
    return uart_queue_head == uart_queue_tail;
 8000b28:	4b07      	ldr	r3, [pc, #28]	@ (8000b48 <UART_Queue_IsEmpty+0x24>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	4b07      	ldr	r3, [pc, #28]	@ (8000b4c <UART_Queue_IsEmpty+0x28>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	429a      	cmp	r2, r3
 8000b36:	bf0c      	ite	eq
 8000b38:	2301      	moveq	r3, #1
 8000b3a:	2300      	movne	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	20012284 	.word	0x20012284
 8000b4c:	20012285 	.word	0x20012285

08000b50 <UART_Queue_Push>:

void UART_Queue_Push(uint8_t *data, uint16_t len)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	460b      	mov	r3, r1
 8000b5a:	807b      	strh	r3, [r7, #2]
    if (UART_Queue_IsFull()) {
 8000b5c:	f7ff ffc4 	bl	8000ae8 <UART_Queue_IsFull>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d132      	bne.n	8000bcc <UART_Queue_Push+0x7c>
        // Optional: track dropped packets
        return;
    }

    memcpy(uart_queue[uart_queue_tail].data, data, len);
 8000b66:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd4 <UART_Queue_Push+0x84>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	4613      	mov	r3, r2
 8000b70:	029b      	lsls	r3, r3, #10
 8000b72:	4413      	add	r3, r2
 8000b74:	005b      	lsls	r3, r3, #1
 8000b76:	4a18      	ldr	r2, [pc, #96]	@ (8000bd8 <UART_Queue_Push+0x88>)
 8000b78:	4413      	add	r3, r2
 8000b7a:	887a      	ldrh	r2, [r7, #2]
 8000b7c:	6879      	ldr	r1, [r7, #4]
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f004 fc7c 	bl	800547c <memcpy>
    uart_queue[uart_queue_tail].length = len;
 8000b84:	4b13      	ldr	r3, [pc, #76]	@ (8000bd4 <UART_Queue_Push+0x84>)
 8000b86:	781b      	ldrb	r3, [r3, #0]
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4a12      	ldr	r2, [pc, #72]	@ (8000bd8 <UART_Queue_Push+0x88>)
 8000b8e:	460b      	mov	r3, r1
 8000b90:	029b      	lsls	r3, r3, #10
 8000b92:	440b      	add	r3, r1
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	4413      	add	r3, r2
 8000b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8000b9c:	887a      	ldrh	r2, [r7, #2]
 8000b9e:	801a      	strh	r2, [r3, #0]
    uart_queue_tail = (uart_queue_tail + 1) % UART_QUEUE_SIZE;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd4 <UART_Queue_Push+0x84>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	425a      	negs	r2, r3
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	f002 021f 	and.w	r2, r2, #31
 8000bb2:	bf58      	it	pl
 8000bb4:	4253      	negpl	r3, r2
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <UART_Queue_Push+0x84>)
 8000bba:	701a      	strb	r2, [r3, #0]

    // If UART is idle, trigger transmission
    if (!uart_tx_active) {
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <UART_Queue_Push+0x8c>)
 8000bbe:	781b      	ldrb	r3, [r3, #0]
 8000bc0:	b2db      	uxtb	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d103      	bne.n	8000bce <UART_Queue_Push+0x7e>
        UART_Transmit_Next();
 8000bc6:	f000 f80b 	bl	8000be0 <UART_Transmit_Next>
 8000bca:	e000      	b.n	8000bce <UART_Queue_Push+0x7e>
        return;
 8000bcc:	bf00      	nop
    }
}
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20012285 	.word	0x20012285
 8000bd8:	20002244 	.word	0x20002244
 8000bdc:	20012286 	.word	0x20012286

08000be0 <UART_Transmit_Next>:

void UART_Transmit_Next()
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
    if (UART_Queue_IsEmpty()) {
 8000be6:	f7ff ff9d 	bl	8000b24 <UART_Queue_IsEmpty>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <UART_Transmit_Next+0x18>
        uart_tx_active = 0;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <UART_Transmit_Next+0x4c>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
        return;
 8000bf6:	e015      	b.n	8000c24 <UART_Transmit_Next+0x44>
    }

    uart_tx_active = 1;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8000c2c <UART_Transmit_Next+0x4c>)
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	701a      	strb	r2, [r3, #0]
    UART_Chunk *chunk = &uart_queue[uart_queue_head];
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <UART_Transmit_Next+0x50>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461a      	mov	r2, r3
 8000c06:	4613      	mov	r3, r2
 8000c08:	029b      	lsls	r3, r3, #10
 8000c0a:	4413      	add	r3, r2
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	4a09      	ldr	r2, [pc, #36]	@ (8000c34 <UART_Transmit_Next+0x54>)
 8000c10:	4413      	add	r3, r2
 8000c12:	607b      	str	r3, [r7, #4]
    HAL_UART_Transmit_DMA(&huart3, chunk->data, chunk->length);
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8b3 3800 	ldrh.w	r3, [r3, #2048]	@ 0x800
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4806      	ldr	r0, [pc, #24]	@ (8000c38 <UART_Transmit_Next+0x58>)
 8000c20:	f003 fab4 	bl	800418c <HAL_UART_Transmit_DMA>
}
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20012286 	.word	0x20012286
 8000c30:	20012284 	.word	0x20012284
 8000c34:	20002244 	.word	0x20002244
 8000c38:	2000015c 	.word	0x2000015c

08000c3c <Process_Audio_Chunk>:

void Process_Audio_Chunk(uint32_t *buffer, uint16_t len)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	460b      	mov	r3, r1
 8000c46:	807b      	strh	r3, [r7, #2]
    // Temporary staging buffer
    static uint8_t tx_buf[UART_CHUNK_SIZE];
    uint16_t pos = 0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	81fb      	strh	r3, [r7, #14]

    for (uint16_t i = 0; i < len; i++) {
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	81bb      	strh	r3, [r7, #12]
 8000c50:	e01c      	b.n	8000c8c <Process_Audio_Chunk+0x50>
        int32_t sample = convert_24bit_to_signed(buffer[i]);
 8000c52:	89bb      	ldrh	r3, [r7, #12]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	687a      	ldr	r2, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff ff2b 	bl	8000ab8 <convert_24bit_to_signed>
 8000c62:	60b8      	str	r0, [r7, #8]

        // Format: one sample per line
        pos += sprintf((char *)&tx_buf[pos], "%ld\n", sample);
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	4a11      	ldr	r2, [pc, #68]	@ (8000cac <Process_Audio_Chunk+0x70>)
 8000c68:	4413      	add	r3, r2
 8000c6a:	68ba      	ldr	r2, [r7, #8]
 8000c6c:	4910      	ldr	r1, [pc, #64]	@ (8000cb0 <Process_Audio_Chunk+0x74>)
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f004 fbae 	bl	80053d0 <siprintf>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	89fb      	ldrh	r3, [r7, #14]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	81fb      	strh	r3, [r7, #14]
        if (pos >= UART_CHUNK_SIZE - 16) break;
 8000c7e:	89fb      	ldrh	r3, [r7, #14]
 8000c80:	f5b3 6ffe 	cmp.w	r3, #2032	@ 0x7f0
 8000c84:	d207      	bcs.n	8000c96 <Process_Audio_Chunk+0x5a>
    for (uint16_t i = 0; i < len; i++) {
 8000c86:	89bb      	ldrh	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	81bb      	strh	r3, [r7, #12]
 8000c8c:	89ba      	ldrh	r2, [r7, #12]
 8000c8e:	887b      	ldrh	r3, [r7, #2]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d3de      	bcc.n	8000c52 <Process_Audio_Chunk+0x16>
 8000c94:	e000      	b.n	8000c98 <Process_Audio_Chunk+0x5c>
        if (pos >= UART_CHUNK_SIZE - 16) break;
 8000c96:	bf00      	nop
    }

    UART_Queue_Push(tx_buf, pos);
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4803      	ldr	r0, [pc, #12]	@ (8000cac <Process_Audio_Chunk+0x70>)
 8000c9e:	f7ff ff57 	bl	8000b50 <UART_Queue_Push>
}
 8000ca2:	bf00      	nop
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20012288 	.word	0x20012288
 8000cb0:	08005d28 	.word	0x08005d28

08000cb4 <HAL_SAI_RxHalfCpltCallback>:




void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
    if (hsai->Instance == SAI2_Block_B)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a05      	ldr	r2, [pc, #20]	@ (8000cd8 <HAL_SAI_RxHalfCpltCallback+0x24>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d104      	bne.n	8000cd0 <HAL_SAI_RxHalfCpltCallback+0x1c>
    {
        Process_Audio_Chunk(&sai_dma_buffer[0], AUDIO_BUFFER_SIZE / 2);
 8000cc6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cca:	4804      	ldr	r0, [pc, #16]	@ (8000cdc <HAL_SAI_RxHalfCpltCallback+0x28>)
 8000ccc:	f7ff ffb6 	bl	8000c3c <Process_Audio_Chunk>
    }
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40015c24 	.word	0x40015c24
 8000cdc:	20000244 	.word	0x20000244

08000ce0 <HAL_SAI_RxCpltCallback>:

void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
    if (hsai->Instance == SAI2_Block_B)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a05      	ldr	r2, [pc, #20]	@ (8000d04 <HAL_SAI_RxCpltCallback+0x24>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d104      	bne.n	8000cfc <HAL_SAI_RxCpltCallback+0x1c>
    {
        Process_Audio_Chunk(&sai_dma_buffer[AUDIO_BUFFER_SIZE / 2], AUDIO_BUFFER_SIZE / 2);
 8000cf2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000cf6:	4804      	ldr	r0, [pc, #16]	@ (8000d08 <HAL_SAI_RxCpltCallback+0x28>)
 8000cf8:	f7ff ffa0 	bl	8000c3c <Process_Audio_Chunk>
    }
}
 8000cfc:	bf00      	nop
 8000cfe:	3708      	adds	r7, #8
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40015c24 	.word	0x40015c24
 8000d08:	20001244 	.word	0x20001244

08000d0c <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a0b      	ldr	r2, [pc, #44]	@ (8000d48 <HAL_UART_TxCpltCallback+0x3c>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d10f      	bne.n	8000d3e <HAL_UART_TxCpltCallback+0x32>
    {
        // Move to next buffer in queue
        uart_queue_head = (uart_queue_head + 1) % UART_QUEUE_SIZE;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_UART_TxCpltCallback+0x40>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	3301      	adds	r3, #1
 8000d26:	425a      	negs	r2, r3
 8000d28:	f003 031f 	and.w	r3, r3, #31
 8000d2c:	f002 021f 	and.w	r2, r2, #31
 8000d30:	bf58      	it	pl
 8000d32:	4253      	negpl	r3, r2
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <HAL_UART_TxCpltCallback+0x40>)
 8000d38:	701a      	strb	r2, [r3, #0]
        UART_Transmit_Next();  // Trigger next transmission
 8000d3a:	f7ff ff51 	bl	8000be0 <UART_Transmit_Next>
    }
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40004800 	.word	0x40004800
 8000d4c:	20012284 	.word	0x20012284

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <Error_Handler+0x8>

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d66:	4a0e      	ldr	r2, [pc, #56]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d7e:	4a08      	ldr	r2, [pc, #32]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d86:	4b06      	ldr	r3, [pc, #24]	@ (8000da0 <HAL_MspInit+0x44>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800

08000da4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0ae      	sub	sp, #184	@ 0xb8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2290      	movs	r2, #144	@ 0x90
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f004 fb25 	bl	8005414 <memset>
  if(huart->Instance==USART3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a3d      	ldr	r2, [pc, #244]	@ (8000ec4 <HAL_UART_MspInit+0x120>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d172      	bne.n	8000eba <HAL_UART_MspInit+0x116>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000dd4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4618      	mov	r0, r3
 8000de4:	f001 fe9c 	bl	8002b20 <HAL_RCCEx_PeriphCLKConfig>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000dee:	f7ff ffaf 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000df2:	4b35      	ldr	r3, [pc, #212]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	4a34      	ldr	r2, [pc, #208]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000df8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000dfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dfe:	4b32      	ldr	r3, [pc, #200]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e06:	613b      	str	r3, [r7, #16]
 8000e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	4a2e      	ldr	r2, [pc, #184]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e16:	4b2c      	ldr	r3, [pc, #176]	@ (8000ec8 <HAL_UART_MspInit+0x124>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000e22:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e42:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000e46:	4619      	mov	r1, r3
 8000e48:	4820      	ldr	r0, [pc, #128]	@ (8000ecc <HAL_UART_MspInit+0x128>)
 8000e4a:	f000 ff81 	bl	8001d50 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000e4e:	4b20      	ldr	r3, [pc, #128]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e50:	4a20      	ldr	r2, [pc, #128]	@ (8000ed4 <HAL_UART_MspInit+0x130>)
 8000e52:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000e54:	4b1e      	ldr	r3, [pc, #120]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e56:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000e5a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e5e:	2240      	movs	r2, #64	@ 0x40
 8000e60:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e62:	4b1b      	ldr	r3, [pc, #108]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e68:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000e6e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e82:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e88:	4b11      	ldr	r3, [pc, #68]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000e8e:	4810      	ldr	r0, [pc, #64]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000e90:	f000 fb54 	bl	800153c <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8000e9a:	f7ff ff59 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a0b      	ldr	r2, [pc, #44]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000ea2:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_UART_MspInit+0x12c>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2027      	movs	r0, #39	@ 0x27
 8000eb0:	f000 fb0d 	bl	80014ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000eb4:	2027      	movs	r0, #39	@ 0x27
 8000eb6:	f000 fb26 	bl	8001506 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000eba:	bf00      	nop
 8000ebc:	37b8      	adds	r7, #184	@ 0xb8
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	40004800 	.word	0x40004800
 8000ec8:	40023800 	.word	0x40023800
 8000ecc:	40020c00 	.word	0x40020c00
 8000ed0:	200001e4 	.word	0x200001e4
 8000ed4:	40026058 	.word	0x40026058

08000ed8 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0ac      	sub	sp, #176	@ 0xb0
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ee0:	f107 030c 	add.w	r3, r7, #12
 8000ee4:	2290      	movs	r2, #144	@ 0x90
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f004 fa93 	bl	8005414 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a5c      	ldr	r2, [pc, #368]	@ (8001064 <HAL_SAI_MspInit+0x18c>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	f040 80b0 	bne.w	800105a <HAL_SAI_MspInit+0x182>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000efa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000efe:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 96;
 8000f00:	2360      	movs	r3, #96	@ 0x60
 8000f02:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 3;
 8000f08:	2303      	movs	r3, #3
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000f10:	2301      	movs	r3, #1
 8000f12:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4618      	mov	r0, r3
 8000f22:	f001 fdfd 	bl	8002b20 <HAL_RCCEx_PeriphCLKConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <HAL_SAI_MspInit+0x58>
    {
      Error_Handler();
 8000f2c:	f7ff ff10 	bl	8000d50 <Error_Handler>
    }

      if (SAI2_client == 0)
 8000f30:	4b4d      	ldr	r3, [pc, #308]	@ (8001068 <HAL_SAI_MspInit+0x190>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d113      	bne.n	8000f60 <HAL_SAI_MspInit+0x88>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f38:	4b4c      	ldr	r3, [pc, #304]	@ (800106c <HAL_SAI_MspInit+0x194>)
 8000f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f3c:	4a4b      	ldr	r2, [pc, #300]	@ (800106c <HAL_SAI_MspInit+0x194>)
 8000f3e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f42:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f44:	4b49      	ldr	r3, [pc, #292]	@ (800106c <HAL_SAI_MspInit+0x194>)
 8000f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f48:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	68bb      	ldr	r3, [r7, #8]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	205b      	movs	r0, #91	@ 0x5b
 8000f56:	f000 faba 	bl	80014ce <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000f5a:	205b      	movs	r0, #91	@ 0x5b
 8000f5c:	f000 fad3 	bl	8001506 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000f60:	4b41      	ldr	r3, [pc, #260]	@ (8001068 <HAL_SAI_MspInit+0x190>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	4a40      	ldr	r2, [pc, #256]	@ (8001068 <HAL_SAI_MspInit+0x190>)
 8000f68:	6013      	str	r3, [r2, #0]
    /**SAI2_B_Block_B GPIO Configuration
    PC0     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PE12     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8000f82:	2308      	movs	r3, #8
 8000f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4838      	ldr	r0, [pc, #224]	@ (8001070 <HAL_SAI_MspInit+0x198>)
 8000f90:	f000 fede 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f94:	2301      	movs	r3, #1
 8000f96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fac:	230a      	movs	r3, #10
 8000fae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	482e      	ldr	r0, [pc, #184]	@ (8001074 <HAL_SAI_MspInit+0x19c>)
 8000fba:	f000 fec9 	bl	8001d50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000fbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fc2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000fd8:	230a      	movs	r3, #10
 8000fda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fde:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4824      	ldr	r0, [pc, #144]	@ (8001078 <HAL_SAI_MspInit+0x1a0>)
 8000fe6:	f000 feb3 	bl	8001d50 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8000fea:	4b24      	ldr	r3, [pc, #144]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8000fec:	4a24      	ldr	r2, [pc, #144]	@ (8001080 <HAL_SAI_MspInit+0x1a8>)
 8000fee:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8000ff0:	4b22      	ldr	r3, [pc, #136]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8000ff2:	f04f 52a0 	mov.w	r2, #335544320	@ 0x14000000
 8000ff6:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ff8:	4b20      	ldr	r3, [pc, #128]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8001004:	4b1d      	ldr	r3, [pc, #116]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001006:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800100a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800100c:	4b1b      	ldr	r3, [pc, #108]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 800100e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001012:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001014:	4b19      	ldr	r3, [pc, #100]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001016:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800101a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 800101c:	4b17      	ldr	r3, [pc, #92]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 800101e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001022:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001024:	4b15      	ldr	r3, [pc, #84]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001026:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800102a:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 800102e:	2200      	movs	r2, #0
 8001030:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8001032:	4812      	ldr	r0, [pc, #72]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001034:	f000 fa82 	bl	800153c <HAL_DMA_Init>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_SAI_MspInit+0x16a>
    {
      Error_Handler();
 800103e:	f7ff fe87 	bl	8000d50 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a0d      	ldr	r2, [pc, #52]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001046:	671a      	str	r2, [r3, #112]	@ 0x70
 8001048:	4a0c      	ldr	r2, [pc, #48]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a0a      	ldr	r2, [pc, #40]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001052:	66da      	str	r2, [r3, #108]	@ 0x6c
 8001054:	4a09      	ldr	r2, [pc, #36]	@ (800107c <HAL_SAI_MspInit+0x1a4>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 800105a:	bf00      	nop
 800105c:	37b0      	adds	r7, #176	@ 0xb0
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40015c24 	.word	0x40015c24
 8001068:	20012a88 	.word	0x20012a88
 800106c:	40023800 	.word	0x40023800
 8001070:	40020800 	.word	0x40020800
 8001074:	40020000 	.word	0x40020000
 8001078:	40021000 	.word	0x40021000
 800107c:	200000fc 	.word	0x200000fc
 8001080:	40026428 	.word	0x40026428

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <NMI_Handler+0x4>

0800108c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <HardFault_Handler+0x4>

08001094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <MemManage_Handler+0x4>

0800109c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a0:	bf00      	nop
 80010a2:	e7fd      	b.n	80010a0 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	bf00      	nop
 80010aa:	e7fd      	b.n	80010a8 <UsageFault_Handler+0x4>

080010ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010da:	f000 f8d9 	bl	8001290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80010e8:	4802      	ldr	r0, [pc, #8]	@ (80010f4 <DMA1_Stream3_IRQHandler+0x10>)
 80010ea:	f000 fbc7 	bl	800187c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200001e4 	.word	0x200001e4

080010f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010fc:	4802      	ldr	r0, [pc, #8]	@ (8001108 <USART3_IRQHandler+0x10>)
 80010fe:	f003 f8c1 	bl	8004284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000015c 	.word	0x2000015c

0800110c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <DMA2_Stream1_IRQHandler+0x10>)
 8001112:	f000 fbb3 	bl	800187c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200000fc 	.word	0x200000fc

08001120 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <SAI2_IRQHandler+0x10>)
 8001126:	f002 fd1f 	bl	8003b68 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000078 	.word	0x20000078

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f004 f95e 	bl	8005424 <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20080000 	.word	0x20080000
 8001194:	00000400 	.word	0x00000400
 8001198:	20012a8c 	.word	0x20012a8c
 800119c:	20012be0 	.word	0x20012be0

080011a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <SystemInit+0x20>)
 80011a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011aa:	4a05      	ldr	r2, [pc, #20]	@ (80011c0 <SystemInit+0x20>)
 80011ac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011b0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011fc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011c8:	f7ff ffea 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	@ (8001200 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	@ (8001204 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001208 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	@ (800120c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001210 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80011f2:	f004 f91d 	bl	8005430 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f6:	f7ff fa09 	bl	800060c <main>
  bx  lr    
 80011fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001208:	08005d94 	.word	0x08005d94
  ldr r2, =_sbss
 800120c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001210:	20012bdc 	.word	0x20012bdc

08001214 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC_IRQHandler>

08001216 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800121a:	2003      	movs	r0, #3
 800121c:	f000 f94c 	bl	80014b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001220:	2000      	movs	r0, #0
 8001222:	f000 f805 	bl	8001230 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001226:	f7ff fd99 	bl	8000d5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <HAL_InitTick+0x54>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b12      	ldr	r3, [pc, #72]	@ (8001288 <HAL_InitTick+0x58>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	4619      	mov	r1, r3
 8001242:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001246:	fbb3 f3f1 	udiv	r3, r3, r1
 800124a:	fbb2 f3f3 	udiv	r3, r2, r3
 800124e:	4618      	mov	r0, r3
 8001250:	f000 f967 	bl	8001522 <HAL_SYSTICK_Config>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00e      	b.n	800127c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d80a      	bhi.n	800127a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f92f 	bl	80014ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001270:	4a06      	ldr	r2, [pc, #24]	@ (800128c <HAL_InitTick+0x5c>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
 8001278:	e000      	b.n	800127c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800127a:	2301      	movs	r3, #1
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
 800128c:	20000004 	.word	0x20000004

08001290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_IncTick+0x20>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	461a      	mov	r2, r3
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <HAL_IncTick+0x24>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4413      	add	r3, r2
 80012a0:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <HAL_IncTick+0x24>)
 80012a2:	6013      	str	r3, [r2, #0]
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000008 	.word	0x20000008
 80012b4:	20012a90 	.word	0x20012a90

080012b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return uwTick;
 80012bc:	4b03      	ldr	r3, [pc, #12]	@ (80012cc <HAL_GetTick+0x14>)
 80012be:	681b      	ldr	r3, [r3, #0]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	20012a90 	.word	0x20012a90

080012d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d8:	f7ff ffee 	bl	80012b8 <HAL_GetTick>
 80012dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e8:	d005      	beq.n	80012f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_Delay+0x44>)
 80012ec:	781b      	ldrb	r3, [r3, #0]
 80012ee:	461a      	mov	r2, r3
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	4413      	add	r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f6:	bf00      	nop
 80012f8:	f7ff ffde 	bl	80012b8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d8f7      	bhi.n	80012f8 <HAL_Delay+0x28>
  {
  }
}
 8001308:	bf00      	nop
 800130a:	bf00      	nop
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000008 	.word	0x20000008

08001318 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800132e:	68ba      	ldr	r2, [r7, #8]
 8001330:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001334:	4013      	ands	r3, r2
 8001336:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001340:	4b06      	ldr	r3, [pc, #24]	@ (800135c <__NVIC_SetPriorityGrouping+0x44>)
 8001342:	4313      	orrs	r3, r2
 8001344:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001346:	4a04      	ldr	r2, [pc, #16]	@ (8001358 <__NVIC_SetPriorityGrouping+0x40>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	60d3      	str	r3, [r2, #12]
}
 800134c:	bf00      	nop
 800134e:	3714      	adds	r7, #20
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00
 800135c:	05fa0000 	.word	0x05fa0000

08001360 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001364:	4b04      	ldr	r3, [pc, #16]	@ (8001378 <__NVIC_GetPriorityGrouping+0x18>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	0a1b      	lsrs	r3, r3, #8
 800136a:	f003 0307 	and.w	r3, r3, #7
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	4603      	mov	r3, r0
 8001384:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138a:	2b00      	cmp	r3, #0
 800138c:	db0b      	blt.n	80013a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	f003 021f 	and.w	r2, r3, #31
 8001394:	4907      	ldr	r1, [pc, #28]	@ (80013b4 <__NVIC_EnableIRQ+0x38>)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	095b      	lsrs	r3, r3, #5
 800139c:	2001      	movs	r0, #1
 800139e:	fa00 f202 	lsl.w	r2, r0, r2
 80013a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000e100 	.word	0xe000e100

080013b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	db0a      	blt.n	80013e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	490c      	ldr	r1, [pc, #48]	@ (8001404 <__NVIC_SetPriority+0x4c>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	0112      	lsls	r2, r2, #4
 80013d8:	b2d2      	uxtb	r2, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013e0:	e00a      	b.n	80013f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	4908      	ldr	r1, [pc, #32]	@ (8001408 <__NVIC_SetPriority+0x50>)
 80013e8:	79fb      	ldrb	r3, [r7, #7]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	3b04      	subs	r3, #4
 80013f0:	0112      	lsls	r2, r2, #4
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	440b      	add	r3, r1
 80013f6:	761a      	strb	r2, [r3, #24]
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	e000e100 	.word	0xe000e100
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800140c:	b480      	push	{r7}
 800140e:	b089      	sub	sp, #36	@ 0x24
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f003 0307 	and.w	r3, r3, #7
 800141e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	f1c3 0307 	rsb	r3, r3, #7
 8001426:	2b04      	cmp	r3, #4
 8001428:	bf28      	it	cs
 800142a:	2304      	movcs	r3, #4
 800142c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3304      	adds	r3, #4
 8001432:	2b06      	cmp	r3, #6
 8001434:	d902      	bls.n	800143c <NVIC_EncodePriority+0x30>
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	3b03      	subs	r3, #3
 800143a:	e000      	b.n	800143e <NVIC_EncodePriority+0x32>
 800143c:	2300      	movs	r3, #0
 800143e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001440:	f04f 32ff 	mov.w	r2, #4294967295
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43da      	mvns	r2, r3
 800144c:	68bb      	ldr	r3, [r7, #8]
 800144e:	401a      	ands	r2, r3
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001454:	f04f 31ff 	mov.w	r1, #4294967295
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa01 f303 	lsl.w	r3, r1, r3
 800145e:	43d9      	mvns	r1, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001464:	4313      	orrs	r3, r2
         );
}
 8001466:	4618      	mov	r0, r3
 8001468:	3724      	adds	r7, #36	@ 0x24
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
	...

08001474 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	3b01      	subs	r3, #1
 8001480:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001484:	d301      	bcc.n	800148a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001486:	2301      	movs	r3, #1
 8001488:	e00f      	b.n	80014aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800148a:	4a0a      	ldr	r2, [pc, #40]	@ (80014b4 <SysTick_Config+0x40>)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3b01      	subs	r3, #1
 8001490:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001492:	210f      	movs	r1, #15
 8001494:	f04f 30ff 	mov.w	r0, #4294967295
 8001498:	f7ff ff8e 	bl	80013b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <SysTick_Config+0x40>)
 800149e:	2200      	movs	r2, #0
 80014a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014a2:	4b04      	ldr	r3, [pc, #16]	@ (80014b4 <SysTick_Config+0x40>)
 80014a4:	2207      	movs	r2, #7
 80014a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	e000e010 	.word	0xe000e010

080014b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b082      	sub	sp, #8
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f7ff ff29 	bl	8001318 <__NVIC_SetPriorityGrouping>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b086      	sub	sp, #24
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	4603      	mov	r3, r0
 80014d6:	60b9      	str	r1, [r7, #8]
 80014d8:	607a      	str	r2, [r7, #4]
 80014da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014e0:	f7ff ff3e 	bl	8001360 <__NVIC_GetPriorityGrouping>
 80014e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	68b9      	ldr	r1, [r7, #8]
 80014ea:	6978      	ldr	r0, [r7, #20]
 80014ec:	f7ff ff8e 	bl	800140c <NVIC_EncodePriority>
 80014f0:	4602      	mov	r2, r0
 80014f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff5d 	bl	80013b8 <__NVIC_SetPriority>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	4603      	mov	r3, r0
 800150e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001510:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff31 	bl	800137c <__NVIC_EnableIRQ>
}
 800151a:	bf00      	nop
 800151c:	3708      	adds	r7, #8
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ffa2 	bl	8001474 <SysTick_Config>
 8001530:	4603      	mov	r3, r0
}
 8001532:	4618      	mov	r0, r3
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b086      	sub	sp, #24
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001548:	f7ff feb6 	bl	80012b8 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d101      	bne.n	8001558 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001554:	2301      	movs	r3, #1
 8001556:	e099      	b.n	800168c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2200      	movs	r2, #0
 8001564:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001578:	e00f      	b.n	800159a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800157a:	f7ff fe9d 	bl	80012b8 <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	2b05      	cmp	r3, #5
 8001586:	d908      	bls.n	800159a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2220      	movs	r2, #32
 800158c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2203      	movs	r2, #3
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e078      	b.n	800168c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e8      	bne.n	800157a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	4b38      	ldr	r3, [pc, #224]	@ (8001694 <HAL_DMA_Init+0x158>)
 80015b4:	4013      	ands	r3, r2
 80015b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a1b      	ldr	r3, [r3, #32]
 80015e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d107      	bne.n	8001604 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fc:	4313      	orrs	r3, r2
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	4313      	orrs	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	697a      	ldr	r2, [r7, #20]
 800160a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	695b      	ldr	r3, [r3, #20]
 8001612:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	f023 0307 	bic.w	r3, r3, #7
 800161a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	4313      	orrs	r3, r2
 8001624:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	2b04      	cmp	r3, #4
 800162c:	d117      	bne.n	800165e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	4313      	orrs	r3, r2
 8001636:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800163c:	2b00      	cmp	r3, #0
 800163e:	d00e      	beq.n	800165e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f000 fb09 	bl	8001c58 <DMA_CheckFifoParam>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2240      	movs	r2, #64	@ 0x40
 8001650:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800165a:	2301      	movs	r3, #1
 800165c:	e016      	b.n	800168c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f000 fac0 	bl	8001bec <DMA_CalcBaseAndBitshift>
 800166c:	4603      	mov	r3, r0
 800166e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001674:	223f      	movs	r2, #63	@ 0x3f
 8001676:	409a      	lsls	r2, r3
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800168a:	2300      	movs	r3, #0
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	e010803f 	.word	0xe010803f

08001698 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b086      	sub	sp, #24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
 80016a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016a6:	2300      	movs	r3, #0
 80016a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_DMA_Start_IT+0x26>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e048      	b.n	8001750 <HAL_DMA_Start_IT+0xb8>
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	2201      	movs	r2, #1
 80016c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d137      	bne.n	8001742 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2202      	movs	r2, #2
 80016d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2200      	movs	r2, #0
 80016de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	68f8      	ldr	r0, [r7, #12]
 80016e8:	f000 fa52 	bl	8001b90 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016f0:	223f      	movs	r2, #63	@ 0x3f
 80016f2:	409a      	lsls	r2, r3
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f042 0216 	orr.w	r2, r2, #22
 8001706:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	695a      	ldr	r2, [r3, #20]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001716:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0208 	orr.w	r2, r2, #8
 800172e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 0201 	orr.w	r2, r2, #1
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	e005      	b.n	800174e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800174a:	2302      	movs	r3, #2
 800174c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800174e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001764:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001766:	f7ff fda7 	bl	80012b8 <HAL_GetTick>
 800176a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001772:	b2db      	uxtb	r3, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d008      	beq.n	800178a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2280      	movs	r2, #128	@ 0x80
 800177c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2200      	movs	r2, #0
 8001782:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e052      	b.n	8001830 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f022 0216 	bic.w	r2, r2, #22
 8001798:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d103      	bne.n	80017ba <HAL_DMA_Abort+0x62>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0208 	bic.w	r2, r2, #8
 80017c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f022 0201 	bic.w	r2, r2, #1
 80017d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017da:	e013      	b.n	8001804 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017dc:	f7ff fd6c 	bl	80012b8 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b05      	cmp	r3, #5
 80017e8:	d90c      	bls.n	8001804 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2220      	movs	r2, #32
 80017ee:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e015      	b.n	8001830 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1e4      	bne.n	80017dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001816:	223f      	movs	r2, #63	@ 0x3f
 8001818:	409a      	lsls	r2, r3
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2201      	movs	r2, #1
 8001822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}

08001838 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d004      	beq.n	8001856 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2280      	movs	r2, #128	@ 0x80
 8001850:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e00c      	b.n	8001870 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2205      	movs	r2, #5
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f022 0201 	bic.w	r2, r2, #1
 800186c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001888:	4b8e      	ldr	r3, [pc, #568]	@ (8001ac4 <HAL_DMA_IRQHandler+0x248>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a8e      	ldr	r2, [pc, #568]	@ (8001ac8 <HAL_DMA_IRQHandler+0x24c>)
 800188e:	fba2 2303 	umull	r2, r3, r2, r3
 8001892:	0a9b      	lsrs	r3, r3, #10
 8001894:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800189a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018a6:	2208      	movs	r2, #8
 80018a8:	409a      	lsls	r2, r3
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4013      	ands	r3, r2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d01a      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d013      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0204 	bic.w	r2, r2, #4
 80018ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d4:	2208      	movs	r2, #8
 80018d6:	409a      	lsls	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e0:	f043 0201 	orr.w	r2, r3, #1
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018ec:	2201      	movs	r2, #1
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d012      	beq.n	800191e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00b      	beq.n	800191e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800190a:	2201      	movs	r2, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001916:	f043 0202 	orr.w	r2, r3, #2
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001922:	2204      	movs	r2, #4
 8001924:	409a      	lsls	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4013      	ands	r3, r2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d012      	beq.n	8001954 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d00b      	beq.n	8001954 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001940:	2204      	movs	r2, #4
 8001942:	409a      	lsls	r2, r3
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800194c:	f043 0204 	orr.w	r2, r3, #4
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001958:	2210      	movs	r2, #16
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4013      	ands	r3, r2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d043      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d03c      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001976:	2210      	movs	r2, #16
 8001978:	409a      	lsls	r2, r3
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d018      	beq.n	80019be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d108      	bne.n	80019ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d024      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	4798      	blx	r3
 80019aa:	e01f      	b.n	80019ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01b      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	e016      	b.n	80019ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d107      	bne.n	80019dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0208 	bic.w	r2, r2, #8
 80019da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f0:	2220      	movs	r2, #32
 80019f2:	409a      	lsls	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4013      	ands	r3, r2
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 808f 	beq.w	8001b1c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0310 	and.w	r3, r3, #16
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f000 8087 	beq.w	8001b1c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a12:	2220      	movs	r2, #32
 8001a14:	409a      	lsls	r2, r3
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b05      	cmp	r3, #5
 8001a24:	d136      	bne.n	8001a94 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f022 0216 	bic.w	r2, r2, #22
 8001a34:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a44:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d103      	bne.n	8001a56 <HAL_DMA_IRQHandler+0x1da>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d007      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0208 	bic.w	r2, r2, #8
 8001a64:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6a:	223f      	movs	r2, #63	@ 0x3f
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2201      	movs	r2, #1
 8001a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d07e      	beq.n	8001b88 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	4798      	blx	r3
        }
        return;
 8001a92:	e079      	b.n	8001b88 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d01d      	beq.n	8001ade <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d10d      	bne.n	8001acc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d031      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	4798      	blx	r3
 8001ac0:	e02c      	b.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
 8001ac2:	bf00      	nop
 8001ac4:	20000000 	.word	0x20000000
 8001ac8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d023      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
 8001adc:	e01e      	b.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d10f      	bne.n	8001b0c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0210 	bic.w	r2, r2, #16
 8001afa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d003      	beq.n	8001b1c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d032      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d022      	beq.n	8001b76 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2205      	movs	r2, #5
 8001b34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f022 0201 	bic.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d307      	bcc.n	8001b64 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d1f2      	bne.n	8001b48 <HAL_DMA_IRQHandler+0x2cc>
 8001b62:	e000      	b.n	8001b66 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001b64:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d005      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
 8001b86:	e000      	b.n	8001b8a <HAL_DMA_IRQHandler+0x30e>
        return;
 8001b88:	bf00      	nop
    }
  }
}
 8001b8a:	3718      	adds	r7, #24
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
 8001b9c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001bac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b40      	cmp	r3, #64	@ 0x40
 8001bbc:	d108      	bne.n	8001bd0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001bce:	e007      	b.n	8001be0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68ba      	ldr	r2, [r7, #8]
 8001bd6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	60da      	str	r2, [r3, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr

08001bec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b2db      	uxtb	r3, r3
 8001bfa:	3b10      	subs	r3, #16
 8001bfc:	4a13      	ldr	r2, [pc, #76]	@ (8001c4c <DMA_CalcBaseAndBitshift+0x60>)
 8001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8001c02:	091b      	lsrs	r3, r3, #4
 8001c04:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <DMA_CalcBaseAndBitshift+0x64>)
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	461a      	mov	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d908      	bls.n	8001c2c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4b0c      	ldr	r3, [pc, #48]	@ (8001c54 <DMA_CalcBaseAndBitshift+0x68>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	1d1a      	adds	r2, r3, #4
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	659a      	str	r2, [r3, #88]	@ 0x58
 8001c2a:	e006      	b.n	8001c3a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	461a      	mov	r2, r3
 8001c32:	4b08      	ldr	r3, [pc, #32]	@ (8001c54 <DMA_CalcBaseAndBitshift+0x68>)
 8001c34:	4013      	ands	r3, r2
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3714      	adds	r7, #20
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	aaaaaaab 	.word	0xaaaaaaab
 8001c50:	08005d48 	.word	0x08005d48
 8001c54:	fffffc00 	.word	0xfffffc00

08001c58 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c60:	2300      	movs	r3, #0
 8001c62:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c68:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d11f      	bne.n	8001cb2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d856      	bhi.n	8001d26 <DMA_CheckFifoParam+0xce>
 8001c78:	a201      	add	r2, pc, #4	@ (adr r2, 8001c80 <DMA_CheckFifoParam+0x28>)
 8001c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c7e:	bf00      	nop
 8001c80:	08001c91 	.word	0x08001c91
 8001c84:	08001ca3 	.word	0x08001ca3
 8001c88:	08001c91 	.word	0x08001c91
 8001c8c:	08001d27 	.word	0x08001d27
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d046      	beq.n	8001d2a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ca0:	e043      	b.n	8001d2a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001caa:	d140      	bne.n	8001d2e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cb0:	e03d      	b.n	8001d2e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cba:	d121      	bne.n	8001d00 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d837      	bhi.n	8001d32 <DMA_CheckFifoParam+0xda>
 8001cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cc8 <DMA_CheckFifoParam+0x70>)
 8001cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc8:	08001cd9 	.word	0x08001cd9
 8001ccc:	08001cdf 	.word	0x08001cdf
 8001cd0:	08001cd9 	.word	0x08001cd9
 8001cd4:	08001cf1 	.word	0x08001cf1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	73fb      	strb	r3, [r7, #15]
      break;
 8001cdc:	e030      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d025      	beq.n	8001d36 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cee:	e022      	b.n	8001d36 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001cf8:	d11f      	bne.n	8001d3a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001cfe:	e01c      	b.n	8001d3a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d903      	bls.n	8001d0e <DMA_CheckFifoParam+0xb6>
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d003      	beq.n	8001d14 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d0c:	e018      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
      break;
 8001d12:	e015      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00e      	beq.n	8001d3e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	73fb      	strb	r3, [r7, #15]
      break;
 8001d24:	e00b      	b.n	8001d3e <DMA_CheckFifoParam+0xe6>
      break;
 8001d26:	bf00      	nop
 8001d28:	e00a      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2a:	bf00      	nop
 8001d2c:	e008      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d2e:	bf00      	nop
 8001d30:	e006      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d32:	bf00      	nop
 8001d34:	e004      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d36:	bf00      	nop
 8001d38:	e002      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d3a:	bf00      	nop
 8001d3c:	e000      	b.n	8001d40 <DMA_CheckFifoParam+0xe8>
      break;
 8001d3e:	bf00      	nop
    }
  } 
  
  return status; 
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop

08001d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	@ 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001d62:	2300      	movs	r3, #0
 8001d64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	61fb      	str	r3, [r7, #28]
 8001d6e:	e175      	b.n	800205c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001d70:	2201      	movs	r2, #1
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	697a      	ldr	r2, [r7, #20]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	f040 8164 	bne.w	8002056 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d005      	beq.n	8001da6 <HAL_GPIO_Init+0x56>
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d130      	bne.n	8001e08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	2203      	movs	r2, #3
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ddc:	2201      	movs	r2, #1
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	091b      	lsrs	r3, r3, #4
 8001df2:	f003 0201 	and.w	r2, r3, #1
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d017      	beq.n	8001e44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689a      	ldr	r2, [r3, #8]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f003 0303 	and.w	r3, r3, #3
 8001e4c:	2b02      	cmp	r3, #2
 8001e4e:	d123      	bne.n	8001e98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	08da      	lsrs	r2, r3, #3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	3208      	adds	r2, #8
 8001e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f003 0307 	and.w	r3, r3, #7
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	220f      	movs	r2, #15
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691a      	ldr	r2, [r3, #16]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	08da      	lsrs	r2, r3, #3
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3208      	adds	r2, #8
 8001e92:	69b9      	ldr	r1, [r7, #24]
 8001e94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f003 0203 	and.w	r2, r3, #3
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80be 	beq.w	8002056 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eda:	4b66      	ldr	r3, [pc, #408]	@ (8002074 <HAL_GPIO_Init+0x324>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	4a65      	ldr	r2, [pc, #404]	@ (8002074 <HAL_GPIO_Init+0x324>)
 8001ee0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ee4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee6:	4b63      	ldr	r3, [pc, #396]	@ (8002074 <HAL_GPIO_Init+0x324>)
 8001ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001ef2:	4a61      	ldr	r2, [pc, #388]	@ (8002078 <HAL_GPIO_Init+0x328>)
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0303 	and.w	r3, r3, #3
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	220f      	movs	r2, #15
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a58      	ldr	r2, [pc, #352]	@ (800207c <HAL_GPIO_Init+0x32c>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d037      	beq.n	8001f8e <HAL_GPIO_Init+0x23e>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a57      	ldr	r2, [pc, #348]	@ (8002080 <HAL_GPIO_Init+0x330>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d031      	beq.n	8001f8a <HAL_GPIO_Init+0x23a>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a56      	ldr	r2, [pc, #344]	@ (8002084 <HAL_GPIO_Init+0x334>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d02b      	beq.n	8001f86 <HAL_GPIO_Init+0x236>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a55      	ldr	r2, [pc, #340]	@ (8002088 <HAL_GPIO_Init+0x338>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d025      	beq.n	8001f82 <HAL_GPIO_Init+0x232>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a54      	ldr	r2, [pc, #336]	@ (800208c <HAL_GPIO_Init+0x33c>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01f      	beq.n	8001f7e <HAL_GPIO_Init+0x22e>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a53      	ldr	r2, [pc, #332]	@ (8002090 <HAL_GPIO_Init+0x340>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0x22a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a52      	ldr	r2, [pc, #328]	@ (8002094 <HAL_GPIO_Init+0x344>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d013      	beq.n	8001f76 <HAL_GPIO_Init+0x226>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a51      	ldr	r2, [pc, #324]	@ (8002098 <HAL_GPIO_Init+0x348>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00d      	beq.n	8001f72 <HAL_GPIO_Init+0x222>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a50      	ldr	r2, [pc, #320]	@ (800209c <HAL_GPIO_Init+0x34c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <HAL_GPIO_Init+0x21e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4f      	ldr	r2, [pc, #316]	@ (80020a0 <HAL_GPIO_Init+0x350>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d101      	bne.n	8001f6a <HAL_GPIO_Init+0x21a>
 8001f66:	2309      	movs	r3, #9
 8001f68:	e012      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f6a:	230a      	movs	r3, #10
 8001f6c:	e010      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f6e:	2308      	movs	r3, #8
 8001f70:	e00e      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e00c      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f76:	2306      	movs	r3, #6
 8001f78:	e00a      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f7a:	2305      	movs	r3, #5
 8001f7c:	e008      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f7e:	2304      	movs	r3, #4
 8001f80:	e006      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f82:	2303      	movs	r3, #3
 8001f84:	e004      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f86:	2302      	movs	r3, #2
 8001f88:	e002      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e000      	b.n	8001f90 <HAL_GPIO_Init+0x240>
 8001f8e:	2300      	movs	r3, #0
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f002 0203 	and.w	r2, r2, #3
 8001f96:	0092      	lsls	r2, r2, #2
 8001f98:	4093      	lsls	r3, r2
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001fa0:	4935      	ldr	r1, [pc, #212]	@ (8002078 <HAL_GPIO_Init+0x328>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fae:	4b3d      	ldr	r3, [pc, #244]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fd2:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd8:	4b32      	ldr	r3, [pc, #200]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	43db      	mvns	r3, r3
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ffc:	4a29      	ldr	r2, [pc, #164]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002002:	4b28      	ldr	r3, [pc, #160]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	43db      	mvns	r3, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4013      	ands	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d003      	beq.n	8002026 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	4313      	orrs	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002026:	4a1f      	ldr	r2, [pc, #124]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800202c:	4b1d      	ldr	r3, [pc, #116]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002050:	4a14      	ldr	r2, [pc, #80]	@ (80020a4 <HAL_GPIO_Init+0x354>)
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	3301      	adds	r3, #1
 800205a:	61fb      	str	r3, [r7, #28]
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	2b0f      	cmp	r3, #15
 8002060:	f67f ae86 	bls.w	8001d70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002064:	bf00      	nop
 8002066:	bf00      	nop
 8002068:	3724      	adds	r7, #36	@ 0x24
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40023800 	.word	0x40023800
 8002078:	40013800 	.word	0x40013800
 800207c:	40020000 	.word	0x40020000
 8002080:	40020400 	.word	0x40020400
 8002084:	40020800 	.word	0x40020800
 8002088:	40020c00 	.word	0x40020c00
 800208c:	40021000 	.word	0x40021000
 8002090:	40021400 	.word	0x40021400
 8002094:	40021800 	.word	0x40021800
 8002098:	40021c00 	.word	0x40021c00
 800209c:	40022000 	.word	0x40022000
 80020a0:	40022400 	.word	0x40022400
 80020a4:	40013c00 	.word	0x40013c00

080020a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	807b      	strh	r3, [r7, #2]
 80020b4:	4613      	mov	r3, r2
 80020b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020b8:	787b      	ldrb	r3, [r7, #1]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020be:	887a      	ldrh	r2, [r7, #2]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80020c4:	e003      	b.n	80020ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80020c6:	887b      	ldrh	r3, [r7, #2]
 80020c8:	041a      	lsls	r2, r3, #16
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	619a      	str	r2, [r3, #24]
}
 80020ce:	bf00      	nop
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
	...

080020dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	4b23      	ldr	r3, [pc, #140]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x98>)
 80020e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ea:	4a22      	ldr	r2, [pc, #136]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x98>)
 80020ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80020f2:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <HAL_PWREx_EnableOverDrive+0x98>)
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020fa:	603b      	str	r3, [r7, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80020fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002178 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a1d      	ldr	r2, [pc, #116]	@ (8002178 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002104:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002108:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800210a:	f7ff f8d5 	bl	80012b8 <HAL_GetTick>
 800210e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002110:	e009      	b.n	8002126 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002112:	f7ff f8d1 	bl	80012b8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002120:	d901      	bls.n	8002126 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e022      	b.n	800216c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002126:	4b14      	ldr	r3, [pc, #80]	@ (8002178 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002132:	d1ee      	bne.n	8002112 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002134:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a0f      	ldr	r2, [pc, #60]	@ (8002178 <HAL_PWREx_EnableOverDrive+0x9c>)
 800213a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800213e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002140:	f7ff f8ba 	bl	80012b8 <HAL_GetTick>
 8002144:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002146:	e009      	b.n	800215c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002148:	f7ff f8b6 	bl	80012b8 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002156:	d901      	bls.n	800215c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002158:	2303      	movs	r3, #3
 800215a:	e007      	b.n	800216c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800215c:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_PWREx_EnableOverDrive+0x9c>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002164:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002168:	d1ee      	bne.n	8002148 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40023800 	.word	0x40023800
 8002178:	40007000 	.word	0x40007000

0800217c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e29b      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	f000 8087 	beq.w	80022ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021a0:	4b96      	ldr	r3, [pc, #600]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d00c      	beq.n	80021c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ac:	4b93      	ldr	r3, [pc, #588]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f003 030c 	and.w	r3, r3, #12
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d112      	bne.n	80021de <HAL_RCC_OscConfig+0x62>
 80021b8:	4b90      	ldr	r3, [pc, #576]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021c4:	d10b      	bne.n	80021de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c6:	4b8d      	ldr	r3, [pc, #564]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d06c      	beq.n	80022ac <HAL_RCC_OscConfig+0x130>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d168      	bne.n	80022ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e275      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021e6:	d106      	bne.n	80021f6 <HAL_RCC_OscConfig+0x7a>
 80021e8:	4b84      	ldr	r3, [pc, #528]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a83      	ldr	r2, [pc, #524]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80021ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	e02e      	b.n	8002254 <HAL_RCC_OscConfig+0xd8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d10c      	bne.n	8002218 <HAL_RCC_OscConfig+0x9c>
 80021fe:	4b7f      	ldr	r3, [pc, #508]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7e      	ldr	r2, [pc, #504]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	4b7c      	ldr	r3, [pc, #496]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a7b      	ldr	r2, [pc, #492]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002210:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002214:	6013      	str	r3, [r2, #0]
 8002216:	e01d      	b.n	8002254 <HAL_RCC_OscConfig+0xd8>
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002220:	d10c      	bne.n	800223c <HAL_RCC_OscConfig+0xc0>
 8002222:	4b76      	ldr	r3, [pc, #472]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a75      	ldr	r2, [pc, #468]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002228:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	4b73      	ldr	r3, [pc, #460]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a72      	ldr	r2, [pc, #456]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002234:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002238:	6013      	str	r3, [r2, #0]
 800223a:	e00b      	b.n	8002254 <HAL_RCC_OscConfig+0xd8>
 800223c:	4b6f      	ldr	r3, [pc, #444]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6e      	ldr	r2, [pc, #440]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002242:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	4b6c      	ldr	r3, [pc, #432]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a6b      	ldr	r2, [pc, #428]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 800224e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002252:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d013      	beq.n	8002284 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225c:	f7ff f82c 	bl	80012b8 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002264:	f7ff f828 	bl	80012b8 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e229      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002276:	4b61      	ldr	r3, [pc, #388]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d0f0      	beq.n	8002264 <HAL_RCC_OscConfig+0xe8>
 8002282:	e014      	b.n	80022ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7ff f818 	bl	80012b8 <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800228c:	f7ff f814 	bl	80012b8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	@ 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e215      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800229e:	4b57      	ldr	r3, [pc, #348]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x110>
 80022aa:	e000      	b.n	80022ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d069      	beq.n	800238e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ba:	4b50      	ldr	r3, [pc, #320]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00b      	beq.n	80022de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022c6:	4b4d      	ldr	r3, [pc, #308]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d11c      	bne.n	800230c <HAL_RCC_OscConfig+0x190>
 80022d2:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d116      	bne.n	800230c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d005      	beq.n	80022f6 <HAL_RCC_OscConfig+0x17a>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d001      	beq.n	80022f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e1e9      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022f6:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	493d      	ldr	r1, [pc, #244]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002306:	4313      	orrs	r3, r2
 8002308:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800230a:	e040      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d023      	beq.n	800235c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002314:	4b39      	ldr	r3, [pc, #228]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a38      	ldr	r2, [pc, #224]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe ffca 	bl	80012b8 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002328:	f7fe ffc6 	bl	80012b8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e1c7      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800233a:	4b30      	ldr	r3, [pc, #192]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0302 	and.w	r3, r3, #2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002346:	4b2d      	ldr	r3, [pc, #180]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4929      	ldr	r1, [pc, #164]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002356:	4313      	orrs	r3, r2
 8002358:	600b      	str	r3, [r1, #0]
 800235a:	e018      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800235c:	4b27      	ldr	r3, [pc, #156]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a26      	ldr	r2, [pc, #152]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002362:	f023 0301 	bic.w	r3, r3, #1
 8002366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe ffa6 	bl	80012b8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002370:	f7fe ffa2 	bl	80012b8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1a3      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	4b1e      	ldr	r3, [pc, #120]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d038      	beq.n	800240c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d019      	beq.n	80023d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	4b16      	ldr	r3, [pc, #88]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80023a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023a6:	4a15      	ldr	r2, [pc, #84]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80023a8:	f043 0301 	orr.w	r3, r3, #1
 80023ac:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ae:	f7fe ff83 	bl	80012b8 <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023b6:	f7fe ff7f 	bl	80012b8 <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e180      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c8:	4b0c      	ldr	r3, [pc, #48]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80023ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x23a>
 80023d4:	e01a      	b.n	800240c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d6:	4b09      	ldr	r3, [pc, #36]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80023d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023da:	4a08      	ldr	r2, [pc, #32]	@ (80023fc <HAL_RCC_OscConfig+0x280>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e2:	f7fe ff69 	bl	80012b8 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	e00a      	b.n	8002400 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7fe ff65 	bl	80012b8 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d903      	bls.n	8002400 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e166      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
 80023fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002400:	4b92      	ldr	r3, [pc, #584]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002402:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1ee      	bne.n	80023ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	f000 80a4 	beq.w	8002562 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b8c      	ldr	r3, [pc, #560]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	4b89      	ldr	r3, [pc, #548]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	4a88      	ldr	r2, [pc, #544]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800242c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002430:	6413      	str	r3, [r2, #64]	@ 0x40
 8002432:	4b86      	ldr	r3, [pc, #536]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002436:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800243e:	2301      	movs	r3, #1
 8002440:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002442:	4b83      	ldr	r3, [pc, #524]	@ (8002650 <HAL_RCC_OscConfig+0x4d4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244a:	2b00      	cmp	r3, #0
 800244c:	d118      	bne.n	8002480 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800244e:	4b80      	ldr	r3, [pc, #512]	@ (8002650 <HAL_RCC_OscConfig+0x4d4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a7f      	ldr	r2, [pc, #508]	@ (8002650 <HAL_RCC_OscConfig+0x4d4>)
 8002454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002458:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245a:	f7fe ff2d 	bl	80012b8 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002460:	e008      	b.n	8002474 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002462:	f7fe ff29 	bl	80012b8 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b64      	cmp	r3, #100	@ 0x64
 800246e:	d901      	bls.n	8002474 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002470:	2303      	movs	r3, #3
 8002472:	e12a      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002474:	4b76      	ldr	r3, [pc, #472]	@ (8002650 <HAL_RCC_OscConfig+0x4d4>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0f0      	beq.n	8002462 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d106      	bne.n	8002496 <HAL_RCC_OscConfig+0x31a>
 8002488:	4b70      	ldr	r3, [pc, #448]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800248a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800248c:	4a6f      	ldr	r2, [pc, #444]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6713      	str	r3, [r2, #112]	@ 0x70
 8002494:	e02d      	b.n	80024f2 <HAL_RCC_OscConfig+0x376>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x33c>
 800249e:	4b6b      	ldr	r3, [pc, #428]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024a2:	4a6a      	ldr	r2, [pc, #424]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	f023 0301 	bic.w	r3, r3, #1
 80024a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024aa:	4b68      	ldr	r3, [pc, #416]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ae:	4a67      	ldr	r2, [pc, #412]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024b0:	f023 0304 	bic.w	r3, r3, #4
 80024b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024b6:	e01c      	b.n	80024f2 <HAL_RCC_OscConfig+0x376>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d10c      	bne.n	80024da <HAL_RCC_OscConfig+0x35e>
 80024c0:	4b62      	ldr	r3, [pc, #392]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c4:	4a61      	ldr	r2, [pc, #388]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	f043 0304 	orr.w	r3, r3, #4
 80024ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80024cc:	4b5f      	ldr	r3, [pc, #380]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d0:	4a5e      	ldr	r2, [pc, #376]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d8:	e00b      	b.n	80024f2 <HAL_RCC_OscConfig+0x376>
 80024da:	4b5c      	ldr	r3, [pc, #368]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024de:	4a5b      	ldr	r2, [pc, #364]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024e6:	4b59      	ldr	r3, [pc, #356]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ea:	4a58      	ldr	r2, [pc, #352]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	f023 0304 	bic.w	r3, r3, #4
 80024f0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d015      	beq.n	8002526 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fa:	f7fe fedd 	bl	80012b8 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002500:	e00a      	b.n	8002518 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002502:	f7fe fed9 	bl	80012b8 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002510:	4293      	cmp	r3, r2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e0d8      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	4b4c      	ldr	r3, [pc, #304]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800251a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ee      	beq.n	8002502 <HAL_RCC_OscConfig+0x386>
 8002524:	e014      	b.n	8002550 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002526:	f7fe fec7 	bl	80012b8 <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800252c:	e00a      	b.n	8002544 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800252e:	f7fe fec3 	bl	80012b8 <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f241 3288 	movw	r2, #5000	@ 0x1388
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0c2      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	4b41      	ldr	r3, [pc, #260]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002546:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1ee      	bne.n	800252e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002550:	7dfb      	ldrb	r3, [r7, #23]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b3d      	ldr	r3, [pc, #244]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	4a3c      	ldr	r2, [pc, #240]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002560:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80ae 	beq.w	80026c8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256c:	4b37      	ldr	r3, [pc, #220]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 030c 	and.w	r3, r3, #12
 8002574:	2b08      	cmp	r3, #8
 8002576:	d06d      	beq.n	8002654 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	699b      	ldr	r3, [r3, #24]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d14b      	bne.n	8002618 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002580:	4b32      	ldr	r3, [pc, #200]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a31      	ldr	r2, [pc, #196]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002586:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fe94 	bl	80012b8 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002594:	f7fe fe90 	bl	80012b8 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e091      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a6:	4b29      	ldr	r3, [pc, #164]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	69da      	ldr	r2, [r3, #28]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	431a      	orrs	r2, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c0:	019b      	lsls	r3, r3, #6
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	041b      	lsls	r3, r3, #16
 80025ce:	431a      	orrs	r2, r3
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	061b      	lsls	r3, r3, #24
 80025d6:	431a      	orrs	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025dc:	071b      	lsls	r3, r3, #28
 80025de:	491b      	ldr	r1, [pc, #108]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b19      	ldr	r3, [pc, #100]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a18      	ldr	r2, [pc, #96]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f0:	f7fe fe62 	bl	80012b8 <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025f8:	f7fe fe5e 	bl	80012b8 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e05f      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b10      	ldr	r3, [pc, #64]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x47c>
 8002616:	e057      	b.n	80026c8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a0b      	ldr	r2, [pc, #44]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 800261e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fe48 	bl	80012b8 <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800262c:	f7fe fe44 	bl	80012b8 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e045      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263e:	4b03      	ldr	r3, [pc, #12]	@ (800264c <HAL_RCC_OscConfig+0x4d0>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x4b0>
 800264a:	e03d      	b.n	80026c8 <HAL_RCC_OscConfig+0x54c>
 800264c:	40023800 	.word	0x40023800
 8002650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002654:	4b1f      	ldr	r3, [pc, #124]	@ (80026d4 <HAL_RCC_OscConfig+0x558>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	699b      	ldr	r3, [r3, #24]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d030      	beq.n	80026c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d129      	bne.n	80026c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d122      	bne.n	80026c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800268a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800268c:	4293      	cmp	r3, r2
 800268e:	d119      	bne.n	80026c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	3b01      	subs	r3, #1
 800269e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d10f      	bne.n	80026c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d001      	beq.n	80026c8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023800 	.word	0x40023800

080026d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0d0      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f0:	4b6a      	ldr	r3, [pc, #424]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 030f 	and.w	r3, r3, #15
 80026f8:	683a      	ldr	r2, [r7, #0]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d910      	bls.n	8002720 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026fe:	4b67      	ldr	r3, [pc, #412]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f023 020f 	bic.w	r2, r3, #15
 8002706:	4965      	ldr	r1, [pc, #404]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	4313      	orrs	r3, r2
 800270c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800270e:	4b63      	ldr	r3, [pc, #396]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 030f 	and.w	r3, r3, #15
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d001      	beq.n	8002720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	e0b8      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0302 	and.w	r3, r3, #2
 8002728:	2b00      	cmp	r3, #0
 800272a:	d020      	beq.n	800276e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0304 	and.w	r3, r3, #4
 8002734:	2b00      	cmp	r3, #0
 8002736:	d005      	beq.n	8002744 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002738:	4b59      	ldr	r3, [pc, #356]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a58      	ldr	r2, [pc, #352]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800273e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002742:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d005      	beq.n	800275c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002750:	4b53      	ldr	r3, [pc, #332]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	4a52      	ldr	r2, [pc, #328]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002756:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800275a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800275c:	4b50      	ldr	r3, [pc, #320]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	494d      	ldr	r1, [pc, #308]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	4313      	orrs	r3, r2
 800276c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d040      	beq.n	80027fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d107      	bne.n	8002792 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002782:	4b47      	ldr	r3, [pc, #284]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d115      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e07f      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b02      	cmp	r3, #2
 8002798:	d107      	bne.n	80027aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800279a:	4b41      	ldr	r3, [pc, #260]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d109      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e073      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027aa:	4b3d      	ldr	r3, [pc, #244]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d101      	bne.n	80027ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e06b      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ba:	4b39      	ldr	r3, [pc, #228]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f023 0203 	bic.w	r2, r3, #3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	4936      	ldr	r1, [pc, #216]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027cc:	f7fe fd74 	bl	80012b8 <HAL_GetTick>
 80027d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d4:	f7fe fd70 	bl	80012b8 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e053      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ea:	4b2d      	ldr	r3, [pc, #180]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 020c 	and.w	r2, r3, #12
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d1eb      	bne.n	80027d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027fc:	4b27      	ldr	r3, [pc, #156]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 030f 	and.w	r3, r3, #15
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d210      	bcs.n	800282c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b24      	ldr	r3, [pc, #144]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 020f 	bic.w	r2, r3, #15
 8002812:	4922      	ldr	r1, [pc, #136]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e032      	b.n	8002892 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d008      	beq.n	800284a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002838:	4b19      	ldr	r3, [pc, #100]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4916      	ldr	r1, [pc, #88]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d009      	beq.n	800286a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002856:	4b12      	ldr	r3, [pc, #72]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	490e      	ldr	r1, [pc, #56]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800286a:	f000 f821 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 800286e:	4602      	mov	r2, r0
 8002870:	4b0b      	ldr	r3, [pc, #44]	@ (80028a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	490a      	ldr	r1, [pc, #40]	@ (80028a4 <HAL_RCC_ClockConfig+0x1cc>)
 800287c:	5ccb      	ldrb	r3, [r1, r3]
 800287e:	fa22 f303 	lsr.w	r3, r2, r3
 8002882:	4a09      	ldr	r2, [pc, #36]	@ (80028a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002886:	4b09      	ldr	r3, [pc, #36]	@ (80028ac <HAL_RCC_ClockConfig+0x1d4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f7fe fcd0 	bl	8001230 <HAL_InitTick>

  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	40023c00 	.word	0x40023c00
 80028a0:	40023800 	.word	0x40023800
 80028a4:	08005d30 	.word	0x08005d30
 80028a8:	20000000 	.word	0x20000000
 80028ac:	20000004 	.word	0x20000004

080028b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028b4:	b094      	sub	sp, #80	@ 0x50
 80028b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80028bc:	2300      	movs	r3, #0
 80028be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028c0:	2300      	movs	r3, #0
 80028c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 80028c4:	2300      	movs	r3, #0
 80028c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028c8:	4b79      	ldr	r3, [pc, #484]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b08      	cmp	r3, #8
 80028d2:	d00d      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x40>
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	f200 80e1 	bhi.w	8002a9c <HAL_RCC_GetSysClockFreq+0x1ec>
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x34>
 80028de:	2b04      	cmp	r3, #4
 80028e0:	d003      	beq.n	80028ea <HAL_RCC_GetSysClockFreq+0x3a>
 80028e2:	e0db      	b.n	8002a9c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028e4:	4b73      	ldr	r3, [pc, #460]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e8:	e0db      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028ea:	4b72      	ldr	r3, [pc, #456]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028ee:	e0d8      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f0:	4b6f      	ldr	r3, [pc, #444]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028fa:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d063      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002906:	4b6a      	ldr	r3, [pc, #424]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	099b      	lsrs	r3, r3, #6
 800290c:	2200      	movs	r2, #0
 800290e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002910:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002918:	633b      	str	r3, [r7, #48]	@ 0x30
 800291a:	2300      	movs	r3, #0
 800291c:	637b      	str	r3, [r7, #52]	@ 0x34
 800291e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002922:	4622      	mov	r2, r4
 8002924:	462b      	mov	r3, r5
 8002926:	f04f 0000 	mov.w	r0, #0
 800292a:	f04f 0100 	mov.w	r1, #0
 800292e:	0159      	lsls	r1, r3, #5
 8002930:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002934:	0150      	lsls	r0, r2, #5
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4621      	mov	r1, r4
 800293c:	1a51      	subs	r1, r2, r1
 800293e:	6139      	str	r1, [r7, #16]
 8002940:	4629      	mov	r1, r5
 8002942:	eb63 0301 	sbc.w	r3, r3, r1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	f04f 0200 	mov.w	r2, #0
 800294c:	f04f 0300 	mov.w	r3, #0
 8002950:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002954:	4659      	mov	r1, fp
 8002956:	018b      	lsls	r3, r1, #6
 8002958:	4651      	mov	r1, sl
 800295a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800295e:	4651      	mov	r1, sl
 8002960:	018a      	lsls	r2, r1, #6
 8002962:	4651      	mov	r1, sl
 8002964:	ebb2 0801 	subs.w	r8, r2, r1
 8002968:	4659      	mov	r1, fp
 800296a:	eb63 0901 	sbc.w	r9, r3, r1
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800297a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800297e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002982:	4690      	mov	r8, r2
 8002984:	4699      	mov	r9, r3
 8002986:	4623      	mov	r3, r4
 8002988:	eb18 0303 	adds.w	r3, r8, r3
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	462b      	mov	r3, r5
 8002990:	eb49 0303 	adc.w	r3, r9, r3
 8002994:	60fb      	str	r3, [r7, #12]
 8002996:	f04f 0200 	mov.w	r2, #0
 800299a:	f04f 0300 	mov.w	r3, #0
 800299e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029a2:	4629      	mov	r1, r5
 80029a4:	028b      	lsls	r3, r1, #10
 80029a6:	4621      	mov	r1, r4
 80029a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029ac:	4621      	mov	r1, r4
 80029ae:	028a      	lsls	r2, r1, #10
 80029b0:	4610      	mov	r0, r2
 80029b2:	4619      	mov	r1, r3
 80029b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029b6:	2200      	movs	r2, #0
 80029b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029c0:	f7fd fc8e 	bl	80002e0 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029cc:	e058      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b38      	ldr	r3, [pc, #224]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	2200      	movs	r2, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	4611      	mov	r1, r2
 80029da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029de:	623b      	str	r3, [r7, #32]
 80029e0:	2300      	movs	r3, #0
 80029e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80029e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029e8:	4642      	mov	r2, r8
 80029ea:	464b      	mov	r3, r9
 80029ec:	f04f 0000 	mov.w	r0, #0
 80029f0:	f04f 0100 	mov.w	r1, #0
 80029f4:	0159      	lsls	r1, r3, #5
 80029f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029fa:	0150      	lsls	r0, r2, #5
 80029fc:	4602      	mov	r2, r0
 80029fe:	460b      	mov	r3, r1
 8002a00:	4641      	mov	r1, r8
 8002a02:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a06:	4649      	mov	r1, r9
 8002a08:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a20:	ebb2 040a 	subs.w	r4, r2, sl
 8002a24:	eb63 050b 	sbc.w	r5, r3, fp
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	00eb      	lsls	r3, r5, #3
 8002a32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a36:	00e2      	lsls	r2, r4, #3
 8002a38:	4614      	mov	r4, r2
 8002a3a:	461d      	mov	r5, r3
 8002a3c:	4643      	mov	r3, r8
 8002a3e:	18e3      	adds	r3, r4, r3
 8002a40:	603b      	str	r3, [r7, #0]
 8002a42:	464b      	mov	r3, r9
 8002a44:	eb45 0303 	adc.w	r3, r5, r3
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	f04f 0200 	mov.w	r2, #0
 8002a4e:	f04f 0300 	mov.w	r3, #0
 8002a52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a56:	4629      	mov	r1, r5
 8002a58:	028b      	lsls	r3, r1, #10
 8002a5a:	4621      	mov	r1, r4
 8002a5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a60:	4621      	mov	r1, r4
 8002a62:	028a      	lsls	r2, r1, #10
 8002a64:	4610      	mov	r0, r2
 8002a66:	4619      	mov	r1, r3
 8002a68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
 8002a6e:	61fa      	str	r2, [r7, #28]
 8002a70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a74:	f7fd fc34 	bl	80002e0 <__aeabi_uldivmod>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	0c1b      	lsrs	r3, r3, #16
 8002a86:	f003 0303 	and.w	r3, r3, #3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a9a:	e002      	b.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a9e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aa0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002aa2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3750      	adds	r7, #80	@ 0x50
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aae:	bf00      	nop
 8002ab0:	40023800 	.word	0x40023800
 8002ab4:	00f42400 	.word	0x00f42400

08002ab8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002abc:	4b03      	ldr	r3, [pc, #12]	@ (8002acc <HAL_RCC_GetHCLKFreq+0x14>)
 8002abe:	681b      	ldr	r3, [r3, #0]
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	20000000 	.word	0x20000000

08002ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ad4:	f7ff fff0 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	0a9b      	lsrs	r3, r3, #10
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	4903      	ldr	r1, [pc, #12]	@ (8002af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ae6:	5ccb      	ldrb	r3, [r1, r3]
 8002ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40023800 	.word	0x40023800
 8002af4:	08005d40 	.word	0x08005d40

08002af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002afc:	f7ff ffdc 	bl	8002ab8 <HAL_RCC_GetHCLKFreq>
 8002b00:	4602      	mov	r2, r0
 8002b02:	4b05      	ldr	r3, [pc, #20]	@ (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	0b5b      	lsrs	r3, r3, #13
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	4903      	ldr	r1, [pc, #12]	@ (8002b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b0e:	5ccb      	ldrb	r3, [r1, r3]
 8002b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	08005d40 	.word	0x08005d40

08002b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d012      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b48:	4b69      	ldr	r3, [pc, #420]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	4a68      	ldr	r2, [pc, #416]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b4e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002b52:	6093      	str	r3, [r2, #8]
 8002b54:	4b66      	ldr	r3, [pc, #408]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b5c:	4964      	ldr	r1, [pc, #400]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d101      	bne.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d017      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b80:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b88:	4959      	ldr	r1, [pc, #356]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b94:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b98:	d101      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d101      	bne.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d017      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bb6:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002bbc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc4:	494a      	ldr	r1, [pc, #296]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002bd4:	d101      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d101      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	f000 808b 	beq.w	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c04:	4b3a      	ldr	r3, [pc, #232]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c08:	4a39      	ldr	r2, [pc, #228]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c10:	4b37      	ldr	r3, [pc, #220]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c1c:	4b35      	ldr	r3, [pc, #212]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a34      	ldr	r2, [pc, #208]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c28:	f7fe fb46 	bl	80012b8 <HAL_GetTick>
 8002c2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c2e:	e008      	b.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c30:	f7fe fb42 	bl	80012b8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b64      	cmp	r3, #100	@ 0x64
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e38f      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c42:	4b2c      	ldr	r3, [pc, #176]	@ (8002cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0f0      	beq.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c4e:	4b28      	ldr	r3, [pc, #160]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d035      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c66:	693a      	ldr	r2, [r7, #16]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d02e      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c6c:	4b20      	ldr	r3, [pc, #128]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c80:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c82:	4b1b      	ldr	r3, [pc, #108]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c86:	4a1a      	ldr	r2, [pc, #104]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c8c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c8e:	4a18      	ldr	r2, [pc, #96]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c94:	4b16      	ldr	r3, [pc, #88]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d114      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fb0a 	bl	80012b8 <HAL_GetTick>
 8002ca4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fb06 	bl	80012b8 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e351      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cbe:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0ee      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002cd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002cd6:	d111      	bne.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cd8:	4b05      	ldr	r3, [pc, #20]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ce6:	400b      	ands	r3, r1
 8002ce8:	4901      	ldr	r1, [pc, #4]	@ (8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	608b      	str	r3, [r1, #8]
 8002cee:	e00b      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	40007000 	.word	0x40007000
 8002cf8:	0ffffcff 	.word	0x0ffffcff
 8002cfc:	4bac      	ldr	r3, [pc, #688]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4aab      	ldr	r2, [pc, #684]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d02:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002d06:	6093      	str	r3, [r2, #8]
 8002d08:	4ba9      	ldr	r3, [pc, #676]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d14:	49a6      	ldr	r1, [pc, #664]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0310 	and.w	r3, r3, #16
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d010      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d26:	4ba2      	ldr	r3, [pc, #648]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002d2c:	4aa0      	ldr	r2, [pc, #640]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d32:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002d36:	4b9e      	ldr	r3, [pc, #632]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d38:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d40:	499b      	ldr	r1, [pc, #620]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d54:	4b96      	ldr	r3, [pc, #600]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d62:	4993      	ldr	r1, [pc, #588]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d76:	4b8e      	ldr	r3, [pc, #568]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d84:	498a      	ldr	r1, [pc, #552]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d98:	4b85      	ldr	r3, [pc, #532]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d9e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002da6:	4982      	ldr	r1, [pc, #520]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dba:	4b7d      	ldr	r3, [pc, #500]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dc0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc8:	4979      	ldr	r1, [pc, #484]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ddc:	4b74      	ldr	r3, [pc, #464]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002de2:	f023 0203 	bic.w	r2, r3, #3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dea:	4971      	ldr	r1, [pc, #452]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e04:	f023 020c 	bic.w	r2, r3, #12
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0c:	4968      	ldr	r1, [pc, #416]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e20:	4b63      	ldr	r3, [pc, #396]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e26:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	4960      	ldr	r1, [pc, #384]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e42:	4b5b      	ldr	r3, [pc, #364]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e48:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e50:	4957      	ldr	r1, [pc, #348]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e64:	4b52      	ldr	r3, [pc, #328]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e6a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e72:	494f      	ldr	r1, [pc, #316]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00a      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e86:	4b4a      	ldr	r3, [pc, #296]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e8c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e94:	4946      	ldr	r1, [pc, #280]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00a      	beq.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ea8:	4b41      	ldr	r3, [pc, #260]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002eae:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb6:	493e      	ldr	r1, [pc, #248]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d00a      	beq.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eca:	4b39      	ldr	r3, [pc, #228]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ed0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ed8:	4935      	ldr	r1, [pc, #212]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00a      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002eec:	4b30      	ldr	r3, [pc, #192]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ef2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002efa:	492d      	ldr	r1, [pc, #180]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efc:	4313      	orrs	r3, r2
 8002efe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d011      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f0e:	4b28      	ldr	r3, [pc, #160]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f14:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f1c:	4924      	ldr	r1, [pc, #144]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f28:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f4e:	4b18      	ldr	r3, [pc, #96]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f54:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f5c:	4914      	ldr	r1, [pc, #80]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00b      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f70:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f76:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f80:	490b      	ldr	r1, [pc, #44]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00f      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f94:	4b06      	ldr	r3, [pc, #24]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f9a:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fa4:	4902      	ldr	r1, [pc, #8]	@ (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002fac:	e002      	b.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002fae:	bf00      	nop
 8002fb0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00b      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fc0:	4b8a      	ldr	r3, [pc, #552]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fc6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	4986      	ldr	r1, [pc, #536]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d00b      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fe4:	4b81      	ldr	r3, [pc, #516]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002fea:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002ff4:	497d      	ldr	r1, [pc, #500]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d006      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80d6 	beq.w	80031bc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003010:	4b76      	ldr	r3, [pc, #472]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a75      	ldr	r2, [pc, #468]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003016:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800301a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800301c:	f7fe f94c 	bl	80012b8 <HAL_GetTick>
 8003020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003024:	f7fe f948 	bl	80012b8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b64      	cmp	r3, #100	@ 0x64
 8003030:	d901      	bls.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e195      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003036:	4b6d      	ldr	r3, [pc, #436]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1f0      	bne.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b00      	cmp	r3, #0
 800304c:	d021      	beq.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11d      	bne.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003056:	4b65      	ldr	r3, [pc, #404]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003058:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800305c:	0c1b      	lsrs	r3, r3, #16
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003064:	4b61      	ldr	r3, [pc, #388]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003066:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800306a:	0e1b      	lsrs	r3, r3, #24
 800306c:	f003 030f 	and.w	r3, r3, #15
 8003070:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	019a      	lsls	r2, r3, #6
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	041b      	lsls	r3, r3, #16
 800307c:	431a      	orrs	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	061b      	lsls	r3, r3, #24
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	071b      	lsls	r3, r3, #28
 800308a:	4958      	ldr	r1, [pc, #352]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800308c:	4313      	orrs	r3, r2
 800308e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d004      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d02e      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80030bc:	d129      	bne.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80030be:	4b4b      	ldr	r3, [pc, #300]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030c4:	0c1b      	lsrs	r3, r3, #16
 80030c6:	f003 0303 	and.w	r3, r3, #3
 80030ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030cc:	4b47      	ldr	r3, [pc, #284]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80030d2:	0f1b      	lsrs	r3, r3, #28
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	019a      	lsls	r2, r3, #6
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	041b      	lsls	r3, r3, #16
 80030e4:	431a      	orrs	r2, r3
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	061b      	lsls	r3, r3, #24
 80030ec:	431a      	orrs	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	071b      	lsls	r3, r3, #28
 80030f2:	493e      	ldr	r1, [pc, #248]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030fa:	4b3c      	ldr	r3, [pc, #240]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003100:	f023 021f 	bic.w	r2, r3, #31
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003108:	3b01      	subs	r3, #1
 800310a:	4938      	ldr	r1, [pc, #224]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d01d      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800311e:	4b33      	ldr	r3, [pc, #204]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003124:	0e1b      	lsrs	r3, r3, #24
 8003126:	f003 030f 	and.w	r3, r3, #15
 800312a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800312c:	4b2f      	ldr	r3, [pc, #188]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003132:	0f1b      	lsrs	r3, r3, #28
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	019a      	lsls	r2, r3, #6
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	431a      	orrs	r2, r3
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	061b      	lsls	r3, r3, #24
 800314c:	431a      	orrs	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	071b      	lsls	r3, r3, #28
 8003152:	4926      	ldr	r1, [pc, #152]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d011      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	019a      	lsls	r2, r3, #6
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	041b      	lsls	r3, r3, #16
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	061b      	lsls	r3, r3, #24
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	071b      	lsls	r3, r3, #28
 8003182:	491a      	ldr	r1, [pc, #104]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003184:	4313      	orrs	r3, r2
 8003186:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800318a:	4b18      	ldr	r3, [pc, #96]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a17      	ldr	r2, [pc, #92]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003190:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003194:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003196:	f7fe f88f 	bl	80012b8 <HAL_GetTick>
 800319a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800319c:	e008      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800319e:	f7fe f88b 	bl	80012b8 <HAL_GetTick>
 80031a2:	4602      	mov	r2, r0
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	2b64      	cmp	r3, #100	@ 0x64
 80031aa:	d901      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e0d8      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031b0:	4b0e      	ldr	r3, [pc, #56]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0f0      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	f040 80ce 	bne.w	8003360 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031c4:	4b09      	ldr	r3, [pc, #36]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a08      	ldr	r2, [pc, #32]	@ (80031ec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031d0:	f7fe f872 	bl	80012b8 <HAL_GetTick>
 80031d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031d6:	e00b      	b.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80031d8:	f7fe f86e 	bl	80012b8 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b64      	cmp	r3, #100	@ 0x64
 80031e4:	d904      	bls.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e0bb      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80031ea:	bf00      	nop
 80031ec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031f0:	4b5e      	ldr	r3, [pc, #376]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80031f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031fc:	d0ec      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800320e:	2b00      	cmp	r3, #0
 8003210:	d009      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800321a:	2b00      	cmp	r3, #0
 800321c:	d02e      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	d12a      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003226:	4b51      	ldr	r3, [pc, #324]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003228:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003234:	4b4d      	ldr	r3, [pc, #308]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323a:	0f1b      	lsrs	r3, r3, #28
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	019a      	lsls	r2, r3, #6
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	041b      	lsls	r3, r3, #16
 800324c:	431a      	orrs	r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	061b      	lsls	r3, r3, #24
 8003254:	431a      	orrs	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	071b      	lsls	r3, r3, #28
 800325a:	4944      	ldr	r1, [pc, #272]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800325c:	4313      	orrs	r3, r2
 800325e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003262:	4b42      	ldr	r3, [pc, #264]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003264:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003268:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	3b01      	subs	r3, #1
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	493d      	ldr	r1, [pc, #244]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d022      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800328c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003290:	d11d      	bne.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003292:	4b36      	ldr	r3, [pc, #216]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003294:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003298:	0e1b      	lsrs	r3, r3, #24
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032a0:	4b32      	ldr	r3, [pc, #200]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a6:	0f1b      	lsrs	r3, r3, #28
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	019a      	lsls	r2, r3, #6
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	431a      	orrs	r2, r3
 80032bc:	693b      	ldr	r3, [r7, #16]
 80032be:	061b      	lsls	r3, r3, #24
 80032c0:	431a      	orrs	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	071b      	lsls	r3, r3, #28
 80032c6:	4929      	ldr	r1, [pc, #164]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0308 	and.w	r3, r3, #8
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d028      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032da:	4b24      	ldr	r3, [pc, #144]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e0:	0e1b      	lsrs	r3, r3, #24
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032e8:	4b20      	ldr	r3, [pc, #128]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ee:	0c1b      	lsrs	r3, r3, #16
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	019a      	lsls	r2, r3, #6
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	061b      	lsls	r3, r3, #24
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	69db      	ldr	r3, [r3, #28]
 800330c:	071b      	lsls	r3, r3, #28
 800330e:	4917      	ldr	r1, [pc, #92]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003316:	4b15      	ldr	r3, [pc, #84]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003318:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800331c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003324:	4911      	ldr	r1, [pc, #68]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800332c:	4b0f      	ldr	r3, [pc, #60]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a0e      	ldr	r2, [pc, #56]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003336:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003338:	f7fd ffbe 	bl	80012b8 <HAL_GetTick>
 800333c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003340:	f7fd ffba 	bl	80012b8 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	@ 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e007      	b.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003352:	4b06      	ldr	r3, [pc, #24]	@ (800336c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800335a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800335e:	d1ef      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003360:	2300      	movs	r3, #0
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800

08003370 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 800337c:	2300      	movs	r3, #0
 800337e:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8003384:	2300      	movs	r3, #0
 8003386:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800338e:	f040 80a4 	bne.w	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003392:	4ba6      	ldr	r3, [pc, #664]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003394:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003398:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80033a0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033a8:	f000 808a 	beq.w	80034c0 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033b2:	f200 8091 	bhi.w	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033bc:	d07d      	beq.n	80034ba <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033c4:	f200 8088 	bhi.w	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d004      	beq.n	80033d8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d4:	d039      	beq.n	800344a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80033d6:	e07f      	b.n	80034d8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033d8:	4b94      	ldr	r3, [pc, #592]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d108      	bne.n	80033f6 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033e4:	4b91      	ldr	r3, [pc, #580]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033ec:	4a90      	ldr	r2, [pc, #576]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80033ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	e007      	b.n	8003406 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80033f6:	4b8d      	ldr	r3, [pc, #564]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033fe:	4a8c      	ldr	r2, [pc, #560]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003400:	fbb2 f3f3 	udiv	r3, r2, r3
 8003404:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003406:	4b89      	ldr	r3, [pc, #548]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340c:	0e1b      	lsrs	r3, r3, #24
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003414:	4b85      	ldr	r3, [pc, #532]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	099b      	lsrs	r3, r3, #6
 800341c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	fb03 f202 	mul.w	r2, r3, r2
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	fbb2 f3f3 	udiv	r3, r2, r3
 800342c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800342e:	4b7f      	ldr	r3, [pc, #508]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003430:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003434:	0a1b      	lsrs	r3, r3, #8
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	3301      	adds	r3, #1
 800343c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800343e:	697a      	ldr	r2, [r7, #20]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	fbb2 f3f3 	udiv	r3, r2, r3
 8003446:	617b      	str	r3, [r7, #20]
        break;
 8003448:	e047      	b.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800344a:	4b78      	ldr	r3, [pc, #480]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d108      	bne.n	8003468 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003456:	4b75      	ldr	r3, [pc, #468]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800345e:	4a74      	ldr	r2, [pc, #464]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003460:	fbb2 f3f3 	udiv	r3, r2, r3
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	e007      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003468:	4b70      	ldr	r3, [pc, #448]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003470:	4a6f      	ldr	r2, [pc, #444]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8003478:	4b6c      	ldr	r3, [pc, #432]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800347a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800347e:	0e1b      	lsrs	r3, r3, #24
 8003480:	f003 030f 	and.w	r3, r3, #15
 8003484:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003486:	4b69      	ldr	r3, [pc, #420]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800348c:	099b      	lsrs	r3, r3, #6
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	fb03 f202 	mul.w	r2, r3, r2
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80034a0:	4b62      	ldr	r3, [pc, #392]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80034a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	3301      	adds	r3, #1
 80034ac:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b6:	617b      	str	r3, [r7, #20]
        break;
 80034b8:	e00f      	b.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80034ba:	4b5e      	ldr	r3, [pc, #376]	@ (8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80034bc:	617b      	str	r3, [r7, #20]
        break;
 80034be:	e00c      	b.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80034c0:	4b5a      	ldr	r3, [pc, #360]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d102      	bne.n	80034d2 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 80034cc:	4b58      	ldr	r3, [pc, #352]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80034ce:	617b      	str	r3, [r7, #20]
        break;
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 80034d2:	4b57      	ldr	r3, [pc, #348]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80034d4:	617b      	str	r3, [r7, #20]
        break;
 80034d6:	e000      	b.n	80034da <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 80034d8:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034e0:	f040 80ab 	bne.w	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
  {
    saiclocksource = RCC->DCKCFGR1;
 80034e4:	4b51      	ldr	r3, [pc, #324]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80034e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80034ea:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80034f2:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034fa:	f000 808a 	beq.w	8003612 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003504:	f200 8098 	bhi.w	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800350e:	d07d      	beq.n	800360c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003516:	f200 808f 	bhi.w	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d004      	beq.n	800352a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003526:	d039      	beq.n	800359c <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003528:	e086      	b.n	8003638 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800352a:	4b40      	ldr	r3, [pc, #256]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d108      	bne.n	8003548 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003536:	4b3d      	ldr	r3, [pc, #244]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800353e:	4a3c      	ldr	r2, [pc, #240]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	613b      	str	r3, [r7, #16]
 8003546:	e007      	b.n	8003558 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003548:	4b38      	ldr	r3, [pc, #224]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003550:	4a37      	ldr	r2, [pc, #220]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003558:	4b34      	ldr	r3, [pc, #208]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800355a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355e:	0e1b      	lsrs	r3, r3, #24
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003566:	4b31      	ldr	r3, [pc, #196]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	099b      	lsrs	r3, r3, #6
 800356e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003572:	693a      	ldr	r2, [r7, #16]
 8003574:	fb03 f202 	mul.w	r2, r3, r2
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	fbb2 f3f3 	udiv	r3, r2, r3
 800357e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8003580:	4b2a      	ldr	r3, [pc, #168]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003582:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	f003 031f 	and.w	r3, r3, #31
 800358c:	3301      	adds	r3, #1
 800358e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	617b      	str	r3, [r7, #20]
        break;
 800359a:	e04e      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800359c:	4b23      	ldr	r3, [pc, #140]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d108      	bne.n	80035ba <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80035a8:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035b0:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80035b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80035b6:	613b      	str	r3, [r7, #16]
 80035b8:	e007      	b.n	80035ca <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80035ba:	4b1c      	ldr	r3, [pc, #112]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035c2:	4a1b      	ldr	r2, [pc, #108]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80035c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80035ca:	4b18      	ldr	r3, [pc, #96]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80035cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035d0:	0e1b      	lsrs	r3, r3, #24
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80035d8:	4b14      	ldr	r3, [pc, #80]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80035da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035de:	099b      	lsrs	r3, r3, #6
 80035e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	fb03 f202 	mul.w	r2, r3, r2
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80035f2:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80035f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035f8:	f003 031f 	and.w	r3, r3, #31
 80035fc:	3301      	adds	r3, #1
 80035fe:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003600:	697a      	ldr	r2, [r7, #20]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	fbb2 f3f3 	udiv	r3, r2, r3
 8003608:	617b      	str	r3, [r7, #20]
        break;
 800360a:	e016      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 800360c:	4b09      	ldr	r3, [pc, #36]	@ (8003634 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800360e:	617b      	str	r3, [r7, #20]
        break;
 8003610:	e013      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003612:	4b06      	ldr	r3, [pc, #24]	@ (800362c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d102      	bne.n	8003624 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800361e:	4b04      	ldr	r3, [pc, #16]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003620:	617b      	str	r3, [r7, #20]
        break;
 8003622:	e00a      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
          frequency = HSE_VALUE;
 8003624:	4b02      	ldr	r3, [pc, #8]	@ (8003630 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003626:	617b      	str	r3, [r7, #20]
        break;
 8003628:	e007      	b.n	800363a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800
 8003630:	00f42400 	.word	0x00f42400
 8003634:	00bb8000 	.word	0x00bb8000
        break;
 8003638:	bf00      	nop
      }
    }
  }

  return frequency;
 800363a:	697b      	ldr	r3, [r7, #20]
}
 800363c:	4618      	mov	r0, r3
 800363e:	371c      	adds	r7, #28
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b088      	sub	sp, #32
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003654:	2300      	movs	r3, #0
 8003656:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e156      	b.n	8003914 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d106      	bne.n	8003680 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f7fd fc2c 	bl	8000ed8 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 fc51 	bl	8003f30 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d00c      	beq.n	80036b0 <HAL_SAI_Init+0x68>
 8003696:	2b02      	cmp	r3, #2
 8003698:	d80d      	bhi.n	80036b6 <HAL_SAI_Init+0x6e>
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_SAI_Init+0x5c>
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d003      	beq.n	80036aa <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80036a2:	e008      	b.n	80036b6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80036a4:	2300      	movs	r3, #0
 80036a6:	61fb      	str	r3, [r7, #28]
      break;
 80036a8:	e006      	b.n	80036b8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80036aa:	2310      	movs	r3, #16
 80036ac:	61fb      	str	r3, [r7, #28]
      break;
 80036ae:	e003      	b.n	80036b8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80036b0:	2320      	movs	r3, #32
 80036b2:	61fb      	str	r3, [r7, #28]
      break;
 80036b4:	e000      	b.n	80036b8 <HAL_SAI_Init+0x70>
      break;
 80036b6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d81e      	bhi.n	80036fe <HAL_SAI_Init+0xb6>
 80036c0:	a201      	add	r2, pc, #4	@ (adr r2, 80036c8 <HAL_SAI_Init+0x80>)
 80036c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c6:	bf00      	nop
 80036c8:	080036d9 	.word	0x080036d9
 80036cc:	080036df 	.word	0x080036df
 80036d0:	080036e7 	.word	0x080036e7
 80036d4:	080036ef 	.word	0x080036ef
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80036d8:	2300      	movs	r3, #0
 80036da:	617b      	str	r3, [r7, #20]
    }
    break;
 80036dc:	e010      	b.n	8003700 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80036de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80036e2:	617b      	str	r3, [r7, #20]
    }
    break;
 80036e4:	e00c      	b.n	8003700 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80036e6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036ea:	617b      	str	r3, [r7, #20]
    }
    break;
 80036ec:	e008      	b.n	8003700 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80036ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80036f2:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]
    }
    break;
 80036fc:	e000      	b.n	8003700 <HAL_SAI_Init+0xb8>
    default:
      break;
 80036fe:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a85      	ldr	r2, [pc, #532]	@ (800391c <HAL_SAI_Init+0x2d4>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_SAI_Init+0xcc>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a84      	ldr	r2, [pc, #528]	@ (8003920 <HAL_SAI_Init+0x2d8>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003714:	4a83      	ldr	r2, [pc, #524]	@ (8003924 <HAL_SAI_Init+0x2dc>)
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e002      	b.n	8003722 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800371c:	4a82      	ldr	r2, [pc, #520]	@ (8003928 <HAL_SAI_Init+0x2e0>)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69db      	ldr	r3, [r3, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d04c      	beq.n	80037c4 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a7a      	ldr	r2, [pc, #488]	@ (800391c <HAL_SAI_Init+0x2d4>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d004      	beq.n	8003742 <HAL_SAI_Init+0xfa>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a78      	ldr	r2, [pc, #480]	@ (8003920 <HAL_SAI_Init+0x2d8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d104      	bne.n	800374c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003742:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003746:	f7ff fe13 	bl	8003370 <HAL_RCCEx_GetPeriphCLKFreq>
 800374a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a76      	ldr	r2, [pc, #472]	@ (800392c <HAL_SAI_Init+0x2e4>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d004      	beq.n	8003760 <HAL_SAI_Init+0x118>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a75      	ldr	r2, [pc, #468]	@ (8003930 <HAL_SAI_Init+0x2e8>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d104      	bne.n	800376a <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8003760:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8003764:	f7ff fe04 	bl	8003370 <HAL_RCCEx_GetPeriphCLKFreq>
 8003768:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	4613      	mov	r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	461a      	mov	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	025b      	lsls	r3, r3, #9
 800377c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003780:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a6b      	ldr	r2, [pc, #428]	@ (8003934 <HAL_SAI_Init+0x2ec>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	08da      	lsrs	r2, r3, #3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8003790:	68f9      	ldr	r1, [r7, #12]
 8003792:	4b68      	ldr	r3, [pc, #416]	@ (8003934 <HAL_SAI_Init+0x2ec>)
 8003794:	fba3 2301 	umull	r2, r3, r3, r1
 8003798:	08da      	lsrs	r2, r3, #3
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	1aca      	subs	r2, r1, r3
 80037a4:	2a08      	cmp	r2, #8
 80037a6:	d904      	bls.n	80037b2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a1b      	ldr	r3, [r3, #32]
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d104      	bne.n	80037c4 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	085a      	lsrs	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d003      	beq.n	80037d4 <HAL_SAI_Init+0x18c>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d109      	bne.n	80037e8 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d101      	bne.n	80037e0 <HAL_SAI_Init+0x198>
 80037dc:	2300      	movs	r3, #0
 80037de:	e001      	b.n	80037e4 <HAL_SAI_Init+0x19c>
 80037e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e008      	b.n	80037fa <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d102      	bne.n	80037f6 <HAL_SAI_Init+0x1ae>
 80037f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80037f4:	e000      	b.n	80037f8 <HAL_SAI_Init+0x1b0>
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	6819      	ldr	r1, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	4b4c      	ldr	r3, [pc, #304]	@ (8003938 <HAL_SAI_Init+0x2f0>)
 8003806:	400b      	ands	r3, r1
 8003808:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6819      	ldr	r1, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003818:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800381e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003824:	431a      	orrs	r2, r3
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8003832:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800383e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	051b      	lsls	r3, r3, #20
 8003846:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6859      	ldr	r1, [r3, #4]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	4b38      	ldr	r3, [pc, #224]	@ (800393c <HAL_SAI_Init+0x2f4>)
 800385c:	400b      	ands	r3, r1
 800385e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699a      	ldr	r2, [r3, #24]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	430a      	orrs	r2, r1
 800387c:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6899      	ldr	r1, [r3, #8]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	4b2d      	ldr	r3, [pc, #180]	@ (8003940 <HAL_SAI_Init+0x2f8>)
 800388a:	400b      	ands	r3, r1
 800388c:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	6899      	ldr	r1, [r3, #8]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 800389e:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80038a4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80038aa:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038b0:	3b01      	subs	r3, #1
 80038b2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80038b4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	430a      	orrs	r2, r1
 80038bc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68d9      	ldr	r1, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80038cc:	400b      	ands	r3, r1
 80038ce:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68d9      	ldr	r1, [r3, #12]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	3b01      	subs	r3, #1
 80038ee:	021b      	lsls	r3, r3, #8
 80038f0:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3720      	adds	r7, #32
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	40015804 	.word	0x40015804
 8003920:	40015824 	.word	0x40015824
 8003924:	40015800 	.word	0x40015800
 8003928:	40015c00 	.word	0x40015c00
 800392c:	40015c04 	.word	0x40015c04
 8003930:	40015c24 	.word	0x40015c24
 8003934:	cccccccd 	.word	0xcccccccd
 8003938:	ff05c010 	.word	0xff05c010
 800393c:	ffff1ff0 	.word	0xffff1ff0
 8003940:	fff88000 	.word	0xfff88000

08003944 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_SAI_Abort+0x1a>
 800395a:	2302      	movs	r3, #2
 800395c:	e072      	b.n	8003a44 <HAL_SAI_Abort+0x100>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fae2 	bl	8003f30 <SAI_Disable>

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003976:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800397a:	d149      	bne.n	8003a10 <HAL_SAI_Abort+0xcc>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800398a:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d01c      	beq.n	80039ce <HAL_SAI_Abort+0x8a>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b12      	cmp	r3, #18
 800399e:	d116      	bne.n	80039ce <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fd fed7 	bl	8001758 <HAL_DMA_Abort>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d00e      	beq.n	80039ce <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b6:	2b80      	cmp	r3, #128	@ 0x80
 80039b8:	d009      	beq.n	80039ce <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80039c4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01c      	beq.n	8003a10 <HAL_SAI_Abort+0xcc>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b22      	cmp	r3, #34	@ 0x22
 80039e0:	d116      	bne.n	8003a10 <HAL_SAI_Abort+0xcc>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fd feb6 	bl	8001758 <HAL_DMA_Abort>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00e      	beq.n	8003a10 <HAL_SAI_Abort+0xcc>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039f8:	2b80      	cmp	r3, #128	@ 0x80
 80039fa:	d009      	beq.n	8003a10 <HAL_SAI_Abort+0xcc>
        {
          status = HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a06:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2200      	movs	r2, #0
 8003a16:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a20:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0208 	orr.w	r2, r2, #8
 8003a30:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}

08003a4c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	60f8      	str	r0, [r7, #12]
 8003a54:	60b9      	str	r1, [r7, #8]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d002      	beq.n	8003a66 <HAL_SAI_Receive_DMA+0x1a>
 8003a60:	88fb      	ldrh	r3, [r7, #6]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e074      	b.n	8003b54 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d16d      	bne.n	8003b52 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d101      	bne.n	8003a84 <HAL_SAI_Receive_DMA+0x38>
 8003a80:	2302      	movs	r3, #2
 8003a82:	e067      	b.n	8003b54 <HAL_SAI_Receive_DMA+0x108>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	88fa      	ldrh	r2, [r7, #6]
 8003a96:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	88fa      	ldrh	r2, [r7, #6]
 8003a9e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2222      	movs	r2, #34	@ 0x22
 8003aae:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab6:	4a29      	ldr	r2, [pc, #164]	@ (8003b5c <HAL_SAI_Receive_DMA+0x110>)
 8003ab8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003abe:	4a28      	ldr	r2, [pc, #160]	@ (8003b60 <HAL_SAI_Receive_DMA+0x114>)
 8003ac0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	4a27      	ldr	r2, [pc, #156]	@ (8003b64 <HAL_SAI_Receive_DMA+0x118>)
 8003ac8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ace:	2200      	movs	r2, #0
 8003ad0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	331c      	adds	r3, #28
 8003adc:	4619      	mov	r1, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8003aea:	f7fd fdd5 	bl	8001698 <HAL_DMA_Start_IT>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d005      	beq.n	8003b00 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e029      	b.n	8003b54 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003b00:	2100      	movs	r1, #0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 f9de 	bl	8003ec4 <SAI_InterruptFlag>
 8003b08:	4601      	mov	r1, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	691a      	ldr	r2, [r3, #16]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003b26:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d107      	bne.n	8003b46 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003b44:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	e000      	b.n	8003b54 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003b52:	2302      	movs	r3, #2
  }
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3710      	adds	r7, #16
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	08004001 	.word	0x08004001
 8003b60:	08003fa1 	.word	0x08003fa1
 8003b64:	0800401d 	.word	0x0800401d

08003b68 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8192 	beq.w	8003ea2 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	f003 0308 	and.w	r3, r3, #8
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d009      	beq.n	8003bb4 <HAL_SAI_IRQHandler+0x4c>
 8003ba0:	693b      	ldr	r3, [r7, #16]
 8003ba2:	f003 0308 	and.w	r3, r3, #8
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d004      	beq.n	8003bb4 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
 8003bb2:	e176      	b.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	f003 0301 	and.w	r3, r3, #1
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d01e      	beq.n	8003bfc <HAL_SAI_IRQHandler+0x94>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d019      	beq.n	8003bfc <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b22      	cmp	r3, #34	@ 0x22
 8003bda:	d101      	bne.n	8003be0 <HAL_SAI_IRQHandler+0x78>
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e000      	b.n	8003be2 <HAL_SAI_IRQHandler+0x7a>
 8003be0:	2302      	movs	r3, #2
 8003be2:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f95b 	bl	8003eb0 <HAL_SAI_ErrorCallback>
 8003bfa:	e152      	b.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0302 	and.w	r3, r3, #2
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d011      	beq.n	8003c2a <HAL_SAI_IRQHandler+0xc2>
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00c      	beq.n	8003c2a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2202      	movs	r2, #2
 8003c16:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 8140 	beq.w	8003ea2 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c26:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 8003c28:	e13b      	b.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d057      	beq.n	8003ce4 <HAL_SAI_IRQHandler+0x17c>
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d052      	beq.n	8003ce4 <HAL_SAI_IRQHandler+0x17c>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2220      	movs	r2, #32
 8003c44:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c4c:	f043 0204 	orr.w	r2, r3, #4
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d03a      	beq.n	8003cd6 <HAL_SAI_IRQHandler+0x16e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d018      	beq.n	8003c9a <HAL_SAI_IRQHandler+0x132>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c6c:	4a8f      	ldr	r2, [pc, #572]	@ (8003eac <HAL_SAI_IRQHandler+0x344>)
 8003c6e:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fd fddf 	bl	8001838 <HAL_DMA_Abort_IT>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f000 810b 	beq.w	8003e98 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 f90c 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003c98:	e0fe      	b.n	8003e98 <HAL_SAI_IRQHandler+0x330>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        else if (hsai->hdmarx != NULL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	f000 80fa 	beq.w	8003e98 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a80      	ldr	r2, [pc, #512]	@ (8003eac <HAL_SAI_IRQHandler+0x344>)
 8003caa:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fd fdc1 	bl	8001838 <HAL_DMA_Abort_IT>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80ed 	beq.w	8003e98 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f8ee 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003cd4:	e0e0      	b.n	8003e98 <HAL_SAI_IRQHandler+0x330>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f7ff fe34 	bl	8003944 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 f8e7 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003ce2:	e0d9      	b.n	8003e98 <HAL_SAI_IRQHandler+0x330>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d057      	beq.n	8003d9e <HAL_SAI_IRQHandler+0x236>
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d052      	beq.n	8003d9e <HAL_SAI_IRQHandler+0x236>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	2240      	movs	r2, #64	@ 0x40
 8003cfe:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d06:	f043 0208 	orr.w	r2, r3, #8
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d03a      	beq.n	8003d90 <HAL_SAI_IRQHandler+0x228>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d018      	beq.n	8003d54 <HAL_SAI_IRQHandler+0x1ec>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d26:	4a61      	ldr	r2, [pc, #388]	@ (8003eac <HAL_SAI_IRQHandler+0x344>)
 8003d28:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7fd fd82 	bl	8001838 <HAL_DMA_Abort_IT>
 8003d34:	4603      	mov	r3, r0
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 80b0 	beq.w	8003e9c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d42:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8af 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003d52:	e0a3      	b.n	8003e9c <HAL_SAI_IRQHandler+0x334>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        else if (hsai->hdmarx != NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 809f 	beq.w	8003e9c <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d62:	4a52      	ldr	r2, [pc, #328]	@ (8003eac <HAL_SAI_IRQHandler+0x344>)
 8003d64:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd fd64 	bl	8001838 <HAL_DMA_Abort_IT>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	f000 8092 	beq.w	8003e9c <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d7e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f891 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003d8e:	e085      	b.n	8003e9c <HAL_SAI_IRQHandler+0x334>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f7ff fdd7 	bl	8003944 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f88a 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003d9c:	e07e      	b.n	8003e9c <HAL_SAI_IRQHandler+0x334>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d05d      	beq.n	8003e64 <HAL_SAI_IRQHandler+0x2fc>
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f003 0304 	and.w	r3, r3, #4
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d058      	beq.n	8003e64 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2204      	movs	r2, #4
 8003db8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dc0:	f043 0220 	orr.w	r2, r3, #32
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d017      	beq.n	8003e02 <HAL_SAI_IRQHandler+0x29a>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dd6:	4a35      	ldr	r2, [pc, #212]	@ (8003eac <HAL_SAI_IRQHandler+0x344>)
 8003dd8:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fd fd2a 	bl	8001838 <HAL_DMA_Abort_IT>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d05a      	beq.n	8003ea0 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003df0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 f858 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8003e00:	e04e      	b.n	8003ea0 <HAL_SAI_IRQHandler+0x338>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
      }
      else if (hsai->hdmarx != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d017      	beq.n	8003e3a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e0e:	4a27      	ldr	r2, [pc, #156]	@ (8003eac <HAL_SAI_IRQHandler+0x344>)
 8003e10:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fd fd0e 	bl	8001838 <HAL_DMA_Abort_IT>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d03e      	beq.n	8003ea0 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e28:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f83c 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8003e38:	e032      	b.n	8003ea0 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f04f 32ff 	mov.w	r2, #4294967295
 8003e4a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 f827 	bl	8003eb0 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8003e62:	e01d      	b.n	8003ea0 <HAL_SAI_IRQHandler+0x338>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f003 0310 	and.w	r3, r3, #16
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d019      	beq.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d014      	beq.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2210      	movs	r2, #16
 8003e7e:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e86:	f043 0210 	orr.w	r2, r3, #16
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f000 f80d 	bl	8003eb0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003e96:	e004      	b.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003e98:	bf00      	nop
 8003e9a:	e002      	b.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <HAL_SAI_IRQHandler+0x33a>
      if (hsai->hdmatx != NULL)
 8003ea0:	bf00      	nop
}
 8003ea2:	bf00      	nop
 8003ea4:	3718      	adds	r7, #24
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	08004083 	.word	0x08004083

08003eb0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d103      	bne.n	8003ee0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d10b      	bne.n	8003f00 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003eec:	2b03      	cmp	r3, #3
 8003eee:	d003      	beq.n	8003ef8 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d103      	bne.n	8003f00 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f043 0310 	orr.w	r3, r3, #16
 8003efe:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b03      	cmp	r3, #3
 8003f06:	d003      	beq.n	8003f10 <SAI_InterruptFlag+0x4c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d104      	bne.n	8003f1a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	e003      	b.n	8003f22 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f043 0304 	orr.w	r3, r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr

08003f30 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003f38:	4b17      	ldr	r3, [pc, #92]	@ (8003f98 <SAI_Disable+0x68>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a17      	ldr	r2, [pc, #92]	@ (8003f9c <SAI_Disable+0x6c>)
 8003f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f42:	0b1b      	lsrs	r3, r3, #12
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003f5a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	1e5a      	subs	r2, r3, #1
 8003f60:	60fa      	str	r2, [r7, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10a      	bne.n	8003f7c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003f6c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	72fb      	strb	r3, [r7, #11]
      break;
 8003f7a:	e006      	b.n	8003f8a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1e8      	bne.n	8003f5c <SAI_Disable+0x2c>

  return status;
 8003f8a:	7afb      	ldrb	r3, [r7, #11]
}
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	3714      	adds	r7, #20
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr
 8003f98:	20000000 	.word	0x20000000
 8003f9c:	95cbec1b 	.word	0x95cbec1b

08003fa0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fac:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb6:	d01c      	beq.n	8003ff2 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003fc6:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff ff76 	bl	8003ec4 <SAI_InterruptFlag>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	43d9      	mvns	r1, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691a      	ldr	r2, [r3, #16]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	400a      	ands	r2, r1
 8003fe8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7fc fe74 	bl	8000ce0 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003ff8:	bf00      	nop
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}

08004000 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b084      	sub	sp, #16
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800400c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7fc fe50 	bl	8000cb4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8004014:	bf00      	nop
 8004016:	3710      	adds	r7, #16
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004028:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004030:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004040:	2b01      	cmp	r3, #1
 8004042:	d004      	beq.n	800404e <SAI_DMAError+0x32>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404a:	2b01      	cmp	r3, #1
 800404c:	d112      	bne.n	8004074 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800405c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f7ff ff66 	bl	8003f30 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff ff1b 	bl	8003eb0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800407a:	bf00      	nop
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}

08004082 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800408e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800409e:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	2200      	movs	r2, #0
 80040a6:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f04f 32ff 	mov.w	r2, #4294967295
 80040b0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040b8:	2b20      	cmp	r3, #32
 80040ba:	d00a      	beq.n	80040d2 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff ff37 	bl	8003f30 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0208 	orr.w	r2, r2, #8
 80040d0:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f7ff fee4 	bl	8003eb0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80040e8:	bf00      	nop
 80040ea:	3710      	adds	r7, #16
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d101      	bne.n	8004102 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e040      	b.n	8004184 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d106      	bne.n	8004118 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f7fc fe46 	bl	8000da4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2224      	movs	r2, #36	@ 0x24
 800411c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0201 	bic.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fe34 	bl	8004da4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 fbcd 	bl	80048dc <UART_SetConfig>
 8004142:	4603      	mov	r3, r0
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e01b      	b.n	8004184 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800415a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800416a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0201 	orr.w	r2, r2, #1
 800417a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 feb3 	bl	8004ee8 <UART_CheckIdleState>
 8004182:	4603      	mov	r3, r0
}
 8004184:	4618      	mov	r0, r3
 8004186:	3708      	adds	r7, #8
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b08a      	sub	sp, #40	@ 0x28
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	60b9      	str	r1, [r7, #8]
 8004196:	4613      	mov	r3, r2
 8004198:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800419e:	2b20      	cmp	r3, #32
 80041a0:	d165      	bne.n	800426e <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_UART_Transmit_DMA+0x22>
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d101      	bne.n	80041b2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e05e      	b.n	8004270 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68ba      	ldr	r2, [r7, #8]
 80041b6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	88fa      	ldrh	r2, [r7, #6]
 80041c4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2221      	movs	r2, #33	@ 0x21
 80041d4:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d027      	beq.n	800422e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041e2:	4a25      	ldr	r2, [pc, #148]	@ (8004278 <HAL_UART_Transmit_DMA+0xec>)
 80041e4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041ea:	4a24      	ldr	r2, [pc, #144]	@ (800427c <HAL_UART_Transmit_DMA+0xf0>)
 80041ec:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	4a23      	ldr	r2, [pc, #140]	@ (8004280 <HAL_UART_Transmit_DMA+0xf4>)
 80041f4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041fa:	2200      	movs	r2, #0
 80041fc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004206:	4619      	mov	r1, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	3328      	adds	r3, #40	@ 0x28
 800420e:	461a      	mov	r2, r3
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	f7fd fa41 	bl	8001698 <HAL_DMA_Start_IT>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2210      	movs	r2, #16
 8004220:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2220      	movs	r2, #32
 8004228:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e020      	b.n	8004270 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	2240      	movs	r2, #64	@ 0x40
 8004234:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	613b      	str	r3, [r7, #16]
   return(result);
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800424c:	627b      	str	r3, [r7, #36]	@ 0x24
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004256:	623a      	str	r2, [r7, #32]
 8004258:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	69f9      	ldr	r1, [r7, #28]
 800425c:	6a3a      	ldr	r2, [r7, #32]
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	61bb      	str	r3, [r7, #24]
   return(result);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3728      	adds	r7, #40	@ 0x28
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	08005227 	.word	0x08005227
 800427c:	080052bd 	.word	0x080052bd
 8004280:	080052d9 	.word	0x080052d9

08004284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b0ba      	sub	sp, #232	@ 0xe8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80042aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80042ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80042b2:	4013      	ands	r3, r2
 80042b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80042b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d115      	bne.n	80042ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80042c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042c4:	f003 0320 	and.w	r3, r3, #32
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00f      	beq.n	80042ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80042cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d0:	f003 0320 	and.w	r3, r3, #32
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d009      	beq.n	80042ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 82c6 	beq.w	800486e <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
      }
      return;
 80042ea:	e2c0      	b.n	800486e <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80042ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	f000 8117 	beq.w	8004524 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80042f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d106      	bne.n	8004310 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004302:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004306:	4b85      	ldr	r3, [pc, #532]	@ (800451c <HAL_UART_IRQHandler+0x298>)
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 810a 	beq.w	8004524 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b00      	cmp	r3, #0
 800431a:	d011      	beq.n	8004340 <HAL_UART_IRQHandler+0xbc>
 800431c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d00b      	beq.n	8004340 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2201      	movs	r2, #1
 800432e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004336:	f043 0201 	orr.w	r2, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004344:	f003 0302 	and.w	r3, r3, #2
 8004348:	2b00      	cmp	r3, #0
 800434a:	d011      	beq.n	8004370 <HAL_UART_IRQHandler+0xec>
 800434c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00b      	beq.n	8004370 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2202      	movs	r2, #2
 800435e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004366:	f043 0204 	orr.w	r2, r3, #4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d011      	beq.n	80043a0 <HAL_UART_IRQHandler+0x11c>
 800437c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00b      	beq.n	80043a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2204      	movs	r2, #4
 800438e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004396:	f043 0202 	orr.w	r2, r3, #2
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80043a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a4:	f003 0308 	and.w	r3, r3, #8
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d017      	beq.n	80043dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d105      	bne.n	80043c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80043b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00b      	beq.n	80043dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2208      	movs	r2, #8
 80043ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043d2:	f043 0208 	orr.w	r2, r3, #8
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80043dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d012      	beq.n	800440e <HAL_UART_IRQHandler+0x18a>
 80043e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d00c      	beq.n	800440e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80043fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004404:	f043 0220 	orr.w	r2, r3, #32
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 822c 	beq.w	8004872 <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800441a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800442a:	f003 0320 	and.w	r3, r3, #32
 800442e:	2b00      	cmp	r3, #0
 8004430:	d007      	beq.n	8004442 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004448:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004456:	2b40      	cmp	r3, #64	@ 0x40
 8004458:	d005      	beq.n	8004466 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800445a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800445e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004462:	2b00      	cmp	r3, #0
 8004464:	d04f      	beq.n	8004506 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 fe79 	bl	800515e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d141      	bne.n	80044fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004484:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004490:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004494:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044b6:	e841 2300 	strex	r3, r2, [r1]
 80044ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80044be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1d9      	bne.n	800447a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d013      	beq.n	80044f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d2:	4a13      	ldr	r2, [pc, #76]	@ (8004520 <HAL_UART_IRQHandler+0x29c>)
 80044d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd f9ac 	bl	8001838 <HAL_DMA_Abort_IT>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d017      	beq.n	8004516 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80044f0:	4610      	mov	r0, r2
 80044f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044f4:	e00f      	b.n	8004516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f9d0 	bl	800489c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044fc:	e00b      	b.n	8004516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f000 f9cc 	bl	800489c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004504:	e007      	b.n	8004516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f9c8 	bl	800489c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004514:	e1ad      	b.n	8004872 <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004516:	bf00      	nop
    return;
 8004518:	e1ab      	b.n	8004872 <HAL_UART_IRQHandler+0x5ee>
 800451a:	bf00      	nop
 800451c:	04000120 	.word	0x04000120
 8004520:	08005357 	.word	0x08005357

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004528:	2b01      	cmp	r3, #1
 800452a:	f040 8166 	bne.w	80047fa <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800452e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004532:	f003 0310 	and.w	r3, r3, #16
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 815f 	beq.w	80047fa <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800453c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004540:	f003 0310 	and.w	r3, r3, #16
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8158 	beq.w	80047fa <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2210      	movs	r2, #16
 8004550:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455c:	2b40      	cmp	r3, #64	@ 0x40
 800455e:	f040 80d0 	bne.w	8004702 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800456e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80ab 	beq.w	80046ce <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800457e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004582:	429a      	cmp	r2, r3
 8004584:	f080 80a3 	bcs.w	80046ce <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800458e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004596:	69db      	ldr	r3, [r3, #28]
 8004598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800459c:	f000 8086 	beq.w	80046ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80045b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80045ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80045ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80045d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80045e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1da      	bne.n	80045a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	3308      	adds	r3, #8
 80045f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80045fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045fc:	f023 0301 	bic.w	r3, r3, #1
 8004600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	3308      	adds	r3, #8
 800460a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800460e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004612:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004616:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e1      	bne.n	80045ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3308      	adds	r3, #8
 800462c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800463c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	3308      	adds	r3, #8
 8004646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800464a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800464c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e3      	bne.n	8004626 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2220      	movs	r2, #32
 8004662:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800467a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800467c:	f023 0310 	bic.w	r3, r3, #16
 8004680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	461a      	mov	r2, r3
 800468a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800468e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004690:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004692:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004696:	e841 2300 	strex	r3, r2, [r1]
 800469a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800469c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d1e4      	bne.n	800466c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046a6:	4618      	mov	r0, r3
 80046a8:	f7fd f856 	bl	8001758 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80046be:	b29b      	uxth	r3, r3
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	4619      	mov	r1, r3
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 f8f2 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80046cc:	e0d3      	b.n	8004876 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80046d8:	429a      	cmp	r2, r3
 80046da:	f040 80cc 	bne.w	8004876 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046e8:	f040 80c5 	bne.w	8004876 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2202      	movs	r2, #2
 80046f0:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 f8d8 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
      return;
 8004700:	e0b9      	b.n	8004876 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800470e:	b29b      	uxth	r3, r3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800471c:	b29b      	uxth	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 80ab 	beq.w	800487a <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8004724:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80a6 	beq.w	800487a <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004736:	e853 3f00 	ldrex	r3, [r3]
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800473e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004742:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	461a      	mov	r2, r3
 800474c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004750:	647b      	str	r3, [r7, #68]	@ 0x44
 8004752:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004756:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800475e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e4      	bne.n	800472e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	623b      	str	r3, [r7, #32]
   return(result);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	3308      	adds	r3, #8
 8004784:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004788:	633a      	str	r2, [r7, #48]	@ 0x30
 800478a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800478e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e3      	bne.n	8004764 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	e853 3f00 	ldrex	r3, [r3]
 80047bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f023 0310 	bic.w	r3, r3, #16
 80047c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80047d2:	61fb      	str	r3, [r7, #28]
 80047d4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	69b9      	ldr	r1, [r7, #24]
 80047d8:	69fa      	ldr	r2, [r7, #28]
 80047da:	e841 2300 	strex	r3, r2, [r1]
 80047de:	617b      	str	r3, [r7, #20]
   return(result);
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1e4      	bne.n	80047b0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80047ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80047f0:	4619      	mov	r1, r3
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f85c 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047f8:	e03f      	b.n	800487a <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80047fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d00e      	beq.n	8004824 <HAL_UART_IRQHandler+0x5a0>
 8004806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800480a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d008      	beq.n	8004824 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800481a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 f853 	bl	80048c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004822:	e02d      	b.n	8004880 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00e      	beq.n	800484e <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004834:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004838:	2b00      	cmp	r3, #0
 800483a:	d008      	beq.n	800484e <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d01c      	beq.n	800487e <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	4798      	blx	r3
    }
    return;
 800484c:	e017      	b.n	800487e <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004852:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004856:	2b00      	cmp	r3, #0
 8004858:	d012      	beq.n	8004880 <HAL_UART_IRQHandler+0x5fc>
 800485a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00c      	beq.n	8004880 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 fd87 	bl	800537a <UART_EndTransmit_IT>
    return;
 800486c:	e008      	b.n	8004880 <HAL_UART_IRQHandler+0x5fc>
      return;
 800486e:	bf00      	nop
 8004870:	e006      	b.n	8004880 <HAL_UART_IRQHandler+0x5fc>
    return;
 8004872:	bf00      	nop
 8004874:	e004      	b.n	8004880 <HAL_UART_IRQHandler+0x5fc>
      return;
 8004876:	bf00      	nop
 8004878:	e002      	b.n	8004880 <HAL_UART_IRQHandler+0x5fc>
      return;
 800487a:	bf00      	nop
 800487c:	e000      	b.n	8004880 <HAL_UART_IRQHandler+0x5fc>
    return;
 800487e:	bf00      	nop
  }

}
 8004880:	37e8      	adds	r7, #232	@ 0xe8
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop

08004888 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048d0:	bf00      	nop
 80048d2:	370c      	adds	r7, #12
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b088      	sub	sp, #32
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80048e4:	2300      	movs	r3, #0
 80048e6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689a      	ldr	r2, [r3, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69db      	ldr	r3, [r3, #28]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681a      	ldr	r2, [r3, #0]
 8004906:	4ba6      	ldr	r3, [pc, #664]	@ (8004ba0 <UART_SetConfig+0x2c4>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	430b      	orrs	r3, r1
 8004912:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	697a      	ldr	r2, [r7, #20]
 8004936:	4313      	orrs	r3, r2
 8004938:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	430a      	orrs	r2, r1
 800494c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a94      	ldr	r2, [pc, #592]	@ (8004ba4 <UART_SetConfig+0x2c8>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d120      	bne.n	800499a <UART_SetConfig+0xbe>
 8004958:	4b93      	ldr	r3, [pc, #588]	@ (8004ba8 <UART_SetConfig+0x2cc>)
 800495a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800495e:	f003 0303 	and.w	r3, r3, #3
 8004962:	2b03      	cmp	r3, #3
 8004964:	d816      	bhi.n	8004994 <UART_SetConfig+0xb8>
 8004966:	a201      	add	r2, pc, #4	@ (adr r2, 800496c <UART_SetConfig+0x90>)
 8004968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800496c:	0800497d 	.word	0x0800497d
 8004970:	08004989 	.word	0x08004989
 8004974:	08004983 	.word	0x08004983
 8004978:	0800498f 	.word	0x0800498f
 800497c:	2301      	movs	r3, #1
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e150      	b.n	8004c24 <UART_SetConfig+0x348>
 8004982:	2302      	movs	r3, #2
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e14d      	b.n	8004c24 <UART_SetConfig+0x348>
 8004988:	2304      	movs	r3, #4
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e14a      	b.n	8004c24 <UART_SetConfig+0x348>
 800498e:	2308      	movs	r3, #8
 8004990:	77fb      	strb	r3, [r7, #31]
 8004992:	e147      	b.n	8004c24 <UART_SetConfig+0x348>
 8004994:	2310      	movs	r3, #16
 8004996:	77fb      	strb	r3, [r7, #31]
 8004998:	e144      	b.n	8004c24 <UART_SetConfig+0x348>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a83      	ldr	r2, [pc, #524]	@ (8004bac <UART_SetConfig+0x2d0>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d132      	bne.n	8004a0a <UART_SetConfig+0x12e>
 80049a4:	4b80      	ldr	r3, [pc, #512]	@ (8004ba8 <UART_SetConfig+0x2cc>)
 80049a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b0c      	cmp	r3, #12
 80049b0:	d828      	bhi.n	8004a04 <UART_SetConfig+0x128>
 80049b2:	a201      	add	r2, pc, #4	@ (adr r2, 80049b8 <UART_SetConfig+0xdc>)
 80049b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b8:	080049ed 	.word	0x080049ed
 80049bc:	08004a05 	.word	0x08004a05
 80049c0:	08004a05 	.word	0x08004a05
 80049c4:	08004a05 	.word	0x08004a05
 80049c8:	080049f9 	.word	0x080049f9
 80049cc:	08004a05 	.word	0x08004a05
 80049d0:	08004a05 	.word	0x08004a05
 80049d4:	08004a05 	.word	0x08004a05
 80049d8:	080049f3 	.word	0x080049f3
 80049dc:	08004a05 	.word	0x08004a05
 80049e0:	08004a05 	.word	0x08004a05
 80049e4:	08004a05 	.word	0x08004a05
 80049e8:	080049ff 	.word	0x080049ff
 80049ec:	2300      	movs	r3, #0
 80049ee:	77fb      	strb	r3, [r7, #31]
 80049f0:	e118      	b.n	8004c24 <UART_SetConfig+0x348>
 80049f2:	2302      	movs	r3, #2
 80049f4:	77fb      	strb	r3, [r7, #31]
 80049f6:	e115      	b.n	8004c24 <UART_SetConfig+0x348>
 80049f8:	2304      	movs	r3, #4
 80049fa:	77fb      	strb	r3, [r7, #31]
 80049fc:	e112      	b.n	8004c24 <UART_SetConfig+0x348>
 80049fe:	2308      	movs	r3, #8
 8004a00:	77fb      	strb	r3, [r7, #31]
 8004a02:	e10f      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a04:	2310      	movs	r3, #16
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e10c      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a68      	ldr	r2, [pc, #416]	@ (8004bb0 <UART_SetConfig+0x2d4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d120      	bne.n	8004a56 <UART_SetConfig+0x17a>
 8004a14:	4b64      	ldr	r3, [pc, #400]	@ (8004ba8 <UART_SetConfig+0x2cc>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004a1e:	2b30      	cmp	r3, #48	@ 0x30
 8004a20:	d013      	beq.n	8004a4a <UART_SetConfig+0x16e>
 8004a22:	2b30      	cmp	r3, #48	@ 0x30
 8004a24:	d814      	bhi.n	8004a50 <UART_SetConfig+0x174>
 8004a26:	2b20      	cmp	r3, #32
 8004a28:	d009      	beq.n	8004a3e <UART_SetConfig+0x162>
 8004a2a:	2b20      	cmp	r3, #32
 8004a2c:	d810      	bhi.n	8004a50 <UART_SetConfig+0x174>
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d002      	beq.n	8004a38 <UART_SetConfig+0x15c>
 8004a32:	2b10      	cmp	r3, #16
 8004a34:	d006      	beq.n	8004a44 <UART_SetConfig+0x168>
 8004a36:	e00b      	b.n	8004a50 <UART_SetConfig+0x174>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	77fb      	strb	r3, [r7, #31]
 8004a3c:	e0f2      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	77fb      	strb	r3, [r7, #31]
 8004a42:	e0ef      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a44:	2304      	movs	r3, #4
 8004a46:	77fb      	strb	r3, [r7, #31]
 8004a48:	e0ec      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	77fb      	strb	r3, [r7, #31]
 8004a4e:	e0e9      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a50:	2310      	movs	r3, #16
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e0e6      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a56      	ldr	r2, [pc, #344]	@ (8004bb4 <UART_SetConfig+0x2d8>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d120      	bne.n	8004aa2 <UART_SetConfig+0x1c6>
 8004a60:	4b51      	ldr	r3, [pc, #324]	@ (8004ba8 <UART_SetConfig+0x2cc>)
 8004a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a66:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a6c:	d013      	beq.n	8004a96 <UART_SetConfig+0x1ba>
 8004a6e:	2bc0      	cmp	r3, #192	@ 0xc0
 8004a70:	d814      	bhi.n	8004a9c <UART_SetConfig+0x1c0>
 8004a72:	2b80      	cmp	r3, #128	@ 0x80
 8004a74:	d009      	beq.n	8004a8a <UART_SetConfig+0x1ae>
 8004a76:	2b80      	cmp	r3, #128	@ 0x80
 8004a78:	d810      	bhi.n	8004a9c <UART_SetConfig+0x1c0>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <UART_SetConfig+0x1a8>
 8004a7e:	2b40      	cmp	r3, #64	@ 0x40
 8004a80:	d006      	beq.n	8004a90 <UART_SetConfig+0x1b4>
 8004a82:	e00b      	b.n	8004a9c <UART_SetConfig+0x1c0>
 8004a84:	2300      	movs	r3, #0
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e0cc      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	77fb      	strb	r3, [r7, #31]
 8004a8e:	e0c9      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a90:	2304      	movs	r3, #4
 8004a92:	77fb      	strb	r3, [r7, #31]
 8004a94:	e0c6      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a96:	2308      	movs	r3, #8
 8004a98:	77fb      	strb	r3, [r7, #31]
 8004a9a:	e0c3      	b.n	8004c24 <UART_SetConfig+0x348>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	77fb      	strb	r3, [r7, #31]
 8004aa0:	e0c0      	b.n	8004c24 <UART_SetConfig+0x348>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a44      	ldr	r2, [pc, #272]	@ (8004bb8 <UART_SetConfig+0x2dc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d125      	bne.n	8004af8 <UART_SetConfig+0x21c>
 8004aac:	4b3e      	ldr	r3, [pc, #248]	@ (8004ba8 <UART_SetConfig+0x2cc>)
 8004aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ab6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004aba:	d017      	beq.n	8004aec <UART_SetConfig+0x210>
 8004abc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004ac0:	d817      	bhi.n	8004af2 <UART_SetConfig+0x216>
 8004ac2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ac6:	d00b      	beq.n	8004ae0 <UART_SetConfig+0x204>
 8004ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004acc:	d811      	bhi.n	8004af2 <UART_SetConfig+0x216>
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <UART_SetConfig+0x1fe>
 8004ad2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad6:	d006      	beq.n	8004ae6 <UART_SetConfig+0x20a>
 8004ad8:	e00b      	b.n	8004af2 <UART_SetConfig+0x216>
 8004ada:	2300      	movs	r3, #0
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e0a1      	b.n	8004c24 <UART_SetConfig+0x348>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	77fb      	strb	r3, [r7, #31]
 8004ae4:	e09e      	b.n	8004c24 <UART_SetConfig+0x348>
 8004ae6:	2304      	movs	r3, #4
 8004ae8:	77fb      	strb	r3, [r7, #31]
 8004aea:	e09b      	b.n	8004c24 <UART_SetConfig+0x348>
 8004aec:	2308      	movs	r3, #8
 8004aee:	77fb      	strb	r3, [r7, #31]
 8004af0:	e098      	b.n	8004c24 <UART_SetConfig+0x348>
 8004af2:	2310      	movs	r3, #16
 8004af4:	77fb      	strb	r3, [r7, #31]
 8004af6:	e095      	b.n	8004c24 <UART_SetConfig+0x348>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a2f      	ldr	r2, [pc, #188]	@ (8004bbc <UART_SetConfig+0x2e0>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d125      	bne.n	8004b4e <UART_SetConfig+0x272>
 8004b02:	4b29      	ldr	r3, [pc, #164]	@ (8004ba8 <UART_SetConfig+0x2cc>)
 8004b04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b08:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004b0c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b10:	d017      	beq.n	8004b42 <UART_SetConfig+0x266>
 8004b12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004b16:	d817      	bhi.n	8004b48 <UART_SetConfig+0x26c>
 8004b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b1c:	d00b      	beq.n	8004b36 <UART_SetConfig+0x25a>
 8004b1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b22:	d811      	bhi.n	8004b48 <UART_SetConfig+0x26c>
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d003      	beq.n	8004b30 <UART_SetConfig+0x254>
 8004b28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b2c:	d006      	beq.n	8004b3c <UART_SetConfig+0x260>
 8004b2e:	e00b      	b.n	8004b48 <UART_SetConfig+0x26c>
 8004b30:	2301      	movs	r3, #1
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e076      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b36:	2302      	movs	r3, #2
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e073      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b3c:	2304      	movs	r3, #4
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e070      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b42:	2308      	movs	r3, #8
 8004b44:	77fb      	strb	r3, [r7, #31]
 8004b46:	e06d      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b48:	2310      	movs	r3, #16
 8004b4a:	77fb      	strb	r3, [r7, #31]
 8004b4c:	e06a      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a1b      	ldr	r2, [pc, #108]	@ (8004bc0 <UART_SetConfig+0x2e4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d138      	bne.n	8004bca <UART_SetConfig+0x2ee>
 8004b58:	4b13      	ldr	r3, [pc, #76]	@ (8004ba8 <UART_SetConfig+0x2cc>)
 8004b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b5e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004b62:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b66:	d017      	beq.n	8004b98 <UART_SetConfig+0x2bc>
 8004b68:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004b6c:	d82a      	bhi.n	8004bc4 <UART_SetConfig+0x2e8>
 8004b6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b72:	d00b      	beq.n	8004b8c <UART_SetConfig+0x2b0>
 8004b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b78:	d824      	bhi.n	8004bc4 <UART_SetConfig+0x2e8>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <UART_SetConfig+0x2aa>
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b82:	d006      	beq.n	8004b92 <UART_SetConfig+0x2b6>
 8004b84:	e01e      	b.n	8004bc4 <UART_SetConfig+0x2e8>
 8004b86:	2300      	movs	r3, #0
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e04b      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e048      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b92:	2304      	movs	r3, #4
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e045      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b98:	2308      	movs	r3, #8
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e042      	b.n	8004c24 <UART_SetConfig+0x348>
 8004b9e:	bf00      	nop
 8004ba0:	efff69f3 	.word	0xefff69f3
 8004ba4:	40011000 	.word	0x40011000
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	40004400 	.word	0x40004400
 8004bb0:	40004800 	.word	0x40004800
 8004bb4:	40004c00 	.word	0x40004c00
 8004bb8:	40005000 	.word	0x40005000
 8004bbc:	40011400 	.word	0x40011400
 8004bc0:	40007800 	.word	0x40007800
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	77fb      	strb	r3, [r7, #31]
 8004bc8:	e02c      	b.n	8004c24 <UART_SetConfig+0x348>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a72      	ldr	r2, [pc, #456]	@ (8004d98 <UART_SetConfig+0x4bc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d125      	bne.n	8004c20 <UART_SetConfig+0x344>
 8004bd4:	4b71      	ldr	r3, [pc, #452]	@ (8004d9c <UART_SetConfig+0x4c0>)
 8004bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bda:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004bde:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004be2:	d017      	beq.n	8004c14 <UART_SetConfig+0x338>
 8004be4:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004be8:	d817      	bhi.n	8004c1a <UART_SetConfig+0x33e>
 8004bea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bee:	d00b      	beq.n	8004c08 <UART_SetConfig+0x32c>
 8004bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf4:	d811      	bhi.n	8004c1a <UART_SetConfig+0x33e>
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <UART_SetConfig+0x326>
 8004bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bfe:	d006      	beq.n	8004c0e <UART_SetConfig+0x332>
 8004c00:	e00b      	b.n	8004c1a <UART_SetConfig+0x33e>
 8004c02:	2300      	movs	r3, #0
 8004c04:	77fb      	strb	r3, [r7, #31]
 8004c06:	e00d      	b.n	8004c24 <UART_SetConfig+0x348>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	77fb      	strb	r3, [r7, #31]
 8004c0c:	e00a      	b.n	8004c24 <UART_SetConfig+0x348>
 8004c0e:	2304      	movs	r3, #4
 8004c10:	77fb      	strb	r3, [r7, #31]
 8004c12:	e007      	b.n	8004c24 <UART_SetConfig+0x348>
 8004c14:	2308      	movs	r3, #8
 8004c16:	77fb      	strb	r3, [r7, #31]
 8004c18:	e004      	b.n	8004c24 <UART_SetConfig+0x348>
 8004c1a:	2310      	movs	r3, #16
 8004c1c:	77fb      	strb	r3, [r7, #31]
 8004c1e:	e001      	b.n	8004c24 <UART_SetConfig+0x348>
 8004c20:	2310      	movs	r3, #16
 8004c22:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c2c:	d15b      	bne.n	8004ce6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004c2e:	7ffb      	ldrb	r3, [r7, #31]
 8004c30:	2b08      	cmp	r3, #8
 8004c32:	d828      	bhi.n	8004c86 <UART_SetConfig+0x3aa>
 8004c34:	a201      	add	r2, pc, #4	@ (adr r2, 8004c3c <UART_SetConfig+0x360>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c61 	.word	0x08004c61
 8004c40:	08004c69 	.word	0x08004c69
 8004c44:	08004c71 	.word	0x08004c71
 8004c48:	08004c87 	.word	0x08004c87
 8004c4c:	08004c77 	.word	0x08004c77
 8004c50:	08004c87 	.word	0x08004c87
 8004c54:	08004c87 	.word	0x08004c87
 8004c58:	08004c87 	.word	0x08004c87
 8004c5c:	08004c7f 	.word	0x08004c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c60:	f7fd ff36 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004c64:	61b8      	str	r0, [r7, #24]
        break;
 8004c66:	e013      	b.n	8004c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c68:	f7fd ff46 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8004c6c:	61b8      	str	r0, [r7, #24]
        break;
 8004c6e:	e00f      	b.n	8004c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c70:	4b4b      	ldr	r3, [pc, #300]	@ (8004da0 <UART_SetConfig+0x4c4>)
 8004c72:	61bb      	str	r3, [r7, #24]
        break;
 8004c74:	e00c      	b.n	8004c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c76:	f7fd fe1b 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8004c7a:	61b8      	str	r0, [r7, #24]
        break;
 8004c7c:	e008      	b.n	8004c90 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c82:	61bb      	str	r3, [r7, #24]
        break;
 8004c84:	e004      	b.n	8004c90 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c8e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d074      	beq.n	8004d80 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	005a      	lsls	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	085b      	lsrs	r3, r3, #1
 8004ca0:	441a      	add	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b0f      	cmp	r3, #15
 8004cb0:	d916      	bls.n	8004ce0 <UART_SetConfig+0x404>
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb8:	d212      	bcs.n	8004ce0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f023 030f 	bic.w	r3, r3, #15
 8004cc2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	085b      	lsrs	r3, r3, #1
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	f003 0307 	and.w	r3, r3, #7
 8004cce:	b29a      	uxth	r2, r3
 8004cd0:	89fb      	ldrh	r3, [r7, #14]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	89fa      	ldrh	r2, [r7, #14]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	e04f      	b.n	8004d80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77bb      	strb	r3, [r7, #30]
 8004ce4:	e04c      	b.n	8004d80 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ce6:	7ffb      	ldrb	r3, [r7, #31]
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d828      	bhi.n	8004d3e <UART_SetConfig+0x462>
 8004cec:	a201      	add	r2, pc, #4	@ (adr r2, 8004cf4 <UART_SetConfig+0x418>)
 8004cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf2:	bf00      	nop
 8004cf4:	08004d19 	.word	0x08004d19
 8004cf8:	08004d21 	.word	0x08004d21
 8004cfc:	08004d29 	.word	0x08004d29
 8004d00:	08004d3f 	.word	0x08004d3f
 8004d04:	08004d2f 	.word	0x08004d2f
 8004d08:	08004d3f 	.word	0x08004d3f
 8004d0c:	08004d3f 	.word	0x08004d3f
 8004d10:	08004d3f 	.word	0x08004d3f
 8004d14:	08004d37 	.word	0x08004d37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d18:	f7fd feda 	bl	8002ad0 <HAL_RCC_GetPCLK1Freq>
 8004d1c:	61b8      	str	r0, [r7, #24]
        break;
 8004d1e:	e013      	b.n	8004d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d20:	f7fd feea 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
 8004d24:	61b8      	str	r0, [r7, #24]
        break;
 8004d26:	e00f      	b.n	8004d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <UART_SetConfig+0x4c4>)
 8004d2a:	61bb      	str	r3, [r7, #24]
        break;
 8004d2c:	e00c      	b.n	8004d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d2e:	f7fd fdbf 	bl	80028b0 <HAL_RCC_GetSysClockFreq>
 8004d32:	61b8      	str	r0, [r7, #24]
        break;
 8004d34:	e008      	b.n	8004d48 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d36:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d3a:	61bb      	str	r3, [r7, #24]
        break;
 8004d3c:	e004      	b.n	8004d48 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	77bb      	strb	r3, [r7, #30]
        break;
 8004d46:	bf00      	nop
    }

    if (pclk != 0U)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d018      	beq.n	8004d80 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	085a      	lsrs	r2, r3, #1
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	441a      	add	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d60:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	2b0f      	cmp	r3, #15
 8004d66:	d909      	bls.n	8004d7c <UART_SetConfig+0x4a0>
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d6e:	d205      	bcs.n	8004d7c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	60da      	str	r2, [r3, #12]
 8004d7a:	e001      	b.n	8004d80 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004d8c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	40007c00 	.word	0x40007c00
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	00f42400 	.word	0x00f42400

08004da4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	430a      	orrs	r2, r1
 8004dcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00a      	beq.n	8004df0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	f003 0302 	and.w	r3, r3, #2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d00a      	beq.n	8004e12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	430a      	orrs	r2, r1
 8004e10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	f003 0304 	and.w	r3, r3, #4
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d00a      	beq.n	8004e34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	f003 0320 	and.w	r3, r3, #32
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d01a      	beq.n	8004eba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ea2:	d10a      	bne.n	8004eba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00a      	beq.n	8004edc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	605a      	str	r2, [r3, #4]
  }
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b098      	sub	sp, #96	@ 0x60
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ef8:	f7fc f9de 	bl	80012b8 <HAL_GetTick>
 8004efc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0308 	and.w	r3, r3, #8
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d12e      	bne.n	8004f6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f14:	2200      	movs	r2, #0
 8004f16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f88c 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d021      	beq.n	8004f6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f2e:	e853 3f00 	ldrex	r3, [r3]
 8004f32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	461a      	mov	r2, r3
 8004f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f46:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f4c:	e841 2300 	strex	r3, r2, [r1]
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1e6      	bne.n	8004f26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2220      	movs	r2, #32
 8004f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e062      	b.n	8005030 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b04      	cmp	r3, #4
 8004f76:	d149      	bne.n	800500c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f80:	2200      	movs	r2, #0
 8004f82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f856 	bl	8005038 <UART_WaitOnFlagUntilTimeout>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d03c      	beq.n	800500c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3308      	adds	r3, #8
 8004fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	e853 3f00 	ldrex	r3, [r3]
 8004fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f023 0301 	bic.w	r3, r3, #1
 8004fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	3308      	adds	r3, #8
 8004fe2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fe4:	61fa      	str	r2, [r7, #28]
 8004fe6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe8:	69b9      	ldr	r1, [r7, #24]
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	e841 2300 	strex	r3, r2, [r1]
 8004ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d1e5      	bne.n	8004fc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2220      	movs	r2, #32
 8004ffc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e011      	b.n	8005030 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2220      	movs	r2, #32
 8005016:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3758      	adds	r7, #88	@ 0x58
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	60f8      	str	r0, [r7, #12]
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	603b      	str	r3, [r7, #0]
 8005044:	4613      	mov	r3, r2
 8005046:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	e04f      	b.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005050:	d04b      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005052:	f7fc f931 	bl	80012b8 <HAL_GetTick>
 8005056:	4602      	mov	r2, r0
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	429a      	cmp	r2, r3
 8005060:	d302      	bcc.n	8005068 <UART_WaitOnFlagUntilTimeout+0x30>
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e04e      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0304 	and.w	r3, r3, #4
 8005076:	2b00      	cmp	r3, #0
 8005078:	d037      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b80      	cmp	r3, #128	@ 0x80
 800507e:	d034      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b40      	cmp	r3, #64	@ 0x40
 8005084:	d031      	beq.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69db      	ldr	r3, [r3, #28]
 800508c:	f003 0308 	and.w	r3, r3, #8
 8005090:	2b08      	cmp	r3, #8
 8005092:	d110      	bne.n	80050b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2208      	movs	r2, #8
 800509a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800509c:	68f8      	ldr	r0, [r7, #12]
 800509e:	f000 f85e 	bl	800515e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	2208      	movs	r2, #8
 80050a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e029      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69db      	ldr	r3, [r3, #28]
 80050bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c4:	d111      	bne.n	80050ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f000 f844 	bl	800515e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2220      	movs	r2, #32
 80050da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2200      	movs	r2, #0
 80050e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e00f      	b.n	800510a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4013      	ands	r3, r2
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	bf0c      	ite	eq
 80050fa:	2301      	moveq	r3, #1
 80050fc:	2300      	movne	r3, #0
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	461a      	mov	r2, r3
 8005102:	79fb      	ldrb	r3, [r7, #7]
 8005104:	429a      	cmp	r2, r3
 8005106:	d0a0      	beq.n	800504a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3710      	adds	r7, #16
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005112:	b480      	push	{r7}
 8005114:	b089      	sub	sp, #36	@ 0x24
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	60bb      	str	r3, [r7, #8]
   return(result);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	6979      	ldr	r1, [r7, #20]
 800513e:	69ba      	ldr	r2, [r7, #24]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	613b      	str	r3, [r7, #16]
   return(result);
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8005152:	bf00      	nop
 8005154:	3724      	adds	r7, #36	@ 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800515e:	b480      	push	{r7}
 8005160:	b095      	sub	sp, #84	@ 0x54
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005176:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800517a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005184:	643b      	str	r3, [r7, #64]	@ 0x40
 8005186:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800518a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3308      	adds	r3, #8
 800519e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a0:	6a3b      	ldr	r3, [r7, #32]
 80051a2:	e853 3f00 	ldrex	r3, [r3]
 80051a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80051a8:	69fb      	ldr	r3, [r7, #28]
 80051aa:	f023 0301 	bic.w	r3, r3, #1
 80051ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3308      	adds	r3, #8
 80051b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051c0:	e841 2300 	strex	r3, r2, [r1]
 80051c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80051c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1e5      	bne.n	8005198 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d118      	bne.n	8005206 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	f023 0310 	bic.w	r3, r3, #16
 80051e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	461a      	mov	r2, r3
 80051f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051f2:	61bb      	str	r3, [r7, #24]
 80051f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6979      	ldr	r1, [r7, #20]
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	613b      	str	r3, [r7, #16]
   return(result);
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e6      	bne.n	80051d4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2220      	movs	r2, #32
 800520a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800521a:	bf00      	nop
 800521c:	3754      	adds	r7, #84	@ 0x54
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b090      	sub	sp, #64	@ 0x40
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005232:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
 8005238:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800523c:	d037      	beq.n	80052ae <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800523e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005240:	2200      	movs	r2, #0
 8005242:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005246:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3308      	adds	r3, #8
 800524c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	623b      	str	r3, [r7, #32]
   return(result);
 8005256:	6a3b      	ldr	r3, [r7, #32]
 8005258:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800525c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800525e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	3308      	adds	r3, #8
 8005264:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005266:	633a      	str	r2, [r7, #48]	@ 0x30
 8005268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800526c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e5      	bne.n	8005246 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800527a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	60fb      	str	r3, [r7, #12]
   return(result);
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800528e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005298:	61fb      	str	r3, [r7, #28]
 800529a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	69b9      	ldr	r1, [r7, #24]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	617b      	str	r3, [r7, #20]
   return(result);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80052ac:	e002      	b.n	80052b4 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80052ae:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80052b0:	f7fb fd2c 	bl	8000d0c <HAL_UART_TxCpltCallback>
}
 80052b4:	bf00      	nop
 80052b6:	3740      	adds	r7, #64	@ 0x40
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fadc 	bl	8004888 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052d0:	bf00      	nop
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052e4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052fe:	2b80      	cmp	r3, #128	@ 0x80
 8005300:	d109      	bne.n	8005316 <UART_DMAError+0x3e>
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	2b21      	cmp	r3, #33	@ 0x21
 8005306:	d106      	bne.n	8005316 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	2200      	movs	r2, #0
 800530c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005310:	6978      	ldr	r0, [r7, #20]
 8005312:	f7ff fefe 	bl	8005112 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005320:	2b40      	cmp	r3, #64	@ 0x40
 8005322:	d109      	bne.n	8005338 <UART_DMAError+0x60>
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b22      	cmp	r3, #34	@ 0x22
 8005328:	d106      	bne.n	8005338 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2200      	movs	r2, #0
 800532e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005332:	6978      	ldr	r0, [r7, #20]
 8005334:	f7ff ff13 	bl	800515e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800533e:	f043 0210 	orr.w	r2, r3, #16
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005348:	6978      	ldr	r0, [r7, #20]
 800534a:	f7ff faa7 	bl	800489c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800534e:	bf00      	nop
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005362:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f7ff fa95 	bl	800489c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005372:	bf00      	nop
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b088      	sub	sp, #32
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005396:	61fb      	str	r3, [r7, #28]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	69fb      	ldr	r3, [r7, #28]
 80053a0:	61bb      	str	r3, [r7, #24]
 80053a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	6979      	ldr	r1, [r7, #20]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	613b      	str	r3, [r7, #16]
   return(result);
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f7fb fca3 	bl	8000d0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053c6:	bf00      	nop
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <siprintf>:
 80053d0:	b40e      	push	{r1, r2, r3}
 80053d2:	b510      	push	{r4, lr}
 80053d4:	b09d      	sub	sp, #116	@ 0x74
 80053d6:	ab1f      	add	r3, sp, #124	@ 0x7c
 80053d8:	9002      	str	r0, [sp, #8]
 80053da:	9006      	str	r0, [sp, #24]
 80053dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053e0:	480a      	ldr	r0, [pc, #40]	@ (800540c <siprintf+0x3c>)
 80053e2:	9107      	str	r1, [sp, #28]
 80053e4:	9104      	str	r1, [sp, #16]
 80053e6:	490a      	ldr	r1, [pc, #40]	@ (8005410 <siprintf+0x40>)
 80053e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053ec:	9105      	str	r1, [sp, #20]
 80053ee:	2400      	movs	r4, #0
 80053f0:	a902      	add	r1, sp, #8
 80053f2:	6800      	ldr	r0, [r0, #0]
 80053f4:	9301      	str	r3, [sp, #4]
 80053f6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80053f8:	f000 f9a2 	bl	8005740 <_svfiprintf_r>
 80053fc:	9b02      	ldr	r3, [sp, #8]
 80053fe:	701c      	strb	r4, [r3, #0]
 8005400:	b01d      	add	sp, #116	@ 0x74
 8005402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005406:	b003      	add	sp, #12
 8005408:	4770      	bx	lr
 800540a:	bf00      	nop
 800540c:	2000000c 	.word	0x2000000c
 8005410:	ffff0208 	.word	0xffff0208

08005414 <memset>:
 8005414:	4402      	add	r2, r0
 8005416:	4603      	mov	r3, r0
 8005418:	4293      	cmp	r3, r2
 800541a:	d100      	bne.n	800541e <memset+0xa>
 800541c:	4770      	bx	lr
 800541e:	f803 1b01 	strb.w	r1, [r3], #1
 8005422:	e7f9      	b.n	8005418 <memset+0x4>

08005424 <__errno>:
 8005424:	4b01      	ldr	r3, [pc, #4]	@ (800542c <__errno+0x8>)
 8005426:	6818      	ldr	r0, [r3, #0]
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	2000000c 	.word	0x2000000c

08005430 <__libc_init_array>:
 8005430:	b570      	push	{r4, r5, r6, lr}
 8005432:	4d0d      	ldr	r5, [pc, #52]	@ (8005468 <__libc_init_array+0x38>)
 8005434:	4c0d      	ldr	r4, [pc, #52]	@ (800546c <__libc_init_array+0x3c>)
 8005436:	1b64      	subs	r4, r4, r5
 8005438:	10a4      	asrs	r4, r4, #2
 800543a:	2600      	movs	r6, #0
 800543c:	42a6      	cmp	r6, r4
 800543e:	d109      	bne.n	8005454 <__libc_init_array+0x24>
 8005440:	4d0b      	ldr	r5, [pc, #44]	@ (8005470 <__libc_init_array+0x40>)
 8005442:	4c0c      	ldr	r4, [pc, #48]	@ (8005474 <__libc_init_array+0x44>)
 8005444:	f000 fc64 	bl	8005d10 <_init>
 8005448:	1b64      	subs	r4, r4, r5
 800544a:	10a4      	asrs	r4, r4, #2
 800544c:	2600      	movs	r6, #0
 800544e:	42a6      	cmp	r6, r4
 8005450:	d105      	bne.n	800545e <__libc_init_array+0x2e>
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	f855 3b04 	ldr.w	r3, [r5], #4
 8005458:	4798      	blx	r3
 800545a:	3601      	adds	r6, #1
 800545c:	e7ee      	b.n	800543c <__libc_init_array+0xc>
 800545e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005462:	4798      	blx	r3
 8005464:	3601      	adds	r6, #1
 8005466:	e7f2      	b.n	800544e <__libc_init_array+0x1e>
 8005468:	08005d8c 	.word	0x08005d8c
 800546c:	08005d8c 	.word	0x08005d8c
 8005470:	08005d8c 	.word	0x08005d8c
 8005474:	08005d90 	.word	0x08005d90

08005478 <__retarget_lock_acquire_recursive>:
 8005478:	4770      	bx	lr

0800547a <__retarget_lock_release_recursive>:
 800547a:	4770      	bx	lr

0800547c <memcpy>:
 800547c:	440a      	add	r2, r1
 800547e:	4291      	cmp	r1, r2
 8005480:	f100 33ff 	add.w	r3, r0, #4294967295
 8005484:	d100      	bne.n	8005488 <memcpy+0xc>
 8005486:	4770      	bx	lr
 8005488:	b510      	push	{r4, lr}
 800548a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800548e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005492:	4291      	cmp	r1, r2
 8005494:	d1f9      	bne.n	800548a <memcpy+0xe>
 8005496:	bd10      	pop	{r4, pc}

08005498 <_free_r>:
 8005498:	b538      	push	{r3, r4, r5, lr}
 800549a:	4605      	mov	r5, r0
 800549c:	2900      	cmp	r1, #0
 800549e:	d041      	beq.n	8005524 <_free_r+0x8c>
 80054a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054a4:	1f0c      	subs	r4, r1, #4
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bfb8      	it	lt
 80054aa:	18e4      	addlt	r4, r4, r3
 80054ac:	f000 f8e0 	bl	8005670 <__malloc_lock>
 80054b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005528 <_free_r+0x90>)
 80054b2:	6813      	ldr	r3, [r2, #0]
 80054b4:	b933      	cbnz	r3, 80054c4 <_free_r+0x2c>
 80054b6:	6063      	str	r3, [r4, #4]
 80054b8:	6014      	str	r4, [r2, #0]
 80054ba:	4628      	mov	r0, r5
 80054bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054c0:	f000 b8dc 	b.w	800567c <__malloc_unlock>
 80054c4:	42a3      	cmp	r3, r4
 80054c6:	d908      	bls.n	80054da <_free_r+0x42>
 80054c8:	6820      	ldr	r0, [r4, #0]
 80054ca:	1821      	adds	r1, r4, r0
 80054cc:	428b      	cmp	r3, r1
 80054ce:	bf01      	itttt	eq
 80054d0:	6819      	ldreq	r1, [r3, #0]
 80054d2:	685b      	ldreq	r3, [r3, #4]
 80054d4:	1809      	addeq	r1, r1, r0
 80054d6:	6021      	streq	r1, [r4, #0]
 80054d8:	e7ed      	b.n	80054b6 <_free_r+0x1e>
 80054da:	461a      	mov	r2, r3
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	b10b      	cbz	r3, 80054e4 <_free_r+0x4c>
 80054e0:	42a3      	cmp	r3, r4
 80054e2:	d9fa      	bls.n	80054da <_free_r+0x42>
 80054e4:	6811      	ldr	r1, [r2, #0]
 80054e6:	1850      	adds	r0, r2, r1
 80054e8:	42a0      	cmp	r0, r4
 80054ea:	d10b      	bne.n	8005504 <_free_r+0x6c>
 80054ec:	6820      	ldr	r0, [r4, #0]
 80054ee:	4401      	add	r1, r0
 80054f0:	1850      	adds	r0, r2, r1
 80054f2:	4283      	cmp	r3, r0
 80054f4:	6011      	str	r1, [r2, #0]
 80054f6:	d1e0      	bne.n	80054ba <_free_r+0x22>
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	6053      	str	r3, [r2, #4]
 80054fe:	4408      	add	r0, r1
 8005500:	6010      	str	r0, [r2, #0]
 8005502:	e7da      	b.n	80054ba <_free_r+0x22>
 8005504:	d902      	bls.n	800550c <_free_r+0x74>
 8005506:	230c      	movs	r3, #12
 8005508:	602b      	str	r3, [r5, #0]
 800550a:	e7d6      	b.n	80054ba <_free_r+0x22>
 800550c:	6820      	ldr	r0, [r4, #0]
 800550e:	1821      	adds	r1, r4, r0
 8005510:	428b      	cmp	r3, r1
 8005512:	bf04      	itt	eq
 8005514:	6819      	ldreq	r1, [r3, #0]
 8005516:	685b      	ldreq	r3, [r3, #4]
 8005518:	6063      	str	r3, [r4, #4]
 800551a:	bf04      	itt	eq
 800551c:	1809      	addeq	r1, r1, r0
 800551e:	6021      	streq	r1, [r4, #0]
 8005520:	6054      	str	r4, [r2, #4]
 8005522:	e7ca      	b.n	80054ba <_free_r+0x22>
 8005524:	bd38      	pop	{r3, r4, r5, pc}
 8005526:	bf00      	nop
 8005528:	20012bd8 	.word	0x20012bd8

0800552c <sbrk_aligned>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4e0f      	ldr	r6, [pc, #60]	@ (800556c <sbrk_aligned+0x40>)
 8005530:	460c      	mov	r4, r1
 8005532:	6831      	ldr	r1, [r6, #0]
 8005534:	4605      	mov	r5, r0
 8005536:	b911      	cbnz	r1, 800553e <sbrk_aligned+0x12>
 8005538:	f000 fba4 	bl	8005c84 <_sbrk_r>
 800553c:	6030      	str	r0, [r6, #0]
 800553e:	4621      	mov	r1, r4
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fb9f 	bl	8005c84 <_sbrk_r>
 8005546:	1c43      	adds	r3, r0, #1
 8005548:	d103      	bne.n	8005552 <sbrk_aligned+0x26>
 800554a:	f04f 34ff 	mov.w	r4, #4294967295
 800554e:	4620      	mov	r0, r4
 8005550:	bd70      	pop	{r4, r5, r6, pc}
 8005552:	1cc4      	adds	r4, r0, #3
 8005554:	f024 0403 	bic.w	r4, r4, #3
 8005558:	42a0      	cmp	r0, r4
 800555a:	d0f8      	beq.n	800554e <sbrk_aligned+0x22>
 800555c:	1a21      	subs	r1, r4, r0
 800555e:	4628      	mov	r0, r5
 8005560:	f000 fb90 	bl	8005c84 <_sbrk_r>
 8005564:	3001      	adds	r0, #1
 8005566:	d1f2      	bne.n	800554e <sbrk_aligned+0x22>
 8005568:	e7ef      	b.n	800554a <sbrk_aligned+0x1e>
 800556a:	bf00      	nop
 800556c:	20012bd4 	.word	0x20012bd4

08005570 <_malloc_r>:
 8005570:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005574:	1ccd      	adds	r5, r1, #3
 8005576:	f025 0503 	bic.w	r5, r5, #3
 800557a:	3508      	adds	r5, #8
 800557c:	2d0c      	cmp	r5, #12
 800557e:	bf38      	it	cc
 8005580:	250c      	movcc	r5, #12
 8005582:	2d00      	cmp	r5, #0
 8005584:	4606      	mov	r6, r0
 8005586:	db01      	blt.n	800558c <_malloc_r+0x1c>
 8005588:	42a9      	cmp	r1, r5
 800558a:	d904      	bls.n	8005596 <_malloc_r+0x26>
 800558c:	230c      	movs	r3, #12
 800558e:	6033      	str	r3, [r6, #0]
 8005590:	2000      	movs	r0, #0
 8005592:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005596:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800566c <_malloc_r+0xfc>
 800559a:	f000 f869 	bl	8005670 <__malloc_lock>
 800559e:	f8d8 3000 	ldr.w	r3, [r8]
 80055a2:	461c      	mov	r4, r3
 80055a4:	bb44      	cbnz	r4, 80055f8 <_malloc_r+0x88>
 80055a6:	4629      	mov	r1, r5
 80055a8:	4630      	mov	r0, r6
 80055aa:	f7ff ffbf 	bl	800552c <sbrk_aligned>
 80055ae:	1c43      	adds	r3, r0, #1
 80055b0:	4604      	mov	r4, r0
 80055b2:	d158      	bne.n	8005666 <_malloc_r+0xf6>
 80055b4:	f8d8 4000 	ldr.w	r4, [r8]
 80055b8:	4627      	mov	r7, r4
 80055ba:	2f00      	cmp	r7, #0
 80055bc:	d143      	bne.n	8005646 <_malloc_r+0xd6>
 80055be:	2c00      	cmp	r4, #0
 80055c0:	d04b      	beq.n	800565a <_malloc_r+0xea>
 80055c2:	6823      	ldr	r3, [r4, #0]
 80055c4:	4639      	mov	r1, r7
 80055c6:	4630      	mov	r0, r6
 80055c8:	eb04 0903 	add.w	r9, r4, r3
 80055cc:	f000 fb5a 	bl	8005c84 <_sbrk_r>
 80055d0:	4581      	cmp	r9, r0
 80055d2:	d142      	bne.n	800565a <_malloc_r+0xea>
 80055d4:	6821      	ldr	r1, [r4, #0]
 80055d6:	1a6d      	subs	r5, r5, r1
 80055d8:	4629      	mov	r1, r5
 80055da:	4630      	mov	r0, r6
 80055dc:	f7ff ffa6 	bl	800552c <sbrk_aligned>
 80055e0:	3001      	adds	r0, #1
 80055e2:	d03a      	beq.n	800565a <_malloc_r+0xea>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	442b      	add	r3, r5
 80055e8:	6023      	str	r3, [r4, #0]
 80055ea:	f8d8 3000 	ldr.w	r3, [r8]
 80055ee:	685a      	ldr	r2, [r3, #4]
 80055f0:	bb62      	cbnz	r2, 800564c <_malloc_r+0xdc>
 80055f2:	f8c8 7000 	str.w	r7, [r8]
 80055f6:	e00f      	b.n	8005618 <_malloc_r+0xa8>
 80055f8:	6822      	ldr	r2, [r4, #0]
 80055fa:	1b52      	subs	r2, r2, r5
 80055fc:	d420      	bmi.n	8005640 <_malloc_r+0xd0>
 80055fe:	2a0b      	cmp	r2, #11
 8005600:	d917      	bls.n	8005632 <_malloc_r+0xc2>
 8005602:	1961      	adds	r1, r4, r5
 8005604:	42a3      	cmp	r3, r4
 8005606:	6025      	str	r5, [r4, #0]
 8005608:	bf18      	it	ne
 800560a:	6059      	strne	r1, [r3, #4]
 800560c:	6863      	ldr	r3, [r4, #4]
 800560e:	bf08      	it	eq
 8005610:	f8c8 1000 	streq.w	r1, [r8]
 8005614:	5162      	str	r2, [r4, r5]
 8005616:	604b      	str	r3, [r1, #4]
 8005618:	4630      	mov	r0, r6
 800561a:	f000 f82f 	bl	800567c <__malloc_unlock>
 800561e:	f104 000b 	add.w	r0, r4, #11
 8005622:	1d23      	adds	r3, r4, #4
 8005624:	f020 0007 	bic.w	r0, r0, #7
 8005628:	1ac2      	subs	r2, r0, r3
 800562a:	bf1c      	itt	ne
 800562c:	1a1b      	subne	r3, r3, r0
 800562e:	50a3      	strne	r3, [r4, r2]
 8005630:	e7af      	b.n	8005592 <_malloc_r+0x22>
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	42a3      	cmp	r3, r4
 8005636:	bf0c      	ite	eq
 8005638:	f8c8 2000 	streq.w	r2, [r8]
 800563c:	605a      	strne	r2, [r3, #4]
 800563e:	e7eb      	b.n	8005618 <_malloc_r+0xa8>
 8005640:	4623      	mov	r3, r4
 8005642:	6864      	ldr	r4, [r4, #4]
 8005644:	e7ae      	b.n	80055a4 <_malloc_r+0x34>
 8005646:	463c      	mov	r4, r7
 8005648:	687f      	ldr	r7, [r7, #4]
 800564a:	e7b6      	b.n	80055ba <_malloc_r+0x4a>
 800564c:	461a      	mov	r2, r3
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	42a3      	cmp	r3, r4
 8005652:	d1fb      	bne.n	800564c <_malloc_r+0xdc>
 8005654:	2300      	movs	r3, #0
 8005656:	6053      	str	r3, [r2, #4]
 8005658:	e7de      	b.n	8005618 <_malloc_r+0xa8>
 800565a:	230c      	movs	r3, #12
 800565c:	6033      	str	r3, [r6, #0]
 800565e:	4630      	mov	r0, r6
 8005660:	f000 f80c 	bl	800567c <__malloc_unlock>
 8005664:	e794      	b.n	8005590 <_malloc_r+0x20>
 8005666:	6005      	str	r5, [r0, #0]
 8005668:	e7d6      	b.n	8005618 <_malloc_r+0xa8>
 800566a:	bf00      	nop
 800566c:	20012bd8 	.word	0x20012bd8

08005670 <__malloc_lock>:
 8005670:	4801      	ldr	r0, [pc, #4]	@ (8005678 <__malloc_lock+0x8>)
 8005672:	f7ff bf01 	b.w	8005478 <__retarget_lock_acquire_recursive>
 8005676:	bf00      	nop
 8005678:	20012bd0 	.word	0x20012bd0

0800567c <__malloc_unlock>:
 800567c:	4801      	ldr	r0, [pc, #4]	@ (8005684 <__malloc_unlock+0x8>)
 800567e:	f7ff befc 	b.w	800547a <__retarget_lock_release_recursive>
 8005682:	bf00      	nop
 8005684:	20012bd0 	.word	0x20012bd0

08005688 <__ssputs_r>:
 8005688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800568c:	688e      	ldr	r6, [r1, #8]
 800568e:	461f      	mov	r7, r3
 8005690:	42be      	cmp	r6, r7
 8005692:	680b      	ldr	r3, [r1, #0]
 8005694:	4682      	mov	sl, r0
 8005696:	460c      	mov	r4, r1
 8005698:	4690      	mov	r8, r2
 800569a:	d82d      	bhi.n	80056f8 <__ssputs_r+0x70>
 800569c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80056a0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80056a4:	d026      	beq.n	80056f4 <__ssputs_r+0x6c>
 80056a6:	6965      	ldr	r5, [r4, #20]
 80056a8:	6909      	ldr	r1, [r1, #16]
 80056aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80056ae:	eba3 0901 	sub.w	r9, r3, r1
 80056b2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80056b6:	1c7b      	adds	r3, r7, #1
 80056b8:	444b      	add	r3, r9
 80056ba:	106d      	asrs	r5, r5, #1
 80056bc:	429d      	cmp	r5, r3
 80056be:	bf38      	it	cc
 80056c0:	461d      	movcc	r5, r3
 80056c2:	0553      	lsls	r3, r2, #21
 80056c4:	d527      	bpl.n	8005716 <__ssputs_r+0x8e>
 80056c6:	4629      	mov	r1, r5
 80056c8:	f7ff ff52 	bl	8005570 <_malloc_r>
 80056cc:	4606      	mov	r6, r0
 80056ce:	b360      	cbz	r0, 800572a <__ssputs_r+0xa2>
 80056d0:	6921      	ldr	r1, [r4, #16]
 80056d2:	464a      	mov	r2, r9
 80056d4:	f7ff fed2 	bl	800547c <memcpy>
 80056d8:	89a3      	ldrh	r3, [r4, #12]
 80056da:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80056de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056e2:	81a3      	strh	r3, [r4, #12]
 80056e4:	6126      	str	r6, [r4, #16]
 80056e6:	6165      	str	r5, [r4, #20]
 80056e8:	444e      	add	r6, r9
 80056ea:	eba5 0509 	sub.w	r5, r5, r9
 80056ee:	6026      	str	r6, [r4, #0]
 80056f0:	60a5      	str	r5, [r4, #8]
 80056f2:	463e      	mov	r6, r7
 80056f4:	42be      	cmp	r6, r7
 80056f6:	d900      	bls.n	80056fa <__ssputs_r+0x72>
 80056f8:	463e      	mov	r6, r7
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	4632      	mov	r2, r6
 80056fe:	4641      	mov	r1, r8
 8005700:	f000 faa6 	bl	8005c50 <memmove>
 8005704:	68a3      	ldr	r3, [r4, #8]
 8005706:	1b9b      	subs	r3, r3, r6
 8005708:	60a3      	str	r3, [r4, #8]
 800570a:	6823      	ldr	r3, [r4, #0]
 800570c:	4433      	add	r3, r6
 800570e:	6023      	str	r3, [r4, #0]
 8005710:	2000      	movs	r0, #0
 8005712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005716:	462a      	mov	r2, r5
 8005718:	f000 fac4 	bl	8005ca4 <_realloc_r>
 800571c:	4606      	mov	r6, r0
 800571e:	2800      	cmp	r0, #0
 8005720:	d1e0      	bne.n	80056e4 <__ssputs_r+0x5c>
 8005722:	6921      	ldr	r1, [r4, #16]
 8005724:	4650      	mov	r0, sl
 8005726:	f7ff feb7 	bl	8005498 <_free_r>
 800572a:	230c      	movs	r3, #12
 800572c:	f8ca 3000 	str.w	r3, [sl]
 8005730:	89a3      	ldrh	r3, [r4, #12]
 8005732:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005736:	81a3      	strh	r3, [r4, #12]
 8005738:	f04f 30ff 	mov.w	r0, #4294967295
 800573c:	e7e9      	b.n	8005712 <__ssputs_r+0x8a>
	...

08005740 <_svfiprintf_r>:
 8005740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005744:	4698      	mov	r8, r3
 8005746:	898b      	ldrh	r3, [r1, #12]
 8005748:	061b      	lsls	r3, r3, #24
 800574a:	b09d      	sub	sp, #116	@ 0x74
 800574c:	4607      	mov	r7, r0
 800574e:	460d      	mov	r5, r1
 8005750:	4614      	mov	r4, r2
 8005752:	d510      	bpl.n	8005776 <_svfiprintf_r+0x36>
 8005754:	690b      	ldr	r3, [r1, #16]
 8005756:	b973      	cbnz	r3, 8005776 <_svfiprintf_r+0x36>
 8005758:	2140      	movs	r1, #64	@ 0x40
 800575a:	f7ff ff09 	bl	8005570 <_malloc_r>
 800575e:	6028      	str	r0, [r5, #0]
 8005760:	6128      	str	r0, [r5, #16]
 8005762:	b930      	cbnz	r0, 8005772 <_svfiprintf_r+0x32>
 8005764:	230c      	movs	r3, #12
 8005766:	603b      	str	r3, [r7, #0]
 8005768:	f04f 30ff 	mov.w	r0, #4294967295
 800576c:	b01d      	add	sp, #116	@ 0x74
 800576e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005772:	2340      	movs	r3, #64	@ 0x40
 8005774:	616b      	str	r3, [r5, #20]
 8005776:	2300      	movs	r3, #0
 8005778:	9309      	str	r3, [sp, #36]	@ 0x24
 800577a:	2320      	movs	r3, #32
 800577c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005780:	f8cd 800c 	str.w	r8, [sp, #12]
 8005784:	2330      	movs	r3, #48	@ 0x30
 8005786:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005924 <_svfiprintf_r+0x1e4>
 800578a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800578e:	f04f 0901 	mov.w	r9, #1
 8005792:	4623      	mov	r3, r4
 8005794:	469a      	mov	sl, r3
 8005796:	f813 2b01 	ldrb.w	r2, [r3], #1
 800579a:	b10a      	cbz	r2, 80057a0 <_svfiprintf_r+0x60>
 800579c:	2a25      	cmp	r2, #37	@ 0x25
 800579e:	d1f9      	bne.n	8005794 <_svfiprintf_r+0x54>
 80057a0:	ebba 0b04 	subs.w	fp, sl, r4
 80057a4:	d00b      	beq.n	80057be <_svfiprintf_r+0x7e>
 80057a6:	465b      	mov	r3, fp
 80057a8:	4622      	mov	r2, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	4638      	mov	r0, r7
 80057ae:	f7ff ff6b 	bl	8005688 <__ssputs_r>
 80057b2:	3001      	adds	r0, #1
 80057b4:	f000 80a7 	beq.w	8005906 <_svfiprintf_r+0x1c6>
 80057b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057ba:	445a      	add	r2, fp
 80057bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80057be:	f89a 3000 	ldrb.w	r3, [sl]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	f000 809f 	beq.w	8005906 <_svfiprintf_r+0x1c6>
 80057c8:	2300      	movs	r3, #0
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057d2:	f10a 0a01 	add.w	sl, sl, #1
 80057d6:	9304      	str	r3, [sp, #16]
 80057d8:	9307      	str	r3, [sp, #28]
 80057da:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057de:	931a      	str	r3, [sp, #104]	@ 0x68
 80057e0:	4654      	mov	r4, sl
 80057e2:	2205      	movs	r2, #5
 80057e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057e8:	484e      	ldr	r0, [pc, #312]	@ (8005924 <_svfiprintf_r+0x1e4>)
 80057ea:	f7fa fd29 	bl	8000240 <memchr>
 80057ee:	9a04      	ldr	r2, [sp, #16]
 80057f0:	b9d8      	cbnz	r0, 800582a <_svfiprintf_r+0xea>
 80057f2:	06d0      	lsls	r0, r2, #27
 80057f4:	bf44      	itt	mi
 80057f6:	2320      	movmi	r3, #32
 80057f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80057fc:	0711      	lsls	r1, r2, #28
 80057fe:	bf44      	itt	mi
 8005800:	232b      	movmi	r3, #43	@ 0x2b
 8005802:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005806:	f89a 3000 	ldrb.w	r3, [sl]
 800580a:	2b2a      	cmp	r3, #42	@ 0x2a
 800580c:	d015      	beq.n	800583a <_svfiprintf_r+0xfa>
 800580e:	9a07      	ldr	r2, [sp, #28]
 8005810:	4654      	mov	r4, sl
 8005812:	2000      	movs	r0, #0
 8005814:	f04f 0c0a 	mov.w	ip, #10
 8005818:	4621      	mov	r1, r4
 800581a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800581e:	3b30      	subs	r3, #48	@ 0x30
 8005820:	2b09      	cmp	r3, #9
 8005822:	d94b      	bls.n	80058bc <_svfiprintf_r+0x17c>
 8005824:	b1b0      	cbz	r0, 8005854 <_svfiprintf_r+0x114>
 8005826:	9207      	str	r2, [sp, #28]
 8005828:	e014      	b.n	8005854 <_svfiprintf_r+0x114>
 800582a:	eba0 0308 	sub.w	r3, r0, r8
 800582e:	fa09 f303 	lsl.w	r3, r9, r3
 8005832:	4313      	orrs	r3, r2
 8005834:	9304      	str	r3, [sp, #16]
 8005836:	46a2      	mov	sl, r4
 8005838:	e7d2      	b.n	80057e0 <_svfiprintf_r+0xa0>
 800583a:	9b03      	ldr	r3, [sp, #12]
 800583c:	1d19      	adds	r1, r3, #4
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	9103      	str	r1, [sp, #12]
 8005842:	2b00      	cmp	r3, #0
 8005844:	bfbb      	ittet	lt
 8005846:	425b      	neglt	r3, r3
 8005848:	f042 0202 	orrlt.w	r2, r2, #2
 800584c:	9307      	strge	r3, [sp, #28]
 800584e:	9307      	strlt	r3, [sp, #28]
 8005850:	bfb8      	it	lt
 8005852:	9204      	strlt	r2, [sp, #16]
 8005854:	7823      	ldrb	r3, [r4, #0]
 8005856:	2b2e      	cmp	r3, #46	@ 0x2e
 8005858:	d10a      	bne.n	8005870 <_svfiprintf_r+0x130>
 800585a:	7863      	ldrb	r3, [r4, #1]
 800585c:	2b2a      	cmp	r3, #42	@ 0x2a
 800585e:	d132      	bne.n	80058c6 <_svfiprintf_r+0x186>
 8005860:	9b03      	ldr	r3, [sp, #12]
 8005862:	1d1a      	adds	r2, r3, #4
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	9203      	str	r2, [sp, #12]
 8005868:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800586c:	3402      	adds	r4, #2
 800586e:	9305      	str	r3, [sp, #20]
 8005870:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005934 <_svfiprintf_r+0x1f4>
 8005874:	7821      	ldrb	r1, [r4, #0]
 8005876:	2203      	movs	r2, #3
 8005878:	4650      	mov	r0, sl
 800587a:	f7fa fce1 	bl	8000240 <memchr>
 800587e:	b138      	cbz	r0, 8005890 <_svfiprintf_r+0x150>
 8005880:	9b04      	ldr	r3, [sp, #16]
 8005882:	eba0 000a 	sub.w	r0, r0, sl
 8005886:	2240      	movs	r2, #64	@ 0x40
 8005888:	4082      	lsls	r2, r0
 800588a:	4313      	orrs	r3, r2
 800588c:	3401      	adds	r4, #1
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005894:	4824      	ldr	r0, [pc, #144]	@ (8005928 <_svfiprintf_r+0x1e8>)
 8005896:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800589a:	2206      	movs	r2, #6
 800589c:	f7fa fcd0 	bl	8000240 <memchr>
 80058a0:	2800      	cmp	r0, #0
 80058a2:	d036      	beq.n	8005912 <_svfiprintf_r+0x1d2>
 80058a4:	4b21      	ldr	r3, [pc, #132]	@ (800592c <_svfiprintf_r+0x1ec>)
 80058a6:	bb1b      	cbnz	r3, 80058f0 <_svfiprintf_r+0x1b0>
 80058a8:	9b03      	ldr	r3, [sp, #12]
 80058aa:	3307      	adds	r3, #7
 80058ac:	f023 0307 	bic.w	r3, r3, #7
 80058b0:	3308      	adds	r3, #8
 80058b2:	9303      	str	r3, [sp, #12]
 80058b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058b6:	4433      	add	r3, r6
 80058b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80058ba:	e76a      	b.n	8005792 <_svfiprintf_r+0x52>
 80058bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80058c0:	460c      	mov	r4, r1
 80058c2:	2001      	movs	r0, #1
 80058c4:	e7a8      	b.n	8005818 <_svfiprintf_r+0xd8>
 80058c6:	2300      	movs	r3, #0
 80058c8:	3401      	adds	r4, #1
 80058ca:	9305      	str	r3, [sp, #20]
 80058cc:	4619      	mov	r1, r3
 80058ce:	f04f 0c0a 	mov.w	ip, #10
 80058d2:	4620      	mov	r0, r4
 80058d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058d8:	3a30      	subs	r2, #48	@ 0x30
 80058da:	2a09      	cmp	r2, #9
 80058dc:	d903      	bls.n	80058e6 <_svfiprintf_r+0x1a6>
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d0c6      	beq.n	8005870 <_svfiprintf_r+0x130>
 80058e2:	9105      	str	r1, [sp, #20]
 80058e4:	e7c4      	b.n	8005870 <_svfiprintf_r+0x130>
 80058e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80058ea:	4604      	mov	r4, r0
 80058ec:	2301      	movs	r3, #1
 80058ee:	e7f0      	b.n	80058d2 <_svfiprintf_r+0x192>
 80058f0:	ab03      	add	r3, sp, #12
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	462a      	mov	r2, r5
 80058f6:	4b0e      	ldr	r3, [pc, #56]	@ (8005930 <_svfiprintf_r+0x1f0>)
 80058f8:	a904      	add	r1, sp, #16
 80058fa:	4638      	mov	r0, r7
 80058fc:	f3af 8000 	nop.w
 8005900:	1c42      	adds	r2, r0, #1
 8005902:	4606      	mov	r6, r0
 8005904:	d1d6      	bne.n	80058b4 <_svfiprintf_r+0x174>
 8005906:	89ab      	ldrh	r3, [r5, #12]
 8005908:	065b      	lsls	r3, r3, #25
 800590a:	f53f af2d 	bmi.w	8005768 <_svfiprintf_r+0x28>
 800590e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005910:	e72c      	b.n	800576c <_svfiprintf_r+0x2c>
 8005912:	ab03      	add	r3, sp, #12
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	462a      	mov	r2, r5
 8005918:	4b05      	ldr	r3, [pc, #20]	@ (8005930 <_svfiprintf_r+0x1f0>)
 800591a:	a904      	add	r1, sp, #16
 800591c:	4638      	mov	r0, r7
 800591e:	f000 f879 	bl	8005a14 <_printf_i>
 8005922:	e7ed      	b.n	8005900 <_svfiprintf_r+0x1c0>
 8005924:	08005d50 	.word	0x08005d50
 8005928:	08005d5a 	.word	0x08005d5a
 800592c:	00000000 	.word	0x00000000
 8005930:	08005689 	.word	0x08005689
 8005934:	08005d56 	.word	0x08005d56

08005938 <_printf_common>:
 8005938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800593c:	4616      	mov	r6, r2
 800593e:	4698      	mov	r8, r3
 8005940:	688a      	ldr	r2, [r1, #8]
 8005942:	690b      	ldr	r3, [r1, #16]
 8005944:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005948:	4293      	cmp	r3, r2
 800594a:	bfb8      	it	lt
 800594c:	4613      	movlt	r3, r2
 800594e:	6033      	str	r3, [r6, #0]
 8005950:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005954:	4607      	mov	r7, r0
 8005956:	460c      	mov	r4, r1
 8005958:	b10a      	cbz	r2, 800595e <_printf_common+0x26>
 800595a:	3301      	adds	r3, #1
 800595c:	6033      	str	r3, [r6, #0]
 800595e:	6823      	ldr	r3, [r4, #0]
 8005960:	0699      	lsls	r1, r3, #26
 8005962:	bf42      	ittt	mi
 8005964:	6833      	ldrmi	r3, [r6, #0]
 8005966:	3302      	addmi	r3, #2
 8005968:	6033      	strmi	r3, [r6, #0]
 800596a:	6825      	ldr	r5, [r4, #0]
 800596c:	f015 0506 	ands.w	r5, r5, #6
 8005970:	d106      	bne.n	8005980 <_printf_common+0x48>
 8005972:	f104 0a19 	add.w	sl, r4, #25
 8005976:	68e3      	ldr	r3, [r4, #12]
 8005978:	6832      	ldr	r2, [r6, #0]
 800597a:	1a9b      	subs	r3, r3, r2
 800597c:	42ab      	cmp	r3, r5
 800597e:	dc26      	bgt.n	80059ce <_printf_common+0x96>
 8005980:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005984:	6822      	ldr	r2, [r4, #0]
 8005986:	3b00      	subs	r3, #0
 8005988:	bf18      	it	ne
 800598a:	2301      	movne	r3, #1
 800598c:	0692      	lsls	r2, r2, #26
 800598e:	d42b      	bmi.n	80059e8 <_printf_common+0xb0>
 8005990:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005994:	4641      	mov	r1, r8
 8005996:	4638      	mov	r0, r7
 8005998:	47c8      	blx	r9
 800599a:	3001      	adds	r0, #1
 800599c:	d01e      	beq.n	80059dc <_printf_common+0xa4>
 800599e:	6823      	ldr	r3, [r4, #0]
 80059a0:	6922      	ldr	r2, [r4, #16]
 80059a2:	f003 0306 	and.w	r3, r3, #6
 80059a6:	2b04      	cmp	r3, #4
 80059a8:	bf02      	ittt	eq
 80059aa:	68e5      	ldreq	r5, [r4, #12]
 80059ac:	6833      	ldreq	r3, [r6, #0]
 80059ae:	1aed      	subeq	r5, r5, r3
 80059b0:	68a3      	ldr	r3, [r4, #8]
 80059b2:	bf0c      	ite	eq
 80059b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059b8:	2500      	movne	r5, #0
 80059ba:	4293      	cmp	r3, r2
 80059bc:	bfc4      	itt	gt
 80059be:	1a9b      	subgt	r3, r3, r2
 80059c0:	18ed      	addgt	r5, r5, r3
 80059c2:	2600      	movs	r6, #0
 80059c4:	341a      	adds	r4, #26
 80059c6:	42b5      	cmp	r5, r6
 80059c8:	d11a      	bne.n	8005a00 <_printf_common+0xc8>
 80059ca:	2000      	movs	r0, #0
 80059cc:	e008      	b.n	80059e0 <_printf_common+0xa8>
 80059ce:	2301      	movs	r3, #1
 80059d0:	4652      	mov	r2, sl
 80059d2:	4641      	mov	r1, r8
 80059d4:	4638      	mov	r0, r7
 80059d6:	47c8      	blx	r9
 80059d8:	3001      	adds	r0, #1
 80059da:	d103      	bne.n	80059e4 <_printf_common+0xac>
 80059dc:	f04f 30ff 	mov.w	r0, #4294967295
 80059e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059e4:	3501      	adds	r5, #1
 80059e6:	e7c6      	b.n	8005976 <_printf_common+0x3e>
 80059e8:	18e1      	adds	r1, r4, r3
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	2030      	movs	r0, #48	@ 0x30
 80059ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059f2:	4422      	add	r2, r4
 80059f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80059f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80059fc:	3302      	adds	r3, #2
 80059fe:	e7c7      	b.n	8005990 <_printf_common+0x58>
 8005a00:	2301      	movs	r3, #1
 8005a02:	4622      	mov	r2, r4
 8005a04:	4641      	mov	r1, r8
 8005a06:	4638      	mov	r0, r7
 8005a08:	47c8      	blx	r9
 8005a0a:	3001      	adds	r0, #1
 8005a0c:	d0e6      	beq.n	80059dc <_printf_common+0xa4>
 8005a0e:	3601      	adds	r6, #1
 8005a10:	e7d9      	b.n	80059c6 <_printf_common+0x8e>
	...

08005a14 <_printf_i>:
 8005a14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a18:	7e0f      	ldrb	r7, [r1, #24]
 8005a1a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a1c:	2f78      	cmp	r7, #120	@ 0x78
 8005a1e:	4691      	mov	r9, r2
 8005a20:	4680      	mov	r8, r0
 8005a22:	460c      	mov	r4, r1
 8005a24:	469a      	mov	sl, r3
 8005a26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a2a:	d807      	bhi.n	8005a3c <_printf_i+0x28>
 8005a2c:	2f62      	cmp	r7, #98	@ 0x62
 8005a2e:	d80a      	bhi.n	8005a46 <_printf_i+0x32>
 8005a30:	2f00      	cmp	r7, #0
 8005a32:	f000 80d1 	beq.w	8005bd8 <_printf_i+0x1c4>
 8005a36:	2f58      	cmp	r7, #88	@ 0x58
 8005a38:	f000 80b8 	beq.w	8005bac <_printf_i+0x198>
 8005a3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a44:	e03a      	b.n	8005abc <_printf_i+0xa8>
 8005a46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a4a:	2b15      	cmp	r3, #21
 8005a4c:	d8f6      	bhi.n	8005a3c <_printf_i+0x28>
 8005a4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a54 <_printf_i+0x40>)
 8005a50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a54:	08005aad 	.word	0x08005aad
 8005a58:	08005ac1 	.word	0x08005ac1
 8005a5c:	08005a3d 	.word	0x08005a3d
 8005a60:	08005a3d 	.word	0x08005a3d
 8005a64:	08005a3d 	.word	0x08005a3d
 8005a68:	08005a3d 	.word	0x08005a3d
 8005a6c:	08005ac1 	.word	0x08005ac1
 8005a70:	08005a3d 	.word	0x08005a3d
 8005a74:	08005a3d 	.word	0x08005a3d
 8005a78:	08005a3d 	.word	0x08005a3d
 8005a7c:	08005a3d 	.word	0x08005a3d
 8005a80:	08005bbf 	.word	0x08005bbf
 8005a84:	08005aeb 	.word	0x08005aeb
 8005a88:	08005b79 	.word	0x08005b79
 8005a8c:	08005a3d 	.word	0x08005a3d
 8005a90:	08005a3d 	.word	0x08005a3d
 8005a94:	08005be1 	.word	0x08005be1
 8005a98:	08005a3d 	.word	0x08005a3d
 8005a9c:	08005aeb 	.word	0x08005aeb
 8005aa0:	08005a3d 	.word	0x08005a3d
 8005aa4:	08005a3d 	.word	0x08005a3d
 8005aa8:	08005b81 	.word	0x08005b81
 8005aac:	6833      	ldr	r3, [r6, #0]
 8005aae:	1d1a      	adds	r2, r3, #4
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	6032      	str	r2, [r6, #0]
 8005ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ab8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005abc:	2301      	movs	r3, #1
 8005abe:	e09c      	b.n	8005bfa <_printf_i+0x1e6>
 8005ac0:	6833      	ldr	r3, [r6, #0]
 8005ac2:	6820      	ldr	r0, [r4, #0]
 8005ac4:	1d19      	adds	r1, r3, #4
 8005ac6:	6031      	str	r1, [r6, #0]
 8005ac8:	0606      	lsls	r6, r0, #24
 8005aca:	d501      	bpl.n	8005ad0 <_printf_i+0xbc>
 8005acc:	681d      	ldr	r5, [r3, #0]
 8005ace:	e003      	b.n	8005ad8 <_printf_i+0xc4>
 8005ad0:	0645      	lsls	r5, r0, #25
 8005ad2:	d5fb      	bpl.n	8005acc <_printf_i+0xb8>
 8005ad4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ad8:	2d00      	cmp	r5, #0
 8005ada:	da03      	bge.n	8005ae4 <_printf_i+0xd0>
 8005adc:	232d      	movs	r3, #45	@ 0x2d
 8005ade:	426d      	negs	r5, r5
 8005ae0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ae4:	4858      	ldr	r0, [pc, #352]	@ (8005c48 <_printf_i+0x234>)
 8005ae6:	230a      	movs	r3, #10
 8005ae8:	e011      	b.n	8005b0e <_printf_i+0xfa>
 8005aea:	6821      	ldr	r1, [r4, #0]
 8005aec:	6833      	ldr	r3, [r6, #0]
 8005aee:	0608      	lsls	r0, r1, #24
 8005af0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005af4:	d402      	bmi.n	8005afc <_printf_i+0xe8>
 8005af6:	0649      	lsls	r1, r1, #25
 8005af8:	bf48      	it	mi
 8005afa:	b2ad      	uxthmi	r5, r5
 8005afc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005afe:	4852      	ldr	r0, [pc, #328]	@ (8005c48 <_printf_i+0x234>)
 8005b00:	6033      	str	r3, [r6, #0]
 8005b02:	bf14      	ite	ne
 8005b04:	230a      	movne	r3, #10
 8005b06:	2308      	moveq	r3, #8
 8005b08:	2100      	movs	r1, #0
 8005b0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b0e:	6866      	ldr	r6, [r4, #4]
 8005b10:	60a6      	str	r6, [r4, #8]
 8005b12:	2e00      	cmp	r6, #0
 8005b14:	db05      	blt.n	8005b22 <_printf_i+0x10e>
 8005b16:	6821      	ldr	r1, [r4, #0]
 8005b18:	432e      	orrs	r6, r5
 8005b1a:	f021 0104 	bic.w	r1, r1, #4
 8005b1e:	6021      	str	r1, [r4, #0]
 8005b20:	d04b      	beq.n	8005bba <_printf_i+0x1a6>
 8005b22:	4616      	mov	r6, r2
 8005b24:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b28:	fb03 5711 	mls	r7, r3, r1, r5
 8005b2c:	5dc7      	ldrb	r7, [r0, r7]
 8005b2e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b32:	462f      	mov	r7, r5
 8005b34:	42bb      	cmp	r3, r7
 8005b36:	460d      	mov	r5, r1
 8005b38:	d9f4      	bls.n	8005b24 <_printf_i+0x110>
 8005b3a:	2b08      	cmp	r3, #8
 8005b3c:	d10b      	bne.n	8005b56 <_printf_i+0x142>
 8005b3e:	6823      	ldr	r3, [r4, #0]
 8005b40:	07df      	lsls	r7, r3, #31
 8005b42:	d508      	bpl.n	8005b56 <_printf_i+0x142>
 8005b44:	6923      	ldr	r3, [r4, #16]
 8005b46:	6861      	ldr	r1, [r4, #4]
 8005b48:	4299      	cmp	r1, r3
 8005b4a:	bfde      	ittt	le
 8005b4c:	2330      	movle	r3, #48	@ 0x30
 8005b4e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b52:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b56:	1b92      	subs	r2, r2, r6
 8005b58:	6122      	str	r2, [r4, #16]
 8005b5a:	f8cd a000 	str.w	sl, [sp]
 8005b5e:	464b      	mov	r3, r9
 8005b60:	aa03      	add	r2, sp, #12
 8005b62:	4621      	mov	r1, r4
 8005b64:	4640      	mov	r0, r8
 8005b66:	f7ff fee7 	bl	8005938 <_printf_common>
 8005b6a:	3001      	adds	r0, #1
 8005b6c:	d14a      	bne.n	8005c04 <_printf_i+0x1f0>
 8005b6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b72:	b004      	add	sp, #16
 8005b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b78:	6823      	ldr	r3, [r4, #0]
 8005b7a:	f043 0320 	orr.w	r3, r3, #32
 8005b7e:	6023      	str	r3, [r4, #0]
 8005b80:	4832      	ldr	r0, [pc, #200]	@ (8005c4c <_printf_i+0x238>)
 8005b82:	2778      	movs	r7, #120	@ 0x78
 8005b84:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	6831      	ldr	r1, [r6, #0]
 8005b8c:	061f      	lsls	r7, r3, #24
 8005b8e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005b92:	d402      	bmi.n	8005b9a <_printf_i+0x186>
 8005b94:	065f      	lsls	r7, r3, #25
 8005b96:	bf48      	it	mi
 8005b98:	b2ad      	uxthmi	r5, r5
 8005b9a:	6031      	str	r1, [r6, #0]
 8005b9c:	07d9      	lsls	r1, r3, #31
 8005b9e:	bf44      	itt	mi
 8005ba0:	f043 0320 	orrmi.w	r3, r3, #32
 8005ba4:	6023      	strmi	r3, [r4, #0]
 8005ba6:	b11d      	cbz	r5, 8005bb0 <_printf_i+0x19c>
 8005ba8:	2310      	movs	r3, #16
 8005baa:	e7ad      	b.n	8005b08 <_printf_i+0xf4>
 8005bac:	4826      	ldr	r0, [pc, #152]	@ (8005c48 <_printf_i+0x234>)
 8005bae:	e7e9      	b.n	8005b84 <_printf_i+0x170>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	f023 0320 	bic.w	r3, r3, #32
 8005bb6:	6023      	str	r3, [r4, #0]
 8005bb8:	e7f6      	b.n	8005ba8 <_printf_i+0x194>
 8005bba:	4616      	mov	r6, r2
 8005bbc:	e7bd      	b.n	8005b3a <_printf_i+0x126>
 8005bbe:	6833      	ldr	r3, [r6, #0]
 8005bc0:	6825      	ldr	r5, [r4, #0]
 8005bc2:	6961      	ldr	r1, [r4, #20]
 8005bc4:	1d18      	adds	r0, r3, #4
 8005bc6:	6030      	str	r0, [r6, #0]
 8005bc8:	062e      	lsls	r6, r5, #24
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	d501      	bpl.n	8005bd2 <_printf_i+0x1be>
 8005bce:	6019      	str	r1, [r3, #0]
 8005bd0:	e002      	b.n	8005bd8 <_printf_i+0x1c4>
 8005bd2:	0668      	lsls	r0, r5, #25
 8005bd4:	d5fb      	bpl.n	8005bce <_printf_i+0x1ba>
 8005bd6:	8019      	strh	r1, [r3, #0]
 8005bd8:	2300      	movs	r3, #0
 8005bda:	6123      	str	r3, [r4, #16]
 8005bdc:	4616      	mov	r6, r2
 8005bde:	e7bc      	b.n	8005b5a <_printf_i+0x146>
 8005be0:	6833      	ldr	r3, [r6, #0]
 8005be2:	1d1a      	adds	r2, r3, #4
 8005be4:	6032      	str	r2, [r6, #0]
 8005be6:	681e      	ldr	r6, [r3, #0]
 8005be8:	6862      	ldr	r2, [r4, #4]
 8005bea:	2100      	movs	r1, #0
 8005bec:	4630      	mov	r0, r6
 8005bee:	f7fa fb27 	bl	8000240 <memchr>
 8005bf2:	b108      	cbz	r0, 8005bf8 <_printf_i+0x1e4>
 8005bf4:	1b80      	subs	r0, r0, r6
 8005bf6:	6060      	str	r0, [r4, #4]
 8005bf8:	6863      	ldr	r3, [r4, #4]
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c02:	e7aa      	b.n	8005b5a <_printf_i+0x146>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	4632      	mov	r2, r6
 8005c08:	4649      	mov	r1, r9
 8005c0a:	4640      	mov	r0, r8
 8005c0c:	47d0      	blx	sl
 8005c0e:	3001      	adds	r0, #1
 8005c10:	d0ad      	beq.n	8005b6e <_printf_i+0x15a>
 8005c12:	6823      	ldr	r3, [r4, #0]
 8005c14:	079b      	lsls	r3, r3, #30
 8005c16:	d413      	bmi.n	8005c40 <_printf_i+0x22c>
 8005c18:	68e0      	ldr	r0, [r4, #12]
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	4298      	cmp	r0, r3
 8005c1e:	bfb8      	it	lt
 8005c20:	4618      	movlt	r0, r3
 8005c22:	e7a6      	b.n	8005b72 <_printf_i+0x15e>
 8005c24:	2301      	movs	r3, #1
 8005c26:	4632      	mov	r2, r6
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	47d0      	blx	sl
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d09d      	beq.n	8005b6e <_printf_i+0x15a>
 8005c32:	3501      	adds	r5, #1
 8005c34:	68e3      	ldr	r3, [r4, #12]
 8005c36:	9903      	ldr	r1, [sp, #12]
 8005c38:	1a5b      	subs	r3, r3, r1
 8005c3a:	42ab      	cmp	r3, r5
 8005c3c:	dcf2      	bgt.n	8005c24 <_printf_i+0x210>
 8005c3e:	e7eb      	b.n	8005c18 <_printf_i+0x204>
 8005c40:	2500      	movs	r5, #0
 8005c42:	f104 0619 	add.w	r6, r4, #25
 8005c46:	e7f5      	b.n	8005c34 <_printf_i+0x220>
 8005c48:	08005d61 	.word	0x08005d61
 8005c4c:	08005d72 	.word	0x08005d72

08005c50 <memmove>:
 8005c50:	4288      	cmp	r0, r1
 8005c52:	b510      	push	{r4, lr}
 8005c54:	eb01 0402 	add.w	r4, r1, r2
 8005c58:	d902      	bls.n	8005c60 <memmove+0x10>
 8005c5a:	4284      	cmp	r4, r0
 8005c5c:	4623      	mov	r3, r4
 8005c5e:	d807      	bhi.n	8005c70 <memmove+0x20>
 8005c60:	1e43      	subs	r3, r0, #1
 8005c62:	42a1      	cmp	r1, r4
 8005c64:	d008      	beq.n	8005c78 <memmove+0x28>
 8005c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c6e:	e7f8      	b.n	8005c62 <memmove+0x12>
 8005c70:	4402      	add	r2, r0
 8005c72:	4601      	mov	r1, r0
 8005c74:	428a      	cmp	r2, r1
 8005c76:	d100      	bne.n	8005c7a <memmove+0x2a>
 8005c78:	bd10      	pop	{r4, pc}
 8005c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c82:	e7f7      	b.n	8005c74 <memmove+0x24>

08005c84 <_sbrk_r>:
 8005c84:	b538      	push	{r3, r4, r5, lr}
 8005c86:	4d06      	ldr	r5, [pc, #24]	@ (8005ca0 <_sbrk_r+0x1c>)
 8005c88:	2300      	movs	r3, #0
 8005c8a:	4604      	mov	r4, r0
 8005c8c:	4608      	mov	r0, r1
 8005c8e:	602b      	str	r3, [r5, #0]
 8005c90:	f7fb fa50 	bl	8001134 <_sbrk>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d102      	bne.n	8005c9e <_sbrk_r+0x1a>
 8005c98:	682b      	ldr	r3, [r5, #0]
 8005c9a:	b103      	cbz	r3, 8005c9e <_sbrk_r+0x1a>
 8005c9c:	6023      	str	r3, [r4, #0]
 8005c9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ca0:	20012bcc 	.word	0x20012bcc

08005ca4 <_realloc_r>:
 8005ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca8:	4607      	mov	r7, r0
 8005caa:	4614      	mov	r4, r2
 8005cac:	460d      	mov	r5, r1
 8005cae:	b921      	cbnz	r1, 8005cba <_realloc_r+0x16>
 8005cb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	f7ff bc5b 	b.w	8005570 <_malloc_r>
 8005cba:	b92a      	cbnz	r2, 8005cc8 <_realloc_r+0x24>
 8005cbc:	f7ff fbec 	bl	8005498 <_free_r>
 8005cc0:	4625      	mov	r5, r4
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cc8:	f000 f81a 	bl	8005d00 <_malloc_usable_size_r>
 8005ccc:	4284      	cmp	r4, r0
 8005cce:	4606      	mov	r6, r0
 8005cd0:	d802      	bhi.n	8005cd8 <_realloc_r+0x34>
 8005cd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005cd6:	d8f4      	bhi.n	8005cc2 <_realloc_r+0x1e>
 8005cd8:	4621      	mov	r1, r4
 8005cda:	4638      	mov	r0, r7
 8005cdc:	f7ff fc48 	bl	8005570 <_malloc_r>
 8005ce0:	4680      	mov	r8, r0
 8005ce2:	b908      	cbnz	r0, 8005ce8 <_realloc_r+0x44>
 8005ce4:	4645      	mov	r5, r8
 8005ce6:	e7ec      	b.n	8005cc2 <_realloc_r+0x1e>
 8005ce8:	42b4      	cmp	r4, r6
 8005cea:	4622      	mov	r2, r4
 8005cec:	4629      	mov	r1, r5
 8005cee:	bf28      	it	cs
 8005cf0:	4632      	movcs	r2, r6
 8005cf2:	f7ff fbc3 	bl	800547c <memcpy>
 8005cf6:	4629      	mov	r1, r5
 8005cf8:	4638      	mov	r0, r7
 8005cfa:	f7ff fbcd 	bl	8005498 <_free_r>
 8005cfe:	e7f1      	b.n	8005ce4 <_realloc_r+0x40>

08005d00 <_malloc_usable_size_r>:
 8005d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005d04:	1f18      	subs	r0, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	bfbc      	itt	lt
 8005d0a:	580b      	ldrlt	r3, [r1, r0]
 8005d0c:	18c0      	addlt	r0, r0, r3
 8005d0e:	4770      	bx	lr

08005d10 <_init>:
 8005d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d12:	bf00      	nop
 8005d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d16:	bc08      	pop	{r3}
 8005d18:	469e      	mov	lr, r3
 8005d1a:	4770      	bx	lr

08005d1c <_fini>:
 8005d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1e:	bf00      	nop
 8005d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d22:	bc08      	pop	{r3}
 8005d24:	469e      	mov	lr, r3
 8005d26:	4770      	bx	lr
