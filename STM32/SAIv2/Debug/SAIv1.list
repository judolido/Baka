
SAIv1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005088  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005280  08005280  00006280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052a0  080052a0  0000700c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080052a0  080052a0  000062a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a8  080052a8  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a8  080052a8  000062a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080052ac  080052ac  000062ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080052b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001df4  2000000c  080052bc  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e00  080052bc  00007e00  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca7d  00000000  00000000  0000703a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d41  00000000  00000000  00013ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  000157f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000076d  00000000  00000000  00016190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026884  00000000  00000000  000168fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c6de  00000000  00000000  0003d181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0a7a  00000000  00000000  0004985f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a2d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026a0  00000000  00000000  0013a31c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0013c9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005268 	.word	0x08005268

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08005268 	.word	0x08005268

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b988 	b.w	8000560 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9d08      	ldr	r5, [sp, #32]
 800026e:	468e      	mov	lr, r1
 8000270:	4604      	mov	r4, r0
 8000272:	4688      	mov	r8, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4617      	mov	r7, r2
 800027c:	d962      	bls.n	8000344 <__udivmoddi4+0xdc>
 800027e:	fab2 f682 	clz	r6, r2
 8000282:	b14e      	cbz	r6, 8000298 <__udivmoddi4+0x30>
 8000284:	f1c6 0320 	rsb	r3, r6, #32
 8000288:	fa01 f806 	lsl.w	r8, r1, r6
 800028c:	fa20 f303 	lsr.w	r3, r0, r3
 8000290:	40b7      	lsls	r7, r6
 8000292:	ea43 0808 	orr.w	r8, r3, r8
 8000296:	40b4      	lsls	r4, r6
 8000298:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800029c:	fa1f fc87 	uxth.w	ip, r7
 80002a0:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a4:	0c23      	lsrs	r3, r4, #16
 80002a6:	fb0e 8811 	mls	r8, lr, r1, r8
 80002aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ae:	fb01 f20c 	mul.w	r2, r1, ip
 80002b2:	429a      	cmp	r2, r3
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b6:	18fb      	adds	r3, r7, r3
 80002b8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002bc:	f080 80ea 	bcs.w	8000494 <__udivmoddi4+0x22c>
 80002c0:	429a      	cmp	r2, r3
 80002c2:	f240 80e7 	bls.w	8000494 <__udivmoddi4+0x22c>
 80002c6:	3902      	subs	r1, #2
 80002c8:	443b      	add	r3, r7
 80002ca:	1a9a      	subs	r2, r3, r2
 80002cc:	b2a3      	uxth	r3, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002da:	fb00 fc0c 	mul.w	ip, r0, ip
 80002de:	459c      	cmp	ip, r3
 80002e0:	d909      	bls.n	80002f6 <__udivmoddi4+0x8e>
 80002e2:	18fb      	adds	r3, r7, r3
 80002e4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e8:	f080 80d6 	bcs.w	8000498 <__udivmoddi4+0x230>
 80002ec:	459c      	cmp	ip, r3
 80002ee:	f240 80d3 	bls.w	8000498 <__udivmoddi4+0x230>
 80002f2:	443b      	add	r3, r7
 80002f4:	3802      	subs	r0, #2
 80002f6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fa:	eba3 030c 	sub.w	r3, r3, ip
 80002fe:	2100      	movs	r1, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0xa2>
 8000302:	40f3      	lsrs	r3, r6
 8000304:	2200      	movs	r2, #0
 8000306:	e9c5 3200 	strd	r3, r2, [r5]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d905      	bls.n	800031e <__udivmoddi4+0xb6>
 8000312:	b10d      	cbz	r5, 8000318 <__udivmoddi4+0xb0>
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	2100      	movs	r1, #0
 800031a:	4608      	mov	r0, r1
 800031c:	e7f5      	b.n	800030a <__udivmoddi4+0xa2>
 800031e:	fab3 f183 	clz	r1, r3
 8000322:	2900      	cmp	r1, #0
 8000324:	d146      	bne.n	80003b4 <__udivmoddi4+0x14c>
 8000326:	4573      	cmp	r3, lr
 8000328:	d302      	bcc.n	8000330 <__udivmoddi4+0xc8>
 800032a:	4282      	cmp	r2, r0
 800032c:	f200 8105 	bhi.w	800053a <__udivmoddi4+0x2d2>
 8000330:	1a84      	subs	r4, r0, r2
 8000332:	eb6e 0203 	sbc.w	r2, lr, r3
 8000336:	2001      	movs	r0, #1
 8000338:	4690      	mov	r8, r2
 800033a:	2d00      	cmp	r5, #0
 800033c:	d0e5      	beq.n	800030a <__udivmoddi4+0xa2>
 800033e:	e9c5 4800 	strd	r4, r8, [r5]
 8000342:	e7e2      	b.n	800030a <__udivmoddi4+0xa2>
 8000344:	2a00      	cmp	r2, #0
 8000346:	f000 8090 	beq.w	800046a <__udivmoddi4+0x202>
 800034a:	fab2 f682 	clz	r6, r2
 800034e:	2e00      	cmp	r6, #0
 8000350:	f040 80a4 	bne.w	800049c <__udivmoddi4+0x234>
 8000354:	1a8a      	subs	r2, r1, r2
 8000356:	0c03      	lsrs	r3, r0, #16
 8000358:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035c:	b280      	uxth	r0, r0
 800035e:	b2bc      	uxth	r4, r7
 8000360:	2101      	movs	r1, #1
 8000362:	fbb2 fcfe 	udiv	ip, r2, lr
 8000366:	fb0e 221c 	mls	r2, lr, ip, r2
 800036a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036e:	fb04 f20c 	mul.w	r2, r4, ip
 8000372:	429a      	cmp	r2, r3
 8000374:	d907      	bls.n	8000386 <__udivmoddi4+0x11e>
 8000376:	18fb      	adds	r3, r7, r3
 8000378:	f10c 38ff 	add.w	r8, ip, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x11c>
 800037e:	429a      	cmp	r2, r3
 8000380:	f200 80e0 	bhi.w	8000544 <__udivmoddi4+0x2dc>
 8000384:	46c4      	mov	ip, r8
 8000386:	1a9b      	subs	r3, r3, r2
 8000388:	fbb3 f2fe 	udiv	r2, r3, lr
 800038c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000390:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000394:	fb02 f404 	mul.w	r4, r2, r4
 8000398:	429c      	cmp	r4, r3
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x144>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f102 30ff 	add.w	r0, r2, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x142>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f200 80ca 	bhi.w	800053e <__udivmoddi4+0x2d6>
 80003aa:	4602      	mov	r2, r0
 80003ac:	1b1b      	subs	r3, r3, r4
 80003ae:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003b2:	e7a5      	b.n	8000300 <__udivmoddi4+0x98>
 80003b4:	f1c1 0620 	rsb	r6, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 f706 	lsr.w	r7, r2, r6
 80003be:	431f      	orrs	r7, r3
 80003c0:	fa0e f401 	lsl.w	r4, lr, r1
 80003c4:	fa20 f306 	lsr.w	r3, r0, r6
 80003c8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003cc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fa00 f801 	lsl.w	r8, r0, r1
 80003d6:	fa1f fc87 	uxth.w	ip, r7
 80003da:	fbbe f0f9 	udiv	r0, lr, r9
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003ec:	45a6      	cmp	lr, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x1a0>
 80003f4:	193c      	adds	r4, r7, r4
 80003f6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003fa:	f080 809c 	bcs.w	8000536 <__udivmoddi4+0x2ce>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f240 8099 	bls.w	8000536 <__udivmoddi4+0x2ce>
 8000404:	3802      	subs	r0, #2
 8000406:	443c      	add	r4, r7
 8000408:	eba4 040e 	sub.w	r4, r4, lr
 800040c:	fa1f fe83 	uxth.w	lr, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800041c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000420:	45a4      	cmp	ip, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1ce>
 8000424:	193c      	adds	r4, r7, r4
 8000426:	f103 3eff 	add.w	lr, r3, #4294967295
 800042a:	f080 8082 	bcs.w	8000532 <__udivmoddi4+0x2ca>
 800042e:	45a4      	cmp	ip, r4
 8000430:	d97f      	bls.n	8000532 <__udivmoddi4+0x2ca>
 8000432:	3b02      	subs	r3, #2
 8000434:	443c      	add	r4, r7
 8000436:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800043a:	eba4 040c 	sub.w	r4, r4, ip
 800043e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000442:	4564      	cmp	r4, ip
 8000444:	4673      	mov	r3, lr
 8000446:	46e1      	mov	r9, ip
 8000448:	d362      	bcc.n	8000510 <__udivmoddi4+0x2a8>
 800044a:	d05f      	beq.n	800050c <__udivmoddi4+0x2a4>
 800044c:	b15d      	cbz	r5, 8000466 <__udivmoddi4+0x1fe>
 800044e:	ebb8 0203 	subs.w	r2, r8, r3
 8000452:	eb64 0409 	sbc.w	r4, r4, r9
 8000456:	fa04 f606 	lsl.w	r6, r4, r6
 800045a:	fa22 f301 	lsr.w	r3, r2, r1
 800045e:	431e      	orrs	r6, r3
 8000460:	40cc      	lsrs	r4, r1
 8000462:	e9c5 6400 	strd	r6, r4, [r5]
 8000466:	2100      	movs	r1, #0
 8000468:	e74f      	b.n	800030a <__udivmoddi4+0xa2>
 800046a:	fbb1 fcf2 	udiv	ip, r1, r2
 800046e:	0c01      	lsrs	r1, r0, #16
 8000470:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000474:	b280      	uxth	r0, r0
 8000476:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800047a:	463b      	mov	r3, r7
 800047c:	4638      	mov	r0, r7
 800047e:	463c      	mov	r4, r7
 8000480:	46b8      	mov	r8, r7
 8000482:	46be      	mov	lr, r7
 8000484:	2620      	movs	r6, #32
 8000486:	fbb1 f1f7 	udiv	r1, r1, r7
 800048a:	eba2 0208 	sub.w	r2, r2, r8
 800048e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000492:	e766      	b.n	8000362 <__udivmoddi4+0xfa>
 8000494:	4601      	mov	r1, r0
 8000496:	e718      	b.n	80002ca <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e72c      	b.n	80002f6 <__udivmoddi4+0x8e>
 800049c:	f1c6 0220 	rsb	r2, r6, #32
 80004a0:	fa2e f302 	lsr.w	r3, lr, r2
 80004a4:	40b7      	lsls	r7, r6
 80004a6:	40b1      	lsls	r1, r6
 80004a8:	fa20 f202 	lsr.w	r2, r0, r2
 80004ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004b0:	430a      	orrs	r2, r1
 80004b2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b6:	b2bc      	uxth	r4, r7
 80004b8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004bc:	0c11      	lsrs	r1, r2, #16
 80004be:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c2:	fb08 f904 	mul.w	r9, r8, r4
 80004c6:	40b0      	lsls	r0, r6
 80004c8:	4589      	cmp	r9, r1
 80004ca:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ce:	b280      	uxth	r0, r0
 80004d0:	d93e      	bls.n	8000550 <__udivmoddi4+0x2e8>
 80004d2:	1879      	adds	r1, r7, r1
 80004d4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d8:	d201      	bcs.n	80004de <__udivmoddi4+0x276>
 80004da:	4589      	cmp	r9, r1
 80004dc:	d81f      	bhi.n	800051e <__udivmoddi4+0x2b6>
 80004de:	eba1 0109 	sub.w	r1, r1, r9
 80004e2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e6:	fb09 f804 	mul.w	r8, r9, r4
 80004ea:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ee:	b292      	uxth	r2, r2
 80004f0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f4:	4542      	cmp	r2, r8
 80004f6:	d229      	bcs.n	800054c <__udivmoddi4+0x2e4>
 80004f8:	18ba      	adds	r2, r7, r2
 80004fa:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fe:	d2c4      	bcs.n	800048a <__udivmoddi4+0x222>
 8000500:	4542      	cmp	r2, r8
 8000502:	d2c2      	bcs.n	800048a <__udivmoddi4+0x222>
 8000504:	f1a9 0102 	sub.w	r1, r9, #2
 8000508:	443a      	add	r2, r7
 800050a:	e7be      	b.n	800048a <__udivmoddi4+0x222>
 800050c:	45f0      	cmp	r8, lr
 800050e:	d29d      	bcs.n	800044c <__udivmoddi4+0x1e4>
 8000510:	ebbe 0302 	subs.w	r3, lr, r2
 8000514:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000518:	3801      	subs	r0, #1
 800051a:	46e1      	mov	r9, ip
 800051c:	e796      	b.n	800044c <__udivmoddi4+0x1e4>
 800051e:	eba7 0909 	sub.w	r9, r7, r9
 8000522:	4449      	add	r1, r9
 8000524:	f1a8 0c02 	sub.w	ip, r8, #2
 8000528:	fbb1 f9fe 	udiv	r9, r1, lr
 800052c:	fb09 f804 	mul.w	r8, r9, r4
 8000530:	e7db      	b.n	80004ea <__udivmoddi4+0x282>
 8000532:	4673      	mov	r3, lr
 8000534:	e77f      	b.n	8000436 <__udivmoddi4+0x1ce>
 8000536:	4650      	mov	r0, sl
 8000538:	e766      	b.n	8000408 <__udivmoddi4+0x1a0>
 800053a:	4608      	mov	r0, r1
 800053c:	e6fd      	b.n	800033a <__udivmoddi4+0xd2>
 800053e:	443b      	add	r3, r7
 8000540:	3a02      	subs	r2, #2
 8000542:	e733      	b.n	80003ac <__udivmoddi4+0x144>
 8000544:	f1ac 0c02 	sub.w	ip, ip, #2
 8000548:	443b      	add	r3, r7
 800054a:	e71c      	b.n	8000386 <__udivmoddi4+0x11e>
 800054c:	4649      	mov	r1, r9
 800054e:	e79c      	b.n	800048a <__udivmoddi4+0x222>
 8000550:	eba1 0109 	sub.w	r1, r1, r9
 8000554:	46c4      	mov	ip, r8
 8000556:	fbb1 f9fe 	udiv	r9, r1, lr
 800055a:	fb09 f804 	mul.w	r8, r9, r4
 800055e:	e7c4      	b.n	80004ea <__udivmoddi4+0x282>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fd74 	bl	8001056 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f827 	bl	80005c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
HAL_Delay(10);
 8000572:	200a      	movs	r0, #10
 8000574:	f000 fdcc 	bl	8001110 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f94a 	bl	8000810 <MX_GPIO_Init>
  HAL_Delay(10);
 800057c:	200a      	movs	r0, #10
 800057e:	f000 fdc7 	bl	8001110 <HAL_Delay>
  MX_DMA_Init();
 8000582:	f000 f913 	bl	80007ac <MX_DMA_Init>
  HAL_Delay(10);
 8000586:	200a      	movs	r0, #10
 8000588:	f000 fdc2 	bl	8001110 <HAL_Delay>
  MX_USART3_UART_Init();
 800058c:	f000 f8de 	bl	800074c <MX_USART3_UART_Init>
  HAL_Delay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f000 fdbd 	bl	8001110 <HAL_Delay>
  MX_SAI2_Init();
 8000596:	f000 f881 	bl	800069c <MX_SAI2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_Delay(100);
 800059a:	2064      	movs	r0, #100	@ 0x64
 800059c:	f000 fdb8 	bl	8001110 <HAL_Delay>
  HAL_SAI_Receive_DMA(&hsai_BlockB2, (uint8_t*)pAudBuf, AUDIO_BUFF_SIZE);
 80005a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80005a4:	4904      	ldr	r1, [pc, #16]	@ (80005b8 <main+0x54>)
 80005a6:	4805      	ldr	r0, [pc, #20]	@ (80005bc <main+0x58>)
 80005a8:	f003 f970 	bl	800388c <HAL_SAI_Receive_DMA>
  uint32_t last_uart_tx_time = HAL_GetTick();
 80005ac:	f000 fda4 	bl	80010f8 <HAL_GetTick>
 80005b0:	6078      	str	r0, [r7, #4]

  //HAL_SAI_Receive(&hsai_BlockB2, (uint16_t*)i2s_rx_buffer, 2, 100);
  // Set guard value after audio buffer
  while (1)
 80005b2:	bf00      	nop
 80005b4:	e7fd      	b.n	80005b2 <main+0x4e>
 80005b6:	bf00      	nop
 80005b8:	200001f4 	.word	0x200001f4
 80005bc:	20000028 	.word	0x20000028

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	@ 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 031c 	add.w	r3, r7, #28
 80005ca:	2234      	movs	r2, #52	@ 0x34
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 fe1d 	bl	800520e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000694 <SystemClock_Config+0xd4>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005e8:	4a2a      	ldr	r2, [pc, #168]	@ (8000694 <SystemClock_Config+0xd4>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80005f0:	4b28      	ldr	r3, [pc, #160]	@ (8000694 <SystemClock_Config+0xd4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	4b26      	ldr	r3, [pc, #152]	@ (8000698 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a25      	ldr	r2, [pc, #148]	@ (8000698 <SystemClock_Config+0xd8>)
 8000602:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	4b23      	ldr	r3, [pc, #140]	@ (8000698 <SystemClock_Config+0xd8>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061c:	2310      	movs	r3, #16
 800061e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000620:	2302      	movs	r3, #2
 8000622:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000624:	2300      	movs	r3, #0
 8000626:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000628:	2308      	movs	r3, #8
 800062a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800062c:	23d8      	movs	r3, #216	@ 0xd8
 800062e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000638:	2302      	movs	r3, #2
 800063a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	4618      	mov	r0, r3
 8000642:	f001 fcbb 	bl	8001fbc <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x90>
  {
    Error_Handler();
 800064c:	f000 fad8 	bl	8000c00 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000650:	f001 fc64 	bl	8001f1c <HAL_PWREx_EnableOverDrive>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800065a:	f000 fad1 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065e:	230f      	movs	r3, #15
 8000660:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000662:	2302      	movs	r3, #2
 8000664:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800066a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800066e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000670:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000674:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	2107      	movs	r1, #7
 800067c:	4618      	mov	r0, r3
 800067e:	f001 ff4b 	bl	8002518 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000688:	f000 faba 	bl	8000c00 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	@ 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockB2.Instance = SAI2_Block_B;
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006a2:	4a29      	ldr	r2, [pc, #164]	@ (8000748 <MX_SAI2_Init+0xac>)
 80006a4:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80006a6:	4b27      	ldr	r3, [pc, #156]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODEMASTER_RX;
 80006ac:	4b25      	ldr	r3, [pc, #148]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_24;
 80006b2:	4b24      	ldr	r3, [pc, #144]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006b4:	22c0      	movs	r2, #192	@ 0xc0
 80006b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80006b8:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80006be:	4b21      	ldr	r3, [pc, #132]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai_BlockB2.Init.Synchro = SAI_ASYNCHRONOUS;
 80006c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
 80006dc:	4b19      	ldr	r3, [pc, #100]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006de:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80006e2:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80006f0:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai_BlockB2.FrameInit.FrameLength = 64;
 80006f6:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006f8:	2240      	movs	r2, #64	@ 0x40
 80006fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 32;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_SAI2_Init+0xa8>)
 80006fe:	2220      	movs	r2, #32
 8000700:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <MX_SAI2_Init+0xa8>)
 8000704:	2200      	movs	r2, #0
 8000706:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000708:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_SAI2_Init+0xa8>)
 800070a:	2200      	movs	r2, #0
 800070c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <MX_SAI2_Init+0xa8>)
 8000710:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000714:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 1;
 8000716:	4b0b      	ldr	r3, [pc, #44]	@ (8000744 <MX_SAI2_Init+0xa8>)
 8000718:	2201      	movs	r2, #1
 800071a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800071c:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_SAI2_Init+0xa8>)
 800071e:	2280      	movs	r2, #128	@ 0x80
 8000720:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 2;
 8000722:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <MX_SAI2_Init+0xa8>)
 8000724:	2202      	movs	r2, #2
 8000726:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000001;
 8000728:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_SAI2_Init+0xa8>)
 800072a:	2201      	movs	r2, #1
 800072c:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 800072e:	4805      	ldr	r0, [pc, #20]	@ (8000744 <MX_SAI2_Init+0xa8>)
 8000730:	f002 feaa 	bl	8003488 <HAL_SAI_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_SAI2_Init+0xa2>
  {
    Error_Handler();
 800073a:	f000 fa61 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	20000028 	.word	0x20000028
 8000748:	40015c24 	.word	0x40015c24

0800074c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000750:	4b13      	ldr	r3, [pc, #76]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 8000752:	4a14      	ldr	r2, [pc, #80]	@ (80007a4 <MX_USART3_UART_Init+0x58>)
 8000754:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1500000;
 8000756:	4b12      	ldr	r3, [pc, #72]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 8000758:	4a13      	ldr	r2, [pc, #76]	@ (80007a8 <MX_USART3_UART_Init+0x5c>)
 800075a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800075c:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000762:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000768:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 800076e:	4b0c      	ldr	r3, [pc, #48]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 8000770:	2208      	movs	r2, #8
 8000772:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000774:	4b0a      	ldr	r3, [pc, #40]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 8000776:	2200      	movs	r2, #0
 8000778:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 800077c:	2200      	movs	r2, #0
 800077e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 8000782:	2200      	movs	r2, #0
 8000784:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 8000788:	2200      	movs	r2, #0
 800078a:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <MX_USART3_UART_Init+0x54>)
 800078e:	f003 fbcf 	bl	8003f30 <HAL_UART_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_USART3_UART_Init+0x50>
  {
    Error_Handler();
 8000798:	f000 fa32 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800079c:	bf00      	nop
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	2000010c 	.word	0x2000010c
 80007a4:	40004800 	.word	0x40004800
 80007a8:	0016e360 	.word	0x0016e360

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b2:	4b16      	ldr	r3, [pc, #88]	@ (800080c <MX_DMA_Init+0x60>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a15      	ldr	r2, [pc, #84]	@ (800080c <MX_DMA_Init+0x60>)
 80007b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b13      	ldr	r3, [pc, #76]	@ (800080c <MX_DMA_Init+0x60>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007ca:	4b10      	ldr	r3, [pc, #64]	@ (800080c <MX_DMA_Init+0x60>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a0f      	ldr	r2, [pc, #60]	@ (800080c <MX_DMA_Init+0x60>)
 80007d0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b0d      	ldr	r3, [pc, #52]	@ (800080c <MX_DMA_Init+0x60>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	200e      	movs	r0, #14
 80007e8:	f000 fd91 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ec:	200e      	movs	r0, #14
 80007ee:	f000 fdaa 	bl	8001346 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2039      	movs	r0, #57	@ 0x39
 80007f8:	f000 fd89 	bl	800130e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007fc:	2039      	movs	r0, #57	@ 0x39
 80007fe:	f000 fda2 	bl	8001346 <HAL_NVIC_EnableIRQ>

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08c      	sub	sp, #48	@ 0x30
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	4b7d      	ldr	r3, [pc, #500]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a7c      	ldr	r2, [pc, #496]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b7a      	ldr	r3, [pc, #488]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	61bb      	str	r3, [r7, #24]
 800083c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	4b77      	ldr	r3, [pc, #476]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a76      	ldr	r2, [pc, #472]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b74      	ldr	r3, [pc, #464]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	4b71      	ldr	r3, [pc, #452]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a70      	ldr	r2, [pc, #448]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 800085c:	f043 0301 	orr.w	r3, r3, #1
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b6e      	ldr	r3, [pc, #440]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f003 0301 	and.w	r3, r3, #1
 800086a:	613b      	str	r3, [r7, #16]
 800086c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086e:	4b6b      	ldr	r3, [pc, #428]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a6a      	ldr	r2, [pc, #424]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b68      	ldr	r3, [pc, #416]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	4b65      	ldr	r3, [pc, #404]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a64      	ldr	r2, [pc, #400]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 800088c:	f043 0310 	orr.w	r3, r3, #16
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b62      	ldr	r3, [pc, #392]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0310 	and.w	r3, r3, #16
 800089a:	60bb      	str	r3, [r7, #8]
 800089c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800089e:	4b5f      	ldr	r3, [pc, #380]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a5e      	ldr	r2, [pc, #376]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 80008a4:	f043 0308 	orr.w	r3, r3, #8
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b5c      	ldr	r3, [pc, #368]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0308 	and.w	r3, r3, #8
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008b6:	4b59      	ldr	r3, [pc, #356]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a58      	ldr	r2, [pc, #352]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 80008bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_GPIO_Init+0x20c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008d4:	4852      	ldr	r0, [pc, #328]	@ (8000a20 <MX_GPIO_Init+0x210>)
 80008d6:	f001 fb07 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008da:	2200      	movs	r2, #0
 80008dc:	2140      	movs	r1, #64	@ 0x40
 80008de:	4851      	ldr	r0, [pc, #324]	@ (8000a24 <MX_GPIO_Init+0x214>)
 80008e0:	f001 fb02 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ea:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	484b      	ldr	r0, [pc, #300]	@ (8000a28 <MX_GPIO_Init+0x218>)
 80008fc:	f001 f948 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000900:	2332      	movs	r3, #50	@ 0x32
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000910:	230b      	movs	r3, #11
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4843      	ldr	r0, [pc, #268]	@ (8000a28 <MX_GPIO_Init+0x218>)
 800091c:	f001 f938 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000920:	2386      	movs	r3, #134	@ 0x86
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000930:	230b      	movs	r3, #11
 8000932:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	483c      	ldr	r0, [pc, #240]	@ (8000a2c <MX_GPIO_Init+0x21c>)
 800093c:	f001 f928 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000940:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	4831      	ldr	r0, [pc, #196]	@ (8000a20 <MX_GPIO_Init+0x210>)
 800095a:	f001 f919 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800095e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800096c:	2303      	movs	r3, #3
 800096e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000970:	230b      	movs	r3, #11
 8000972:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4829      	ldr	r0, [pc, #164]	@ (8000a20 <MX_GPIO_Init+0x210>)
 800097c:	f001 f908 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000980:	2340      	movs	r3, #64	@ 0x40
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	4823      	ldr	r0, [pc, #140]	@ (8000a24 <MX_GPIO_Init+0x214>)
 8000998:	f001 f8fa 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800099c:	2380      	movs	r3, #128	@ 0x80
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009a0:	2300      	movs	r3, #0
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	481d      	ldr	r0, [pc, #116]	@ (8000a24 <MX_GPIO_Init+0x214>)
 80009b0:	f001 f8ee 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009b4:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ba:	2302      	movs	r3, #2
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c2:	2303      	movs	r3, #3
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c6:	230a      	movs	r3, #10
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	4816      	ldr	r0, [pc, #88]	@ (8000a2c <MX_GPIO_Init+0x21c>)
 80009d2:	f001 f8dd 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80009d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009dc:	2300      	movs	r3, #0
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <MX_GPIO_Init+0x21c>)
 80009ec:	f001 f8d0 	bl	8001b90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009f0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80009f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a02:	230b      	movs	r3, #11
 8000a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	@ (8000a24 <MX_GPIO_Init+0x214>)
 8000a0e:	f001 f8bf 	bl	8001b90 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40023800 	.word	0x40023800
 8000a20:	40020400 	.word	0x40020400
 8000a24:	40021800 	.word	0x40021800
 8000a28:	40020800 	.word	0x40020800
 8000a2c:	40020000 	.word	0x40020000

08000a30 <HAL_SAI_RxHalfCpltCallback>:
}


*/

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
    uint8_t* tx_buf = audio_out_buffer[current_uart_buf];
 8000a38:	4b2b      	ldr	r3, [pc, #172]	@ (8000ae8 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	461a      	mov	r2, r3
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	025b      	lsls	r3, r3, #9
 8000a48:	4a28      	ldr	r2, [pc, #160]	@ (8000aec <HAL_SAI_RxHalfCpltCallback+0xbc>)
 8000a4a:	4413      	add	r3, r2
 8000a4c:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < AUDIO_BUFF_SIZE / 2; i++) {
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e02b      	b.n	8000aac <HAL_SAI_RxHalfCpltCallback+0x7c>
        tx_buf[i * 3 + 2] = (uint8_t)(pAudBuf[i] >> 16);
 8000a54:	4a26      	ldr	r2, [pc, #152]	@ (8000af0 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	0c19      	lsrs	r1, r3, #16
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	4613      	mov	r3, r2
 8000a62:	005b      	lsls	r3, r3, #1
 8000a64:	4413      	add	r3, r2
 8000a66:	3302      	adds	r3, #2
 8000a68:	68ba      	ldr	r2, [r7, #8]
 8000a6a:	4413      	add	r3, r2
 8000a6c:	b2ca      	uxtb	r2, r1
 8000a6e:	701a      	strb	r2, [r3, #0]
        tx_buf[i * 3 + 1] = (uint8_t)(pAudBuf[i] >> 8);
 8000a70:	4a1f      	ldr	r2, [pc, #124]	@ (8000af0 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a78:	0a19      	lsrs	r1, r3, #8
 8000a7a:	68fa      	ldr	r2, [r7, #12]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	005b      	lsls	r3, r3, #1
 8000a80:	4413      	add	r3, r2
 8000a82:	3301      	adds	r3, #1
 8000a84:	68ba      	ldr	r2, [r7, #8]
 8000a86:	4413      	add	r3, r2
 8000a88:	b2ca      	uxtb	r2, r1
 8000a8a:	701a      	strb	r2, [r3, #0]
        tx_buf[i * 3 + 0] = (uint8_t)(pAudBuf[i]);
 8000a8c:	4a18      	ldr	r2, [pc, #96]	@ (8000af0 <HAL_SAI_RxHalfCpltCallback+0xc0>)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	4613      	mov	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	4413      	add	r3, r2
 8000a9c:	461a      	mov	r2, r3
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4413      	add	r3, r2
 8000aa2:	b2ca      	uxtb	r2, r1
 8000aa4:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < AUDIO_BUFF_SIZE / 2; i++) {
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	60fb      	str	r3, [r7, #12]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000ab2:	dbcf      	blt.n	8000a54 <HAL_SAI_RxHalfCpltCallback+0x24>
    }

    if (!uart_dma_busy) {
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	@ (8000af4 <HAL_SAI_RxHalfCpltCallback+0xc4>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b2db      	uxtb	r3, r3
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d110      	bne.n	8000ae0 <HAL_SAI_RxHalfCpltCallback+0xb0>
        uart_dma_busy = 1;
 8000abe:	4b0d      	ldr	r3, [pc, #52]	@ (8000af4 <HAL_SAI_RxHalfCpltCallback+0xc4>)
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart3, tx_buf, AUDIO_UART_CHUNK);
 8000ac4:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000ac8:	68b9      	ldr	r1, [r7, #8]
 8000aca:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <HAL_SAI_RxHalfCpltCallback+0xc8>)
 8000acc:	f003 fa7e 	bl	8003fcc <HAL_UART_Transmit_DMA>
        current_uart_buf ^= 1;  // Toggle buffer (0 → 1, 1 → 0)
 8000ad0:	4b05      	ldr	r3, [pc, #20]	@ (8000ae8 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f083 0301 	eor.w	r3, r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b02      	ldr	r3, [pc, #8]	@ (8000ae8 <HAL_SAI_RxHalfCpltCallback+0xb8>)
 8000ade:	701a      	strb	r2, [r3, #0]
    }
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20001df4 	.word	0x20001df4
 8000aec:	200011f4 	.word	0x200011f4
 8000af0:	200001f4 	.word	0x200001f4
 8000af4:	20001df5 	.word	0x20001df5
 8000af8:	2000010c 	.word	0x2000010c

08000afc <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    uint8_t* tx_buf = audio_out_buffer[current_uart_buf];
 8000b04:	4b2e      	ldr	r3, [pc, #184]	@ (8000bc0 <HAL_SAI_RxCpltCallback+0xc4>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	4613      	mov	r3, r2
 8000b0e:	005b      	lsls	r3, r3, #1
 8000b10:	4413      	add	r3, r2
 8000b12:	025b      	lsls	r3, r3, #9
 8000b14:	4a2b      	ldr	r2, [pc, #172]	@ (8000bc4 <HAL_SAI_RxCpltCallback+0xc8>)
 8000b16:	4413      	add	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]

    for (int i = AUDIO_BUFF_SIZE / 2; i < AUDIO_BUFF_SIZE; i++) {
 8000b1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b1e:	617b      	str	r3, [r7, #20]
 8000b20:	e02f      	b.n	8000b82 <HAL_SAI_RxCpltCallback+0x86>
        int j = i - AUDIO_BUFF_SIZE / 2;
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8000b28:	60fb      	str	r3, [r7, #12]
        tx_buf[j * 3 + 2] = (uint8_t)(pAudBuf[i] >> 16);
 8000b2a:	4a27      	ldr	r2, [pc, #156]	@ (8000bc8 <HAL_SAI_RxCpltCallback+0xcc>)
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b32:	0c19      	lsrs	r1, r3, #16
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	4613      	mov	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	4413      	add	r3, r2
 8000b3c:	3302      	adds	r3, #2
 8000b3e:	693a      	ldr	r2, [r7, #16]
 8000b40:	4413      	add	r3, r2
 8000b42:	b2ca      	uxtb	r2, r1
 8000b44:	701a      	strb	r2, [r3, #0]
        tx_buf[j * 3 + 1] = (uint8_t)(pAudBuf[i] >> 8);
 8000b46:	4a20      	ldr	r2, [pc, #128]	@ (8000bc8 <HAL_SAI_RxCpltCallback+0xcc>)
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4e:	0a19      	lsrs	r1, r3, #8
 8000b50:	68fa      	ldr	r2, [r7, #12]
 8000b52:	4613      	mov	r3, r2
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	4413      	add	r3, r2
 8000b58:	3301      	adds	r3, #1
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b2ca      	uxtb	r2, r1
 8000b60:	701a      	strb	r2, [r3, #0]
        tx_buf[j * 3 + 0] = (uint8_t)(pAudBuf[i]);
 8000b62:	4a19      	ldr	r2, [pc, #100]	@ (8000bc8 <HAL_SAI_RxCpltCallback+0xcc>)
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	4413      	add	r3, r2
 8000b72:	461a      	mov	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	4413      	add	r3, r2
 8000b78:	b2ca      	uxtb	r2, r1
 8000b7a:	701a      	strb	r2, [r3, #0]
    for (int i = AUDIO_BUFF_SIZE / 2; i < AUDIO_BUFF_SIZE; i++) {
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b88:	dbcb      	blt.n	8000b22 <HAL_SAI_RxCpltCallback+0x26>
    }

    if (!uart_dma_busy) {
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <HAL_SAI_RxCpltCallback+0xd0>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d110      	bne.n	8000bb6 <HAL_SAI_RxCpltCallback+0xba>
        uart_dma_busy = 1;
 8000b94:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_SAI_RxCpltCallback+0xd0>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit_DMA(&huart3, tx_buf, AUDIO_UART_CHUNK);
 8000b9a:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8000b9e:	6939      	ldr	r1, [r7, #16]
 8000ba0:	480b      	ldr	r0, [pc, #44]	@ (8000bd0 <HAL_SAI_RxCpltCallback+0xd4>)
 8000ba2:	f003 fa13 	bl	8003fcc <HAL_UART_Transmit_DMA>
        current_uart_buf ^= 1;  // Toggle buffer
 8000ba6:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <HAL_SAI_RxCpltCallback+0xc4>)
 8000ba8:	781b      	ldrb	r3, [r3, #0]
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <HAL_SAI_RxCpltCallback+0xc4>)
 8000bb4:	701a      	strb	r2, [r3, #0]
    }
}
 8000bb6:	bf00      	nop
 8000bb8:	3718      	adds	r7, #24
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20001df4 	.word	0x20001df4
 8000bc4:	200011f4 	.word	0x200011f4
 8000bc8:	200001f4 	.word	0x200001f4
 8000bcc:	20001df5 	.word	0x20001df5
 8000bd0:	2000010c 	.word	0x2000010c

08000bd4 <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <HAL_UART_TxCpltCallback+0x24>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d102      	bne.n	8000bec <HAL_UART_TxCpltCallback+0x18>
        uart_dma_busy = 0;
 8000be6:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_UART_TxCpltCallback+0x28>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	701a      	strb	r2, [r3, #0]
    }
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr
 8000bf8:	40004800 	.word	0x40004800
 8000bfc:	20001df5 	.word	0x20001df5

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x44>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ae      	sub	sp, #184	@ 0xb8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0314 	add.w	r3, r7, #20
 8000c70:	2290      	movs	r2, #144	@ 0x90
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f004 faca 	bl	800520e <memset>
  if(huart->Instance==USART3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a3d      	ldr	r2, [pc, #244]	@ (8000d74 <HAL_UART_MspInit+0x120>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d173      	bne.n	8000d6c <HAL_UART_MspInit+0x118>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c84:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c88:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fe64 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c9e:	f7ff ffaf 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca2:	4b35      	ldr	r3, [pc, #212]	@ (8000d78 <HAL_UART_MspInit+0x124>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca6:	4a34      	ldr	r2, [pc, #208]	@ (8000d78 <HAL_UART_MspInit+0x124>)
 8000ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cae:	4b32      	ldr	r3, [pc, #200]	@ (8000d78 <HAL_UART_MspInit+0x124>)
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cb2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cb6:	613b      	str	r3, [r7, #16]
 8000cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cba:	4b2f      	ldr	r3, [pc, #188]	@ (8000d78 <HAL_UART_MspInit+0x124>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8000d78 <HAL_UART_MspInit+0x124>)
 8000cc0:	f043 0308 	orr.w	r3, r3, #8
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d78 <HAL_UART_MspInit+0x124>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0308 	and.w	r3, r3, #8
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cec:	2307      	movs	r3, #7
 8000cee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf2:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	4820      	ldr	r0, [pc, #128]	@ (8000d7c <HAL_UART_MspInit+0x128>)
 8000cfa:	f000 ff49 	bl	8001b90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8000cfe:	4b20      	ldr	r3, [pc, #128]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d00:	4a20      	ldr	r2, [pc, #128]	@ (8000d84 <HAL_UART_MspInit+0x130>)
 8000d02:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8000d04:	4b1e      	ldr	r3, [pc, #120]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d06:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d0a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d0c:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d0e:	2240      	movs	r2, #64	@ 0x40
 8000d10:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d12:	4b1b      	ldr	r3, [pc, #108]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d18:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d1a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d1e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d20:	4b17      	ldr	r3, [pc, #92]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d26:	4b16      	ldr	r3, [pc, #88]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000d2c:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000d32:	4b13      	ldr	r3, [pc, #76]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d34:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000d38:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000d40:	480f      	ldr	r0, [pc, #60]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d42:	f000 fb1b 	bl	800137c <HAL_DMA_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <HAL_UART_MspInit+0xfc>
    {
      Error_Handler();
 8000d4c:	f7ff ff58 	bl	8000c00 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a0b      	ldr	r2, [pc, #44]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d54:	671a      	str	r2, [r3, #112]	@ 0x70
 8000d56:	4a0a      	ldr	r2, [pc, #40]	@ (8000d80 <HAL_UART_MspInit+0x12c>)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2027      	movs	r0, #39	@ 0x27
 8000d62:	f000 fad4 	bl	800130e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d66:	2027      	movs	r0, #39	@ 0x27
 8000d68:	f000 faed 	bl	8001346 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	37b8      	adds	r7, #184	@ 0xb8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004800 	.word	0x40004800
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	20000194 	.word	0x20000194
 8000d84:	40026058 	.word	0x40026058

08000d88 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b0ac      	sub	sp, #176	@ 0xb0
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2290      	movs	r2, #144	@ 0x90
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f004 fa38 	bl	800520e <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_B)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a5b      	ldr	r2, [pc, #364]	@ (8000f10 <HAL_SAI_MspInit+0x188>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f040 80af 	bne.w	8000f08 <HAL_SAI_MspInit+0x180>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000daa:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000dae:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 172;
 8000db0:	23ac      	movs	r3, #172	@ 0xac
 8000db2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000db4:	2302      	movs	r3, #2
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLLSAI.PLLSAIQ = 7;
 8000db8:	2307      	movs	r3, #7
 8000dba:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLLSAIDivQ = 6;
 8000dc0:	2306      	movs	r3, #6
 8000dc2:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f001 fdc5 	bl	8002960 <HAL_RCCEx_PeriphCLKConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <HAL_SAI_MspInit+0x58>
    {
      Error_Handler();
 8000ddc:	f7ff ff10 	bl	8000c00 <Error_Handler>
    }

      if (SAI2_client == 0)
 8000de0:	4b4c      	ldr	r3, [pc, #304]	@ (8000f14 <HAL_SAI_MspInit+0x18c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d113      	bne.n	8000e10 <HAL_SAI_MspInit+0x88>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000de8:	4b4b      	ldr	r3, [pc, #300]	@ (8000f18 <HAL_SAI_MspInit+0x190>)
 8000dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dec:	4a4a      	ldr	r2, [pc, #296]	@ (8000f18 <HAL_SAI_MspInit+0x190>)
 8000dee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000df2:	6453      	str	r3, [r2, #68]	@ 0x44
 8000df4:	4b48      	ldr	r3, [pc, #288]	@ (8000f18 <HAL_SAI_MspInit+0x190>)
 8000df6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2100      	movs	r1, #0
 8000e04:	205b      	movs	r0, #91	@ 0x5b
 8000e06:	f000 fa82 	bl	800130e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e0a:	205b      	movs	r0, #91	@ 0x5b
 8000e0c:	f000 fa9b 	bl	8001346 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000e10:	4b40      	ldr	r3, [pc, #256]	@ (8000f14 <HAL_SAI_MspInit+0x18c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a3f      	ldr	r2, [pc, #252]	@ (8000f14 <HAL_SAI_MspInit+0x18c>)
 8000e18:	6013      	str	r3, [r2, #0]
    /**SAI2_B_Block_B GPIO Configuration
    PC0     ------> SAI2_FS_B
    PA0/WKUP     ------> SAI2_SD_B
    PE12     ------> SAI2_SCK_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_SAI2;
 8000e32:	2308      	movs	r3, #8
 8000e34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e38:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4837      	ldr	r0, [pc, #220]	@ (8000f1c <HAL_SAI_MspInit+0x194>)
 8000e40:	f000 fea6 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e44:	2301      	movs	r3, #1
 8000e46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e5c:	230a      	movs	r3, #10
 8000e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e62:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e66:	4619      	mov	r1, r3
 8000e68:	482d      	ldr	r0, [pc, #180]	@ (8000f20 <HAL_SAI_MspInit+0x198>)
 8000e6a:	f000 fe91 	bl	8001b90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000e6e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e82:	2300      	movs	r3, #0
 8000e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000e88:	230a      	movs	r3, #10
 8000e8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e92:	4619      	mov	r1, r3
 8000e94:	4823      	ldr	r0, [pc, #140]	@ (8000f24 <HAL_SAI_MspInit+0x19c>)
 8000e96:	f000 fe7b 	bl	8001b90 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream1;
 8000e9a:	4b23      	ldr	r3, [pc, #140]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000e9c:	4a23      	ldr	r2, [pc, #140]	@ (8000f2c <HAL_SAI_MspInit+0x1a4>)
 8000e9e:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_10;
 8000ea0:	4b21      	ldr	r3, [pc, #132]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ea2:	f04f 52a0 	mov.w	r2, #335544320	@ 0x14000000
 8000ea6:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eae:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000eb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000eb6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ebe:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000ec2:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ec6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eca:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000ecc:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ece:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ed2:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eda:	4b13      	ldr	r3, [pc, #76]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000ee0:	4811      	ldr	r0, [pc, #68]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ee2:	f000 fa4b 	bl	800137c <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_SAI_MspInit+0x168>
    {
      Error_Handler();
 8000eec:	f7ff fe88 	bl	8000c00 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ef4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a0a      	ldr	r2, [pc, #40]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000f00:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f02:	4a09      	ldr	r2, [pc, #36]	@ (8000f28 <HAL_SAI_MspInit+0x1a0>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6393      	str	r3, [r2, #56]	@ 0x38
    }
}
 8000f08:	bf00      	nop
 8000f0a:	37b0      	adds	r7, #176	@ 0xb0
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	40015c24 	.word	0x40015c24
 8000f14:	20001df8 	.word	0x20001df8
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020800 	.word	0x40020800
 8000f20:	40020000 	.word	0x40020000
 8000f24:	40021000 	.word	0x40021000
 8000f28:	200000ac 	.word	0x200000ac
 8000f2c:	40026428 	.word	0x40026428

08000f30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <NMI_Handler+0x4>

08000f38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <HardFault_Handler+0x4>

08000f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <MemManage_Handler+0x4>

08000f48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5c:	bf00      	nop
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr

08000f66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr

08000f82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f86:	f000 f8a3 	bl	80010d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f8a:	bf00      	nop
 8000f8c:	bd80      	pop	{r7, pc}
	...

08000f90 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8000f94:	4802      	ldr	r0, [pc, #8]	@ (8000fa0 <DMA1_Stream3_IRQHandler+0x10>)
 8000f96:	f000 fb91 	bl	80016bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000194 	.word	0x20000194

08000fa4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000fa8:	4802      	ldr	r0, [pc, #8]	@ (8000fb4 <USART3_IRQHandler+0x10>)
 8000faa:	f003 f88b 	bl	80040c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000010c 	.word	0x2000010c

08000fb8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <DMA2_Stream1_IRQHandler+0x10>)
 8000fbe:	f000 fb7d 	bl	80016bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	200000ac 	.word	0x200000ac

08000fcc <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 8000fd0:	4802      	ldr	r0, [pc, #8]	@ (8000fdc <SAI2_IRQHandler+0x10>)
 8000fd2:	f002 fce9 	bl	80039a8 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	20000028 	.word	0x20000028

08000fe0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	@ (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001004:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800103c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001008:	f7ff ffea 	bl	8000fe0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800100c:	480c      	ldr	r0, [pc, #48]	@ (8001040 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800100e:	490d      	ldr	r1, [pc, #52]	@ (8001044 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001010:	4a0d      	ldr	r2, [pc, #52]	@ (8001048 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001012:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001014:	e002      	b.n	800101c <LoopCopyDataInit>

08001016 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001016:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001018:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800101a:	3304      	adds	r3, #4

0800101c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800101c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001020:	d3f9      	bcc.n	8001016 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001022:	4a0a      	ldr	r2, [pc, #40]	@ (800104c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001024:	4c0a      	ldr	r4, [pc, #40]	@ (8001050 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001028:	e001      	b.n	800102e <LoopFillZerobss>

0800102a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800102a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800102c:	3204      	adds	r2, #4

0800102e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001030:	d3fb      	bcc.n	800102a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001032:	f004 f8f5 	bl	8005220 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff fa95 	bl	8000564 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800103c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001044:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001048:	080052b0 	.word	0x080052b0
  ldr r2, =_sbss
 800104c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001050:	20001e00 	.word	0x20001e00

08001054 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001054:	e7fe      	b.n	8001054 <ADC_IRQHandler>

08001056 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105a:	2003      	movs	r0, #3
 800105c:	f000 f94c 	bl	80012f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001060:	2000      	movs	r0, #0
 8001062:	f000 f805 	bl	8001070 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001066:	f7ff fdd1 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
}
 800106c:	4618      	mov	r0, r3
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001078:	4b12      	ldr	r3, [pc, #72]	@ (80010c4 <HAL_InitTick+0x54>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b12      	ldr	r3, [pc, #72]	@ (80010c8 <HAL_InitTick+0x58>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001086:	fbb3 f3f1 	udiv	r3, r3, r1
 800108a:	fbb2 f3f3 	udiv	r3, r2, r3
 800108e:	4618      	mov	r0, r3
 8001090:	f000 f967 	bl	8001362 <HAL_SYSTICK_Config>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
 800109c:	e00e      	b.n	80010bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b0f      	cmp	r3, #15
 80010a2:	d80a      	bhi.n	80010ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010a4:	2200      	movs	r2, #0
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295
 80010ac:	f000 f92f 	bl	800130e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010b0:	4a06      	ldr	r2, [pc, #24]	@ (80010cc <HAL_InitTick+0x5c>)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010b6:	2300      	movs	r3, #0
 80010b8:	e000      	b.n	80010bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000000 	.word	0x20000000
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20000004 	.word	0x20000004

080010d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010d4:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_IncTick+0x20>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	4b06      	ldr	r3, [pc, #24]	@ (80010f4 <HAL_IncTick+0x24>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4413      	add	r3, r2
 80010e0:	4a04      	ldr	r2, [pc, #16]	@ (80010f4 <HAL_IncTick+0x24>)
 80010e2:	6013      	str	r3, [r2, #0]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	20000008 	.word	0x20000008
 80010f4:	20001dfc 	.word	0x20001dfc

080010f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  return uwTick;
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetTick+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	20001dfc 	.word	0x20001dfc

08001110 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff ffee 	bl	80010f8 <HAL_GetTick>
 800111c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001128:	d005      	beq.n	8001136 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800112a:	4b0a      	ldr	r3, [pc, #40]	@ (8001154 <HAL_Delay+0x44>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	4413      	add	r3, r2
 8001134:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001136:	bf00      	nop
 8001138:	f7ff ffde 	bl	80010f8 <HAL_GetTick>
 800113c:	4602      	mov	r2, r0
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d8f7      	bhi.n	8001138 <HAL_Delay+0x28>
  {
  }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000008 	.word	0x20000008

08001158 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f003 0307 	and.w	r3, r3, #7
 8001166:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001168:	4b0b      	ldr	r3, [pc, #44]	@ (8001198 <__NVIC_SetPriorityGrouping+0x40>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001174:	4013      	ands	r3, r2
 8001176:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001180:	4b06      	ldr	r3, [pc, #24]	@ (800119c <__NVIC_SetPriorityGrouping+0x44>)
 8001182:	4313      	orrs	r3, r2
 8001184:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001186:	4a04      	ldr	r2, [pc, #16]	@ (8001198 <__NVIC_SetPriorityGrouping+0x40>)
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	60d3      	str	r3, [r2, #12]
}
 800118c:	bf00      	nop
 800118e:	3714      	adds	r7, #20
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00
 800119c:	05fa0000 	.word	0x05fa0000

080011a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011a4:	4b04      	ldr	r3, [pc, #16]	@ (80011b8 <__NVIC_GetPriorityGrouping+0x18>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	0a1b      	lsrs	r3, r3, #8
 80011aa:	f003 0307 	and.w	r3, r3, #7
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000ed00 	.word	0xe000ed00

080011bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	4603      	mov	r3, r0
 80011c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	db0b      	blt.n	80011e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f003 021f 	and.w	r2, r3, #31
 80011d4:	4907      	ldr	r1, [pc, #28]	@ (80011f4 <__NVIC_EnableIRQ+0x38>)
 80011d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011da:	095b      	lsrs	r3, r3, #5
 80011dc:	2001      	movs	r0, #1
 80011de:	fa00 f202 	lsl.w	r2, r0, r2
 80011e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	e000e100 	.word	0xe000e100

080011f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	6039      	str	r1, [r7, #0]
 8001202:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001204:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001208:	2b00      	cmp	r3, #0
 800120a:	db0a      	blt.n	8001222 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	b2da      	uxtb	r2, r3
 8001210:	490c      	ldr	r1, [pc, #48]	@ (8001244 <__NVIC_SetPriority+0x4c>)
 8001212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001216:	0112      	lsls	r2, r2, #4
 8001218:	b2d2      	uxtb	r2, r2
 800121a:	440b      	add	r3, r1
 800121c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001220:	e00a      	b.n	8001238 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4908      	ldr	r1, [pc, #32]	@ (8001248 <__NVIC_SetPriority+0x50>)
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	3b04      	subs	r3, #4
 8001230:	0112      	lsls	r2, r2, #4
 8001232:	b2d2      	uxtb	r2, r2
 8001234:	440b      	add	r3, r1
 8001236:	761a      	strb	r2, [r3, #24]
}
 8001238:	bf00      	nop
 800123a:	370c      	adds	r7, #12
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000e100 	.word	0xe000e100
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800124c:	b480      	push	{r7}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f003 0307 	and.w	r3, r3, #7
 800125e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f1c3 0307 	rsb	r3, r3, #7
 8001266:	2b04      	cmp	r3, #4
 8001268:	bf28      	it	cs
 800126a:	2304      	movcs	r3, #4
 800126c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	3304      	adds	r3, #4
 8001272:	2b06      	cmp	r3, #6
 8001274:	d902      	bls.n	800127c <NVIC_EncodePriority+0x30>
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3b03      	subs	r3, #3
 800127a:	e000      	b.n	800127e <NVIC_EncodePriority+0x32>
 800127c:	2300      	movs	r3, #0
 800127e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43da      	mvns	r2, r3
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	401a      	ands	r2, r3
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001294:	f04f 31ff 	mov.w	r1, #4294967295
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	fa01 f303 	lsl.w	r3, r1, r3
 800129e:	43d9      	mvns	r1, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a4:	4313      	orrs	r3, r2
         );
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3724      	adds	r7, #36	@ 0x24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012c4:	d301      	bcc.n	80012ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00f      	b.n	80012ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ca:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <SysTick_Config+0x40>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3b01      	subs	r3, #1
 80012d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012d2:	210f      	movs	r1, #15
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f7ff ff8e 	bl	80011f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <SysTick_Config+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012e2:	4b04      	ldr	r3, [pc, #16]	@ (80012f4 <SysTick_Config+0x40>)
 80012e4:	2207      	movs	r2, #7
 80012e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	e000e010 	.word	0xe000e010

080012f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f7ff ff29 	bl	8001158 <__NVIC_SetPriorityGrouping>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}

0800130e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	4603      	mov	r3, r0
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
 800131a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001320:	f7ff ff3e 	bl	80011a0 <__NVIC_GetPriorityGrouping>
 8001324:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	68b9      	ldr	r1, [r7, #8]
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff ff8e 	bl	800124c <NVIC_EncodePriority>
 8001330:	4602      	mov	r2, r0
 8001332:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001336:	4611      	mov	r1, r2
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff5d 	bl	80011f8 <__NVIC_SetPriority>
}
 800133e:	bf00      	nop
 8001340:	3718      	adds	r7, #24
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001350:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff31 	bl	80011bc <__NVIC_EnableIRQ>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ffa2 	bl	80012b4 <SysTick_Config>
 8001370:	4603      	mov	r3, r0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
	...

0800137c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff feb6 	bl	80010f8 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d101      	bne.n	8001398 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e099      	b.n	80014cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2202      	movs	r2, #2
 800139c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013b8:	e00f      	b.n	80013da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013ba:	f7ff fe9d 	bl	80010f8 <HAL_GetTick>
 80013be:	4602      	mov	r2, r0
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	2b05      	cmp	r3, #5
 80013c6:	d908      	bls.n	80013da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2220      	movs	r2, #32
 80013cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2203      	movs	r2, #3
 80013d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80013d6:	2303      	movs	r3, #3
 80013d8:	e078      	b.n	80014cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0301 	and.w	r3, r3, #1
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d1e8      	bne.n	80013ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	4b38      	ldr	r3, [pc, #224]	@ (80014d4 <HAL_DMA_Init+0x158>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001406:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001412:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	699b      	ldr	r3, [r3, #24]
 8001418:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a1b      	ldr	r3, [r3, #32]
 8001424:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	4313      	orrs	r3, r2
 800142a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001430:	2b04      	cmp	r3, #4
 8001432:	d107      	bne.n	8001444 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143c:	4313      	orrs	r3, r2
 800143e:	697a      	ldr	r2, [r7, #20]
 8001440:	4313      	orrs	r3, r2
 8001442:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	697a      	ldr	r2, [r7, #20]
 800144a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	f023 0307 	bic.w	r3, r3, #7
 800145a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001460:	697a      	ldr	r2, [r7, #20]
 8001462:	4313      	orrs	r3, r2
 8001464:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	2b04      	cmp	r3, #4
 800146c:	d117      	bne.n	800149e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	4313      	orrs	r3, r2
 8001476:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00e      	beq.n	800149e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fb09 	bl	8001a98 <DMA_CheckFifoParam>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d008      	beq.n	800149e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2240      	movs	r2, #64	@ 0x40
 8001490:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2200      	movs	r2, #0
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800149a:	2301      	movs	r3, #1
 800149c:	e016      	b.n	80014cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 fac0 	bl	8001a2c <DMA_CalcBaseAndBitshift>
 80014ac:	4603      	mov	r3, r0
 80014ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b4:	223f      	movs	r2, #63	@ 0x3f
 80014b6:	409a      	lsls	r2, r3
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2200      	movs	r2, #0
 80014c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2201      	movs	r2, #1
 80014c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	e010803f 	.word	0xe010803f

080014d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
 80014e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014e6:	2300      	movs	r3, #0
 80014e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d101      	bne.n	80014fe <HAL_DMA_Start_IT+0x26>
 80014fa:	2302      	movs	r3, #2
 80014fc:	e048      	b.n	8001590 <HAL_DMA_Start_IT+0xb8>
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800150c:	b2db      	uxtb	r3, r3
 800150e:	2b01      	cmp	r3, #1
 8001510:	d137      	bne.n	8001582 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2202      	movs	r2, #2
 8001516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2200      	movs	r2, #0
 800151e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	68b9      	ldr	r1, [r7, #8]
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 fa52 	bl	80019d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001530:	223f      	movs	r2, #63	@ 0x3f
 8001532:	409a      	lsls	r2, r3
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f042 0216 	orr.w	r2, r2, #22
 8001546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001556:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d007      	beq.n	8001570 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f042 0208 	orr.w	r2, r2, #8
 800156e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f042 0201 	orr.w	r2, r2, #1
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	e005      	b.n	800158e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800158a:	2302      	movs	r3, #2
 800158c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800158e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001590:	4618      	mov	r0, r3
 8001592:	3718      	adds	r7, #24
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015a6:	f7ff fda7 	bl	80010f8 <HAL_GetTick>
 80015aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d008      	beq.n	80015ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2280      	movs	r2, #128	@ 0x80
 80015bc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e052      	b.n	8001670 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f022 0216 	bic.w	r2, r2, #22
 80015d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	695a      	ldr	r2, [r3, #20]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d103      	bne.n	80015fa <HAL_DMA_Abort+0x62>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d007      	beq.n	800160a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 0208 	bic.w	r2, r2, #8
 8001608:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800161a:	e013      	b.n	8001644 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800161c:	f7ff fd6c 	bl	80010f8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b05      	cmp	r3, #5
 8001628:	d90c      	bls.n	8001644 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2220      	movs	r2, #32
 800162e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2203      	movs	r2, #3
 8001634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2200      	movs	r2, #0
 800163c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e015      	b.n	8001670 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	d1e4      	bne.n	800161c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001656:	223f      	movs	r2, #63	@ 0x3f
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2201      	movs	r2, #1
 8001662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2200      	movs	r2, #0
 800166a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d004      	beq.n	8001696 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2280      	movs	r2, #128	@ 0x80
 8001690:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e00c      	b.n	80016b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2205      	movs	r2, #5
 800169a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80016c8:	4b8e      	ldr	r3, [pc, #568]	@ (8001904 <HAL_DMA_IRQHandler+0x248>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a8e      	ldr	r2, [pc, #568]	@ (8001908 <HAL_DMA_IRQHandler+0x24c>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	0a9b      	lsrs	r3, r3, #10
 80016d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016e6:	2208      	movs	r2, #8
 80016e8:	409a      	lsls	r2, r3
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	4013      	ands	r3, r2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d01a      	beq.n	8001728 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d013      	beq.n	8001728 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0204 	bic.w	r2, r2, #4
 800170e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001714:	2208      	movs	r2, #8
 8001716:	409a      	lsls	r2, r3
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001720:	f043 0201 	orr.w	r2, r3, #1
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800172c:	2201      	movs	r2, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d012      	beq.n	800175e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00b      	beq.n	800175e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800174a:	2201      	movs	r2, #1
 800174c:	409a      	lsls	r2, r3
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001756:	f043 0202 	orr.w	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001762:	2204      	movs	r2, #4
 8001764:	409a      	lsls	r2, r3
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4013      	ands	r3, r2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d012      	beq.n	8001794 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00b      	beq.n	8001794 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001780:	2204      	movs	r2, #4
 8001782:	409a      	lsls	r2, r3
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800178c:	f043 0204 	orr.w	r2, r3, #4
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001798:	2210      	movs	r2, #16
 800179a:	409a      	lsls	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4013      	ands	r3, r2
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d043      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d03c      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b6:	2210      	movs	r2, #16
 80017b8:	409a      	lsls	r2, r3
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d018      	beq.n	80017fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d108      	bne.n	80017ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d024      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	4798      	blx	r3
 80017ea:	e01f      	b.n	800182c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d01b      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	4798      	blx	r3
 80017fc:	e016      	b.n	800182c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f022 0208 	bic.w	r2, r2, #8
 800181a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001820:	2b00      	cmp	r3, #0
 8001822:	d003      	beq.n	800182c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	6878      	ldr	r0, [r7, #4]
 800182a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001830:	2220      	movs	r2, #32
 8001832:	409a      	lsls	r2, r3
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4013      	ands	r3, r2
 8001838:	2b00      	cmp	r3, #0
 800183a:	f000 808f 	beq.w	800195c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8087 	beq.w	800195c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001852:	2220      	movs	r2, #32
 8001854:	409a      	lsls	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b05      	cmp	r3, #5
 8001864:	d136      	bne.n	80018d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0216 	bic.w	r2, r2, #22
 8001874:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001884:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188a:	2b00      	cmp	r3, #0
 800188c:	d103      	bne.n	8001896 <HAL_DMA_IRQHandler+0x1da>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0208 	bic.w	r2, r2, #8
 80018a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018aa:	223f      	movs	r2, #63	@ 0x3f
 80018ac:	409a      	lsls	r2, r3
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d07e      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	4798      	blx	r3
        }
        return;
 80018d2:	e079      	b.n	80019c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d01d      	beq.n	800191e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10d      	bne.n	800190c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d031      	beq.n	800195c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018fc:	6878      	ldr	r0, [r7, #4]
 80018fe:	4798      	blx	r3
 8001900:	e02c      	b.n	800195c <HAL_DMA_IRQHandler+0x2a0>
 8001902:	bf00      	nop
 8001904:	20000000 	.word	0x20000000
 8001908:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001910:	2b00      	cmp	r3, #0
 8001912:	d023      	beq.n	800195c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	4798      	blx	r3
 800191c:	e01e      	b.n	800195c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001928:	2b00      	cmp	r3, #0
 800192a:	d10f      	bne.n	800194c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0210 	bic.w	r2, r2, #16
 800193a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2200      	movs	r2, #0
 8001948:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001950:	2b00      	cmp	r3, #0
 8001952:	d003      	beq.n	800195c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001960:	2b00      	cmp	r3, #0
 8001962:	d032      	beq.n	80019ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001968:	f003 0301 	and.w	r3, r3, #1
 800196c:	2b00      	cmp	r3, #0
 800196e:	d022      	beq.n	80019b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2205      	movs	r2, #5
 8001974:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f022 0201 	bic.w	r2, r2, #1
 8001986:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	3301      	adds	r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	429a      	cmp	r2, r3
 8001992:	d307      	bcc.n	80019a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d1f2      	bne.n	8001988 <HAL_DMA_IRQHandler+0x2cc>
 80019a2:	e000      	b.n	80019a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80019a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	2200      	movs	r2, #0
 80019b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d005      	beq.n	80019ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	4798      	blx	r3
 80019c6:	e000      	b.n	80019ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80019c8:	bf00      	nop
    }
  }
}
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	60f8      	str	r0, [r7, #12]
 80019d8:	60b9      	str	r1, [r7, #8]
 80019da:	607a      	str	r2, [r7, #4]
 80019dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80019ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	683a      	ldr	r2, [r7, #0]
 80019f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	2b40      	cmp	r3, #64	@ 0x40
 80019fc:	d108      	bne.n	8001a10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a0e:	e007      	b.n	8001a20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	68ba      	ldr	r2, [r7, #8]
 8001a16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	60da      	str	r2, [r3, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	3b10      	subs	r3, #16
 8001a3c:	4a13      	ldr	r2, [pc, #76]	@ (8001a8c <DMA_CalcBaseAndBitshift+0x60>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	091b      	lsrs	r3, r3, #4
 8001a44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a46:	4a12      	ldr	r2, [pc, #72]	@ (8001a90 <DMA_CalcBaseAndBitshift+0x64>)
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4413      	add	r3, r2
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	461a      	mov	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d908      	bls.n	8001a6c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	4b0c      	ldr	r3, [pc, #48]	@ (8001a94 <DMA_CalcBaseAndBitshift+0x68>)
 8001a62:	4013      	ands	r3, r2
 8001a64:	1d1a      	adds	r2, r3, #4
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a6a:	e006      	b.n	8001a7a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	461a      	mov	r2, r3
 8001a72:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <DMA_CalcBaseAndBitshift+0x68>)
 8001a74:	4013      	ands	r3, r2
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	aaaaaaab 	.word	0xaaaaaaab
 8001a90:	08005298 	.word	0x08005298
 8001a94:	fffffc00 	.word	0xfffffc00

08001a98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	699b      	ldr	r3, [r3, #24]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d11f      	bne.n	8001af2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	2b03      	cmp	r3, #3
 8001ab6:	d856      	bhi.n	8001b66 <DMA_CheckFifoParam+0xce>
 8001ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ac0 <DMA_CheckFifoParam+0x28>)
 8001aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001abe:	bf00      	nop
 8001ac0:	08001ad1 	.word	0x08001ad1
 8001ac4:	08001ae3 	.word	0x08001ae3
 8001ac8:	08001ad1 	.word	0x08001ad1
 8001acc:	08001b67 	.word	0x08001b67
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ad4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d046      	beq.n	8001b6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ae0:	e043      	b.n	8001b6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ae6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001aea:	d140      	bne.n	8001b6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001af0:	e03d      	b.n	8001b6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001afa:	d121      	bne.n	8001b40 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b03      	cmp	r3, #3
 8001b00:	d837      	bhi.n	8001b72 <DMA_CheckFifoParam+0xda>
 8001b02:	a201      	add	r2, pc, #4	@ (adr r2, 8001b08 <DMA_CheckFifoParam+0x70>)
 8001b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b08:	08001b19 	.word	0x08001b19
 8001b0c:	08001b1f 	.word	0x08001b1f
 8001b10:	08001b19 	.word	0x08001b19
 8001b14:	08001b31 	.word	0x08001b31
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b1c:	e030      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b22:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d025      	beq.n	8001b76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b2e:	e022      	b.n	8001b76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b34:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b38:	d11f      	bne.n	8001b7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b3e:	e01c      	b.n	8001b7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d903      	bls.n	8001b4e <DMA_CheckFifoParam+0xb6>
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	2b03      	cmp	r3, #3
 8001b4a:	d003      	beq.n	8001b54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b4c:	e018      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	73fb      	strb	r3, [r7, #15]
      break;
 8001b52:	e015      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
      break;
 8001b64:	e00b      	b.n	8001b7e <DMA_CheckFifoParam+0xe6>
      break;
 8001b66:	bf00      	nop
 8001b68:	e00a      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6a:	bf00      	nop
 8001b6c:	e008      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b6e:	bf00      	nop
 8001b70:	e006      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b72:	bf00      	nop
 8001b74:	e004      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b76:	bf00      	nop
 8001b78:	e002      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b7a:	bf00      	nop
 8001b7c:	e000      	b.n	8001b80 <DMA_CheckFifoParam+0xe8>
      break;
 8001b7e:	bf00      	nop
    }
  } 
  
  return status; 
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop

08001b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b089      	sub	sp, #36	@ 0x24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001baa:	2300      	movs	r3, #0
 8001bac:	61fb      	str	r3, [r7, #28]
 8001bae:	e175      	b.n	8001e9c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	f040 8164 	bne.w	8001e96 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0303 	and.w	r3, r3, #3
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d005      	beq.n	8001be6 <HAL_GPIO_Init+0x56>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d130      	bne.n	8001c48 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 0201 	and.w	r2, r3, #1
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	d017      	beq.n	8001c84 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0303 	and.w	r3, r3, #3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d123      	bne.n	8001cd8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	f003 0307 	and.w	r3, r3, #7
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	691a      	ldr	r2, [r3, #16]
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	08da      	lsrs	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3208      	adds	r2, #8
 8001cd2:	69b9      	ldr	r1, [r7, #24]
 8001cd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	2203      	movs	r2, #3
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0203 	and.w	r2, r3, #3
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 80be 	beq.w	8001e96 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1a:	4b66      	ldr	r3, [pc, #408]	@ (8001eb4 <HAL_GPIO_Init+0x324>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1e:	4a65      	ldr	r2, [pc, #404]	@ (8001eb4 <HAL_GPIO_Init+0x324>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d26:	4b63      	ldr	r3, [pc, #396]	@ (8001eb4 <HAL_GPIO_Init+0x324>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d32:	4a61      	ldr	r2, [pc, #388]	@ (8001eb8 <HAL_GPIO_Init+0x328>)
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	089b      	lsrs	r3, r3, #2
 8001d38:	3302      	adds	r3, #2
 8001d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	220f      	movs	r2, #15
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_GPIO_Init+0x32c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d037      	beq.n	8001dce <HAL_GPIO_Init+0x23e>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a57      	ldr	r2, [pc, #348]	@ (8001ec0 <HAL_GPIO_Init+0x330>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d031      	beq.n	8001dca <HAL_GPIO_Init+0x23a>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a56      	ldr	r2, [pc, #344]	@ (8001ec4 <HAL_GPIO_Init+0x334>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02b      	beq.n	8001dc6 <HAL_GPIO_Init+0x236>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a55      	ldr	r2, [pc, #340]	@ (8001ec8 <HAL_GPIO_Init+0x338>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x232>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a54      	ldr	r2, [pc, #336]	@ (8001ecc <HAL_GPIO_Init+0x33c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x22e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a53      	ldr	r2, [pc, #332]	@ (8001ed0 <HAL_GPIO_Init+0x340>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x22a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a52      	ldr	r2, [pc, #328]	@ (8001ed4 <HAL_GPIO_Init+0x344>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x226>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a51      	ldr	r2, [pc, #324]	@ (8001ed8 <HAL_GPIO_Init+0x348>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x222>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a50      	ldr	r2, [pc, #320]	@ (8001edc <HAL_GPIO_Init+0x34c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x21e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee0 <HAL_GPIO_Init+0x350>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x21a>
 8001da6:	2309      	movs	r3, #9
 8001da8:	e012      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001daa:	230a      	movs	r3, #10
 8001dac:	e010      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dae:	2308      	movs	r3, #8
 8001db0:	e00e      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001db2:	2307      	movs	r3, #7
 8001db4:	e00c      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00a      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dba:	2305      	movs	r3, #5
 8001dbc:	e008      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dbe:	2304      	movs	r3, #4
 8001dc0:	e006      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e004      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	e002      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_GPIO_Init+0x240>
 8001dce:	2300      	movs	r3, #0
 8001dd0:	69fa      	ldr	r2, [r7, #28]
 8001dd2:	f002 0203 	and.w	r2, r2, #3
 8001dd6:	0092      	lsls	r2, r2, #2
 8001dd8:	4093      	lsls	r3, r2
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001de0:	4935      	ldr	r1, [pc, #212]	@ (8001eb8 <HAL_GPIO_Init+0x328>)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	089b      	lsrs	r3, r3, #2
 8001de6:	3302      	adds	r3, #2
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	69ba      	ldr	r2, [r7, #24]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e12:	4a34      	ldr	r2, [pc, #208]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e18:	4b32      	ldr	r3, [pc, #200]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e3c:	4a29      	ldr	r2, [pc, #164]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e42:	4b28      	ldr	r3, [pc, #160]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e90:	4a14      	ldr	r2, [pc, #80]	@ (8001ee4 <HAL_GPIO_Init+0x354>)
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	61fb      	str	r3, [r7, #28]
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	2b0f      	cmp	r3, #15
 8001ea0:	f67f ae86 	bls.w	8001bb0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3724      	adds	r7, #36	@ 0x24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40013800 	.word	0x40013800
 8001ebc:	40020000 	.word	0x40020000
 8001ec0:	40020400 	.word	0x40020400
 8001ec4:	40020800 	.word	0x40020800
 8001ec8:	40020c00 	.word	0x40020c00
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40021400 	.word	0x40021400
 8001ed4:	40021800 	.word	0x40021800
 8001ed8:	40021c00 	.word	0x40021c00
 8001edc:	40022000 	.word	0x40022000
 8001ee0:	40022400 	.word	0x40022400
 8001ee4:	40013c00 	.word	0x40013c00

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f04:	e003      	b.n	8001f0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f06:	887b      	ldrh	r3, [r7, #2]
 8001f08:	041a      	lsls	r2, r3, #16
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	619a      	str	r2, [r3, #24]
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	4b23      	ldr	r3, [pc, #140]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a22      	ldr	r2, [pc, #136]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a1d      	ldr	r2, [pc, #116]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f4a:	f7ff f8d5 	bl	80010f8 <HAL_GetTick>
 8001f4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f50:	e009      	b.n	8001f66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f52:	f7ff f8d1 	bl	80010f8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f60:	d901      	bls.n	8001f66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e022      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001f66:	4b14      	ldr	r3, [pc, #80]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f72:	d1ee      	bne.n	8001f52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001f74:	4b10      	ldr	r3, [pc, #64]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f80:	f7ff f8ba 	bl	80010f8 <HAL_GetTick>
 8001f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f86:	e009      	b.n	8001f9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001f88:	f7ff f8b6 	bl	80010f8 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f96:	d901      	bls.n	8001f9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e007      	b.n	8001fac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001f9c:	4b06      	ldr	r3, [pc, #24]	@ (8001fb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fa4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001fa8:	d1ee      	bne.n	8001f88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3708      	adds	r7, #8
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	40007000 	.word	0x40007000

08001fbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e29b      	b.n	800250a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 8087 	beq.w	80020ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fe0:	4b96      	ldr	r3, [pc, #600]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 030c 	and.w	r3, r3, #12
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d00c      	beq.n	8002006 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001fec:	4b93      	ldr	r3, [pc, #588]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d112      	bne.n	800201e <HAL_RCC_OscConfig+0x62>
 8001ff8:	4b90      	ldr	r3, [pc, #576]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002000:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002004:	d10b      	bne.n	800201e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002006:	4b8d      	ldr	r3, [pc, #564]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d06c      	beq.n	80020ec <HAL_RCC_OscConfig+0x130>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d168      	bne.n	80020ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e275      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002026:	d106      	bne.n	8002036 <HAL_RCC_OscConfig+0x7a>
 8002028:	4b84      	ldr	r3, [pc, #528]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a83      	ldr	r2, [pc, #524]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800202e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	e02e      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d10c      	bne.n	8002058 <HAL_RCC_OscConfig+0x9c>
 800203e:	4b7f      	ldr	r3, [pc, #508]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7e      	ldr	r2, [pc, #504]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002044:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002048:	6013      	str	r3, [r2, #0]
 800204a:	4b7c      	ldr	r3, [pc, #496]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7b      	ldr	r2, [pc, #492]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002050:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	e01d      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002060:	d10c      	bne.n	800207c <HAL_RCC_OscConfig+0xc0>
 8002062:	4b76      	ldr	r3, [pc, #472]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4a75      	ldr	r2, [pc, #468]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800206c:	6013      	str	r3, [r2, #0]
 800206e:	4b73      	ldr	r3, [pc, #460]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a72      	ldr	r2, [pc, #456]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	e00b      	b.n	8002094 <HAL_RCC_OscConfig+0xd8>
 800207c:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6e      	ldr	r2, [pc, #440]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002086:	6013      	str	r3, [r2, #0]
 8002088:	4b6c      	ldr	r3, [pc, #432]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6b      	ldr	r2, [pc, #428]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800208e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002092:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d013      	beq.n	80020c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800209c:	f7ff f82c 	bl	80010f8 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020a4:	f7ff f828 	bl	80010f8 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b64      	cmp	r3, #100	@ 0x64
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e229      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020b6:	4b61      	ldr	r3, [pc, #388]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0xe8>
 80020c2:	e014      	b.n	80020ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c4:	f7ff f818 	bl	80010f8 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ca:	e008      	b.n	80020de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020cc:	f7ff f814 	bl	80010f8 <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	2b64      	cmp	r3, #100	@ 0x64
 80020d8:	d901      	bls.n	80020de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e215      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020de:	4b57      	ldr	r3, [pc, #348]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1f0      	bne.n	80020cc <HAL_RCC_OscConfig+0x110>
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0302 	and.w	r3, r3, #2
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d069      	beq.n	80021ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020fa:	4b50      	ldr	r3, [pc, #320]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 030c 	and.w	r3, r3, #12
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002106:	4b4d      	ldr	r3, [pc, #308]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b08      	cmp	r3, #8
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x190>
 8002112:	4b4a      	ldr	r3, [pc, #296]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d116      	bne.n	800214c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800211e:	4b47      	ldr	r3, [pc, #284]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	2b00      	cmp	r3, #0
 8002128:	d005      	beq.n	8002136 <HAL_RCC_OscConfig+0x17a>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b01      	cmp	r3, #1
 8002130:	d001      	beq.n	8002136 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1e9      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002136:	4b41      	ldr	r3, [pc, #260]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	493d      	ldr	r1, [pc, #244]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800214a:	e040      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d023      	beq.n	800219c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002154:	4b39      	ldr	r3, [pc, #228]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe ffca 	bl	80010f8 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002168:	f7fe ffc6 	bl	80010f8 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b02      	cmp	r3, #2
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e1c7      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800217a:	4b30      	ldr	r3, [pc, #192]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d0f0      	beq.n	8002168 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002186:	4b2d      	ldr	r3, [pc, #180]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4929      	ldr	r1, [pc, #164]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
 800219a:	e018      	b.n	80021ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800219c:	4b27      	ldr	r3, [pc, #156]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a26      	ldr	r2, [pc, #152]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021a2:	f023 0301 	bic.w	r3, r3, #1
 80021a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe ffa6 	bl	80010f8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7fe ffa2 	bl	80010f8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e1a3      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1e      	ldr	r3, [pc, #120]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d038      	beq.n	800224c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b16      	ldr	r3, [pc, #88]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e6:	4a15      	ldr	r2, [pc, #84]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ee:	f7fe ff83 	bl	80010f8 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f6:	f7fe ff7f 	bl	80010f8 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e180      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800220a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x23a>
 8002214:	e01a      	b.n	800224c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b09      	ldr	r3, [pc, #36]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 8002218:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800221a:	4a08      	ldr	r2, [pc, #32]	@ (800223c <HAL_RCC_OscConfig+0x280>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002222:	f7fe ff69 	bl	80010f8 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002228:	e00a      	b.n	8002240 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222a:	f7fe ff65 	bl	80010f8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d903      	bls.n	8002240 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e166      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
 800223c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002240:	4b92      	ldr	r3, [pc, #584]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d1ee      	bne.n	800222a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0304 	and.w	r3, r3, #4
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 80a4 	beq.w	80023a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800225a:	4b8c      	ldr	r3, [pc, #560]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10d      	bne.n	8002282 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002266:	4b89      	ldr	r3, [pc, #548]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a88      	ldr	r2, [pc, #544]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b86      	ldr	r3, [pc, #536]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800227e:	2301      	movs	r3, #1
 8002280:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002282:	4b83      	ldr	r3, [pc, #524]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228a:	2b00      	cmp	r3, #0
 800228c:	d118      	bne.n	80022c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800228e:	4b80      	ldr	r3, [pc, #512]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a7f      	ldr	r2, [pc, #508]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 8002294:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002298:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800229a:	f7fe ff2d 	bl	80010f8 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022a2:	f7fe ff29 	bl	80010f8 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b64      	cmp	r3, #100	@ 0x64
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e12a      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b4:	4b76      	ldr	r3, [pc, #472]	@ (8002490 <HAL_RCC_OscConfig+0x4d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d0f0      	beq.n	80022a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d106      	bne.n	80022d6 <HAL_RCC_OscConfig+0x31a>
 80022c8:	4b70      	ldr	r3, [pc, #448]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022cc:	4a6f      	ldr	r2, [pc, #444]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80022d4:	e02d      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0x33c>
 80022de:	4b6b      	ldr	r3, [pc, #428]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e2:	4a6a      	ldr	r2, [pc, #424]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022e4:	f023 0301 	bic.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ea:	4b68      	ldr	r3, [pc, #416]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ee:	4a67      	ldr	r2, [pc, #412]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80022f0:	f023 0304 	bic.w	r3, r3, #4
 80022f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f6:	e01c      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	2b05      	cmp	r3, #5
 80022fe:	d10c      	bne.n	800231a <HAL_RCC_OscConfig+0x35e>
 8002300:	4b62      	ldr	r3, [pc, #392]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002302:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002304:	4a61      	ldr	r2, [pc, #388]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002306:	f043 0304 	orr.w	r3, r3, #4
 800230a:	6713      	str	r3, [r2, #112]	@ 0x70
 800230c:	4b5f      	ldr	r3, [pc, #380]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800230e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002310:	4a5e      	ldr	r2, [pc, #376]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002312:	f043 0301 	orr.w	r3, r3, #1
 8002316:	6713      	str	r3, [r2, #112]	@ 0x70
 8002318:	e00b      	b.n	8002332 <HAL_RCC_OscConfig+0x376>
 800231a:	4b5c      	ldr	r3, [pc, #368]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800231e:	4a5b      	ldr	r2, [pc, #364]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002320:	f023 0301 	bic.w	r3, r3, #1
 8002324:	6713      	str	r3, [r2, #112]	@ 0x70
 8002326:	4b59      	ldr	r3, [pc, #356]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002328:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232a:	4a58      	ldr	r2, [pc, #352]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800232c:	f023 0304 	bic.w	r3, r3, #4
 8002330:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d015      	beq.n	8002366 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800233a:	f7fe fedd 	bl	80010f8 <HAL_GetTick>
 800233e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002340:	e00a      	b.n	8002358 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002342:	f7fe fed9 	bl	80010f8 <HAL_GetTick>
 8002346:	4602      	mov	r2, r0
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002350:	4293      	cmp	r3, r2
 8002352:	d901      	bls.n	8002358 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002354:	2303      	movs	r3, #3
 8002356:	e0d8      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002358:	4b4c      	ldr	r3, [pc, #304]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800235a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ee      	beq.n	8002342 <HAL_RCC_OscConfig+0x386>
 8002364:	e014      	b.n	8002390 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002366:	f7fe fec7 	bl	80010f8 <HAL_GetTick>
 800236a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800236c:	e00a      	b.n	8002384 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800236e:	f7fe fec3 	bl	80010f8 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	f241 3288 	movw	r2, #5000	@ 0x1388
 800237c:	4293      	cmp	r3, r2
 800237e:	d901      	bls.n	8002384 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002380:	2303      	movs	r3, #3
 8002382:	e0c2      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002384:	4b41      	ldr	r3, [pc, #260]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002386:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ee      	bne.n	800236e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002390:	7dfb      	ldrb	r3, [r7, #23]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d105      	bne.n	80023a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002396:	4b3d      	ldr	r3, [pc, #244]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239a:	4a3c      	ldr	r2, [pc, #240]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800239c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	699b      	ldr	r3, [r3, #24]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80ae 	beq.w	8002508 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023ac:	4b37      	ldr	r3, [pc, #220]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d06d      	beq.n	8002494 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d14b      	bne.n	8002458 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c0:	4b32      	ldr	r3, [pc, #200]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a31      	ldr	r2, [pc, #196]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80023ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe fe94 	bl	80010f8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe fe90 	bl	80010f8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e091      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023e6:	4b29      	ldr	r3, [pc, #164]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69da      	ldr	r2, [r3, #28]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	431a      	orrs	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002400:	019b      	lsls	r3, r3, #6
 8002402:	431a      	orrs	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002408:	085b      	lsrs	r3, r3, #1
 800240a:	3b01      	subs	r3, #1
 800240c:	041b      	lsls	r3, r3, #16
 800240e:	431a      	orrs	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002414:	061b      	lsls	r3, r3, #24
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	071b      	lsls	r3, r3, #28
 800241e:	491b      	ldr	r1, [pc, #108]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002424:	4b19      	ldr	r3, [pc, #100]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a18      	ldr	r2, [pc, #96]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800242a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800242e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fe62 	bl	80010f8 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002438:	f7fe fe5e 	bl	80010f8 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e05f      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x47c>
 8002456:	e057      	b.n	8002508 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002458:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a0b      	ldr	r2, [pc, #44]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 800245e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fe48 	bl	80010f8 <HAL_GetTick>
 8002468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800246c:	f7fe fe44 	bl	80010f8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e045      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800247e:	4b03      	ldr	r3, [pc, #12]	@ (800248c <HAL_RCC_OscConfig+0x4d0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1f0      	bne.n	800246c <HAL_RCC_OscConfig+0x4b0>
 800248a:	e03d      	b.n	8002508 <HAL_RCC_OscConfig+0x54c>
 800248c:	40023800 	.word	0x40023800
 8002490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002494:	4b1f      	ldr	r3, [pc, #124]	@ (8002514 <HAL_RCC_OscConfig+0x558>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d030      	beq.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d129      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d122      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024c4:	4013      	ands	r3, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d119      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024da:	085b      	lsrs	r3, r3, #1
 80024dc:	3b01      	subs	r3, #1
 80024de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10f      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d107      	bne.n	8002504 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e000      	b.n	800250a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3718      	adds	r7, #24
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800

08002518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0d0      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b6a      	ldr	r3, [pc, #424]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 030f 	and.w	r3, r3, #15
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d910      	bls.n	8002560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b67      	ldr	r3, [pc, #412]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f023 020f 	bic.w	r2, r3, #15
 8002546:	4965      	ldr	r1, [pc, #404]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	4313      	orrs	r3, r2
 800254c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b63      	ldr	r3, [pc, #396]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0b8      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0302 	and.w	r3, r3, #2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0304 	and.w	r3, r3, #4
 8002574:	2b00      	cmp	r3, #0
 8002576:	d005      	beq.n	8002584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002578:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	4a58      	ldr	r2, [pc, #352]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800257e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0308 	and.w	r3, r3, #8
 800258c:	2b00      	cmp	r3, #0
 800258e:	d005      	beq.n	800259c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002590:	4b53      	ldr	r3, [pc, #332]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	4a52      	ldr	r2, [pc, #328]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002596:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800259a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800259c:	4b50      	ldr	r3, [pc, #320]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	494d      	ldr	r1, [pc, #308]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d040      	beq.n	800263c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d107      	bne.n	80025d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d115      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e07f      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e073      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3d      	ldr	r3, [pc, #244]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e06b      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b39      	ldr	r3, [pc, #228]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4936      	ldr	r1, [pc, #216]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800260c:	f7fe fd74 	bl	80010f8 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fd70 	bl	80010f8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e053      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2d      	ldr	r3, [pc, #180]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b27      	ldr	r3, [pc, #156]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d210      	bcs.n	800266c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b24      	ldr	r3, [pc, #144]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4922      	ldr	r1, [pc, #136]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b20      	ldr	r3, [pc, #128]	@ (80026dc <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d001      	beq.n	800266c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e032      	b.n	80026d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0304 	and.w	r3, r3, #4
 8002674:	2b00      	cmp	r3, #0
 8002676:	d008      	beq.n	800268a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002678:	4b19      	ldr	r3, [pc, #100]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	4916      	ldr	r1, [pc, #88]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002686:	4313      	orrs	r3, r2
 8002688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d009      	beq.n	80026aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002696:	4b12      	ldr	r3, [pc, #72]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	490e      	ldr	r1, [pc, #56]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026aa:	f000 f821 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 80026ae:	4602      	mov	r2, r0
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c8>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	091b      	lsrs	r3, r3, #4
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	490a      	ldr	r1, [pc, #40]	@ (80026e4 <HAL_RCC_ClockConfig+0x1cc>)
 80026bc:	5ccb      	ldrb	r3, [r1, r3]
 80026be:	fa22 f303 	lsr.w	r3, r2, r3
 80026c2:	4a09      	ldr	r2, [pc, #36]	@ (80026e8 <HAL_RCC_ClockConfig+0x1d0>)
 80026c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026c6:	4b09      	ldr	r3, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1d4>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fcd0 	bl	8001070 <HAL_InitTick>

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	40023c00 	.word	0x40023c00
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08005280 	.word	0x08005280
 80026e8:	20000000 	.word	0x20000000
 80026ec:	20000004 	.word	0x20000004

080026f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026f4:	b094      	sub	sp, #80	@ 0x50
 80026f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80026f8:	2300      	movs	r3, #0
 80026fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80026fc:	2300      	movs	r3, #0
 80026fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002700:	2300      	movs	r3, #0
 8002702:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002708:	4b79      	ldr	r3, [pc, #484]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 030c 	and.w	r3, r3, #12
 8002710:	2b08      	cmp	r3, #8
 8002712:	d00d      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x40>
 8002714:	2b08      	cmp	r3, #8
 8002716:	f200 80e1 	bhi.w	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x34>
 800271e:	2b04      	cmp	r3, #4
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x3a>
 8002722:	e0db      	b.n	80028dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b73      	ldr	r3, [pc, #460]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8002726:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002728:	e0db      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800272a:	4b72      	ldr	r3, [pc, #456]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800272c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800272e:	e0d8      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4b6f      	ldr	r3, [pc, #444]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002738:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800273a:	4b6d      	ldr	r3, [pc, #436]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d063      	beq.n	800280e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002746:	4b6a      	ldr	r3, [pc, #424]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	099b      	lsrs	r3, r3, #6
 800274c:	2200      	movs	r2, #0
 800274e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002750:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002758:	633b      	str	r3, [r7, #48]	@ 0x30
 800275a:	2300      	movs	r3, #0
 800275c:	637b      	str	r3, [r7, #52]	@ 0x34
 800275e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002762:	4622      	mov	r2, r4
 8002764:	462b      	mov	r3, r5
 8002766:	f04f 0000 	mov.w	r0, #0
 800276a:	f04f 0100 	mov.w	r1, #0
 800276e:	0159      	lsls	r1, r3, #5
 8002770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002774:	0150      	lsls	r0, r2, #5
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4621      	mov	r1, r4
 800277c:	1a51      	subs	r1, r2, r1
 800277e:	6139      	str	r1, [r7, #16]
 8002780:	4629      	mov	r1, r5
 8002782:	eb63 0301 	sbc.w	r3, r3, r1
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	f04f 0200 	mov.w	r2, #0
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002794:	4659      	mov	r1, fp
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	4651      	mov	r1, sl
 800279a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800279e:	4651      	mov	r1, sl
 80027a0:	018a      	lsls	r2, r1, #6
 80027a2:	4651      	mov	r1, sl
 80027a4:	ebb2 0801 	subs.w	r8, r2, r1
 80027a8:	4659      	mov	r1, fp
 80027aa:	eb63 0901 	sbc.w	r9, r3, r1
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027c2:	4690      	mov	r8, r2
 80027c4:	4699      	mov	r9, r3
 80027c6:	4623      	mov	r3, r4
 80027c8:	eb18 0303 	adds.w	r3, r8, r3
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	462b      	mov	r3, r5
 80027d0:	eb49 0303 	adc.w	r3, r9, r3
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	f04f 0200 	mov.w	r2, #0
 80027da:	f04f 0300 	mov.w	r3, #0
 80027de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80027e2:	4629      	mov	r1, r5
 80027e4:	028b      	lsls	r3, r1, #10
 80027e6:	4621      	mov	r1, r4
 80027e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027ec:	4621      	mov	r1, r4
 80027ee:	028a      	lsls	r2, r1, #10
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027f6:	2200      	movs	r2, #0
 80027f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80027fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002800:	f7fd fd1a 	bl	8000238 <__aeabi_uldivmod>
 8002804:	4602      	mov	r2, r0
 8002806:	460b      	mov	r3, r1
 8002808:	4613      	mov	r3, r2
 800280a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800280c:	e058      	b.n	80028c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800280e:	4b38      	ldr	r3, [pc, #224]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	099b      	lsrs	r3, r3, #6
 8002814:	2200      	movs	r2, #0
 8002816:	4618      	mov	r0, r3
 8002818:	4611      	mov	r1, r2
 800281a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800281e:	623b      	str	r3, [r7, #32]
 8002820:	2300      	movs	r3, #0
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
 8002824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	f04f 0000 	mov.w	r0, #0
 8002830:	f04f 0100 	mov.w	r1, #0
 8002834:	0159      	lsls	r1, r3, #5
 8002836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800283a:	0150      	lsls	r0, r2, #5
 800283c:	4602      	mov	r2, r0
 800283e:	460b      	mov	r3, r1
 8002840:	4641      	mov	r1, r8
 8002842:	ebb2 0a01 	subs.w	sl, r2, r1
 8002846:	4649      	mov	r1, r9
 8002848:	eb63 0b01 	sbc.w	fp, r3, r1
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800285c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002860:	ebb2 040a 	subs.w	r4, r2, sl
 8002864:	eb63 050b 	sbc.w	r5, r3, fp
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	00eb      	lsls	r3, r5, #3
 8002872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002876:	00e2      	lsls	r2, r4, #3
 8002878:	4614      	mov	r4, r2
 800287a:	461d      	mov	r5, r3
 800287c:	4643      	mov	r3, r8
 800287e:	18e3      	adds	r3, r4, r3
 8002880:	603b      	str	r3, [r7, #0]
 8002882:	464b      	mov	r3, r9
 8002884:	eb45 0303 	adc.w	r3, r5, r3
 8002888:	607b      	str	r3, [r7, #4]
 800288a:	f04f 0200 	mov.w	r2, #0
 800288e:	f04f 0300 	mov.w	r3, #0
 8002892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002896:	4629      	mov	r1, r5
 8002898:	028b      	lsls	r3, r1, #10
 800289a:	4621      	mov	r1, r4
 800289c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028a0:	4621      	mov	r1, r4
 80028a2:	028a      	lsls	r2, r1, #10
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028aa:	2200      	movs	r2, #0
 80028ac:	61bb      	str	r3, [r7, #24]
 80028ae:	61fa      	str	r2, [r7, #28]
 80028b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028b4:	f7fd fcc0 	bl	8000238 <__aeabi_uldivmod>
 80028b8:	4602      	mov	r2, r0
 80028ba:	460b      	mov	r3, r1
 80028bc:	4613      	mov	r3, r2
 80028be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	3301      	adds	r3, #1
 80028cc:	005b      	lsls	r3, r3, #1
 80028ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80028d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80028d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028da:	e002      	b.n	80028e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028dc:	4b05      	ldr	r3, [pc, #20]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80028de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3750      	adds	r7, #80	@ 0x50
 80028e8:	46bd      	mov	sp, r7
 80028ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	00f42400 	.word	0x00f42400

080028f8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028fc:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_RCC_GetHCLKFreq+0x14>)
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000000 	.word	0x20000000

08002910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002914:	f7ff fff0 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002918:	4602      	mov	r2, r0
 800291a:	4b05      	ldr	r3, [pc, #20]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	0a9b      	lsrs	r3, r3, #10
 8002920:	f003 0307 	and.w	r3, r3, #7
 8002924:	4903      	ldr	r1, [pc, #12]	@ (8002934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002926:	5ccb      	ldrb	r3, [r1, r3]
 8002928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800
 8002934:	08005290 	.word	0x08005290

08002938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800293c:	f7ff ffdc 	bl	80028f8 <HAL_RCC_GetHCLKFreq>
 8002940:	4602      	mov	r2, r0
 8002942:	4b05      	ldr	r3, [pc, #20]	@ (8002958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	0b5b      	lsrs	r3, r3, #13
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	4903      	ldr	r1, [pc, #12]	@ (800295c <HAL_RCC_GetPCLK2Freq+0x24>)
 800294e:	5ccb      	ldrb	r3, [r1, r3]
 8002950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002954:	4618      	mov	r0, r3
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	08005290 	.word	0x08005290

08002960 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b088      	sub	sp, #32
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d012      	beq.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002988:	4b69      	ldr	r3, [pc, #420]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	4a68      	ldr	r2, [pc, #416]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800298e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002992:	6093      	str	r3, [r2, #8]
 8002994:	4b66      	ldr	r3, [pc, #408]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299c:	4964      	ldr	r1, [pc, #400]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d101      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d017      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80029ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029c0:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c8:	4959      	ldr	r1, [pc, #356]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029d4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029d8:	d101      	bne.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80029e6:	2301      	movs	r3, #1
 80029e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d017      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80029f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029fc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	494a      	ldr	r1, [pc, #296]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a14:	d101      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002a16:	2301      	movs	r3, #1
 8002a18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d101      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002a22:	2301      	movs	r3, #1
 8002a24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002a32:	2301      	movs	r3, #1
 8002a34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0320 	and.w	r3, r3, #32
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 808b 	beq.w	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a44:	4b3a      	ldr	r3, [pc, #232]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	4a39      	ldr	r2, [pc, #228]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a50:	4b37      	ldr	r3, [pc, #220]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	60bb      	str	r3, [r7, #8]
 8002a5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a5c:	4b35      	ldr	r3, [pc, #212]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a34      	ldr	r2, [pc, #208]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a68:	f7fe fb46 	bl	80010f8 <HAL_GetTick>
 8002a6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a70:	f7fe fb42 	bl	80010f8 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	@ 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e38f      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002a82:	4b2c      	ldr	r3, [pc, #176]	@ (8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a8e:	4b28      	ldr	r3, [pc, #160]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d035      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d02e      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002aac:	4b20      	ldr	r3, [pc, #128]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	4a1d      	ldr	r2, [pc, #116]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002abc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ac0:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002acc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002ace:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ad4:	4b16      	ldr	r3, [pc, #88]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d114      	bne.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae0:	f7fe fb0a 	bl	80010f8 <HAL_GetTick>
 8002ae4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae6:	e00a      	b.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae8:	f7fe fb06 	bl	80010f8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d901      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e351      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	4b0c      	ldr	r3, [pc, #48]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d0ee      	beq.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002b16:	d111      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002b18:	4b05      	ldr	r3, [pc, #20]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002b26:	400b      	ands	r3, r1
 8002b28:	4901      	ldr	r1, [pc, #4]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	608b      	str	r3, [r1, #8]
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002b30:	40023800 	.word	0x40023800
 8002b34:	40007000 	.word	0x40007000
 8002b38:	0ffffcff 	.word	0x0ffffcff
 8002b3c:	4bac      	ldr	r3, [pc, #688]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4aab      	ldr	r2, [pc, #684]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b42:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002b46:	6093      	str	r3, [r2, #8]
 8002b48:	4ba9      	ldr	r3, [pc, #676]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b4a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b54:	49a6      	ldr	r1, [pc, #664]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0310 	and.w	r3, r3, #16
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b66:	4ba2      	ldr	r3, [pc, #648]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002b6c:	4aa0      	ldr	r2, [pc, #640]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b6e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b72:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002b76:	4b9e      	ldr	r3, [pc, #632]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b78:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	499b      	ldr	r1, [pc, #620]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b94:	4b96      	ldr	r3, [pc, #600]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ba2:	4993      	ldr	r1, [pc, #588]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bb6:	4b8e      	ldr	r3, [pc, #568]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bbc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002bc4:	498a      	ldr	r1, [pc, #552]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bd8:	4b85      	ldr	r3, [pc, #532]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bde:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002be6:	4982      	ldr	r1, [pc, #520]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c00:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c08:	4979      	ldr	r1, [pc, #484]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1c:	4b74      	ldr	r3, [pc, #464]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c22:	f023 0203 	bic.w	r2, r3, #3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2a:	4971      	ldr	r1, [pc, #452]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c3e:	4b6c      	ldr	r3, [pc, #432]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c44:	f023 020c 	bic.w	r2, r3, #12
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c4c:	4968      	ldr	r1, [pc, #416]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00a      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c60:	4b63      	ldr	r3, [pc, #396]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c66:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c6e:	4960      	ldr	r1, [pc, #384]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00a      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c82:	4b5b      	ldr	r3, [pc, #364]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c88:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c90:	4957      	ldr	r1, [pc, #348]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d00a      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca4:	4b52      	ldr	r3, [pc, #328]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002caa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cb2:	494f      	ldr	r1, [pc, #316]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ccc:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cd4:	4946      	ldr	r1, [pc, #280]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00a      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ce8:	4b41      	ldr	r3, [pc, #260]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cee:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf6:	493e      	ldr	r1, [pc, #248]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d00a      	beq.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d0a:	4b39      	ldr	r3, [pc, #228]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d10:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d18:	4935      	ldr	r1, [pc, #212]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00a      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002d2c:	4b30      	ldr	r3, [pc, #192]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d32:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d3a:	492d      	ldr	r1, [pc, #180]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d011      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002d4e:	4b28      	ldr	r3, [pc, #160]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d54:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d5c:	4924      	ldr	r1, [pc, #144]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d68:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00a      	beq.n	8002da4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d8e:	4b18      	ldr	r3, [pc, #96]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d94:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d9c:	4914      	ldr	r1, [pc, #80]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002db0:	4b0f      	ldr	r3, [pc, #60]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002dc0:	490b      	ldr	r1, [pc, #44]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d00f      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002dd4:	4b06      	ldr	r3, [pc, #24]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dda:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002de4:	4902      	ldr	r1, [pc, #8]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002dec:	e002      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002dee:	bf00      	nop
 8002df0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d00b      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e00:	4b8a      	ldr	r3, [pc, #552]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e06:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e10:	4986      	ldr	r1, [pc, #536]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00b      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002e24:	4b81      	ldr	r3, [pc, #516]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e26:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e2a:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002e34:	497d      	ldr	r1, [pc, #500]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d006      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80d6 	beq.w	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e50:	4b76      	ldr	r3, [pc, #472]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a75      	ldr	r2, [pc, #468]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e5c:	f7fe f94c 	bl	80010f8 <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e64:	f7fe f948 	bl	80010f8 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b64      	cmp	r3, #100	@ 0x64
 8002e70:	d901      	bls.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e195      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e76:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d1f0      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d021      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d11d      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002e96:	4b65      	ldr	r3, [pc, #404]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002e98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e9c:	0c1b      	lsrs	r3, r3, #16
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ea4:	4b61      	ldr	r3, [pc, #388]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002eaa:	0e1b      	lsrs	r3, r3, #24
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	019a      	lsls	r2, r3, #6
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	041b      	lsls	r3, r3, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	061b      	lsls	r3, r3, #24
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	071b      	lsls	r3, r3, #28
 8002eca:	4958      	ldr	r1, [pc, #352]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d004      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d02e      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002efc:	d129      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002efe:	4b4b      	ldr	r3, [pc, #300]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f04:	0c1b      	lsrs	r3, r3, #16
 8002f06:	f003 0303 	and.w	r3, r3, #3
 8002f0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f0c:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f12:	0f1b      	lsrs	r3, r3, #28
 8002f14:	f003 0307 	and.w	r3, r3, #7
 8002f18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	019a      	lsls	r2, r3, #6
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	041b      	lsls	r3, r3, #16
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	061b      	lsls	r3, r3, #24
 8002f2c:	431a      	orrs	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	071b      	lsls	r3, r3, #28
 8002f32:	493e      	ldr	r1, [pc, #248]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f3a:	4b3c      	ldr	r3, [pc, #240]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002f40:	f023 021f 	bic.w	r2, r3, #31
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	4938      	ldr	r1, [pc, #224]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01d      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f5e:	4b33      	ldr	r3, [pc, #204]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f64:	0e1b      	lsrs	r3, r3, #24
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f6c:	4b2f      	ldr	r3, [pc, #188]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002f72:	0f1b      	lsrs	r3, r3, #28
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	019a      	lsls	r2, r3, #6
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	041b      	lsls	r3, r3, #16
 8002f86:	431a      	orrs	r2, r3
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	071b      	lsls	r3, r3, #28
 8002f92:	4926      	ldr	r1, [pc, #152]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d011      	beq.n	8002fca <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	019a      	lsls	r2, r3, #6
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	691b      	ldr	r3, [r3, #16]
 8002fb0:	041b      	lsls	r3, r3, #16
 8002fb2:	431a      	orrs	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	061b      	lsls	r3, r3, #24
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	071b      	lsls	r3, r3, #28
 8002fc2:	491a      	ldr	r1, [pc, #104]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fca:	4b18      	ldr	r3, [pc, #96]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a17      	ldr	r2, [pc, #92]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002fd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fd6:	f7fe f88f 	bl	80010f8 <HAL_GetTick>
 8002fda:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fde:	f7fe f88b 	bl	80010f8 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b64      	cmp	r3, #100	@ 0x64
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e0d8      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	f040 80ce 	bne.w	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003004:	4b09      	ldr	r3, [pc, #36]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a08      	ldr	r2, [pc, #32]	@ (800302c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800300e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003010:	f7fe f872 	bl	80010f8 <HAL_GetTick>
 8003014:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003016:	e00b      	b.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003018:	f7fe f86e 	bl	80010f8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	2b64      	cmp	r3, #100	@ 0x64
 8003024:	d904      	bls.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e0bb      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003030:	4b5e      	ldr	r3, [pc, #376]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003038:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800303c:	d0ec      	beq.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d003      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800304e:	2b00      	cmp	r3, #0
 8003050:	d009      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800305a:	2b00      	cmp	r3, #0
 800305c:	d02e      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d12a      	bne.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003066:	4b51      	ldr	r3, [pc, #324]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800306c:	0c1b      	lsrs	r3, r3, #16
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003074:	4b4d      	ldr	r3, [pc, #308]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003076:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800307a:	0f1b      	lsrs	r3, r3, #28
 800307c:	f003 0307 	and.w	r3, r3, #7
 8003080:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	019a      	lsls	r2, r3, #6
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	061b      	lsls	r3, r3, #24
 8003094:	431a      	orrs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	071b      	lsls	r3, r3, #28
 800309a:	4944      	ldr	r1, [pc, #272]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030a2:	4b42      	ldr	r3, [pc, #264]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80030a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b0:	3b01      	subs	r3, #1
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	493d      	ldr	r1, [pc, #244]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d022      	beq.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030d0:	d11d      	bne.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030d2:	4b36      	ldr	r3, [pc, #216]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d8:	0e1b      	lsrs	r3, r3, #24
 80030da:	f003 030f 	and.w	r3, r3, #15
 80030de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030e0:	4b32      	ldr	r3, [pc, #200]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80030e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030e6:	0f1b      	lsrs	r3, r3, #28
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	695b      	ldr	r3, [r3, #20]
 80030f2:	019a      	lsls	r2, r3, #6
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	041b      	lsls	r3, r3, #16
 80030fa:	431a      	orrs	r2, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	061b      	lsls	r3, r3, #24
 8003100:	431a      	orrs	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	071b      	lsls	r3, r3, #28
 8003106:	4929      	ldr	r1, [pc, #164]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003108:	4313      	orrs	r3, r2
 800310a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0308 	and.w	r3, r3, #8
 8003116:	2b00      	cmp	r3, #0
 8003118:	d028      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800311a:	4b24      	ldr	r3, [pc, #144]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	0e1b      	lsrs	r3, r3, #24
 8003122:	f003 030f 	and.w	r3, r3, #15
 8003126:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003128:	4b20      	ldr	r3, [pc, #128]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	0c1b      	lsrs	r3, r3, #16
 8003130:	f003 0303 	and.w	r3, r3, #3
 8003134:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	019a      	lsls	r2, r3, #6
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	431a      	orrs	r2, r3
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	061b      	lsls	r3, r3, #24
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	071b      	lsls	r3, r3, #28
 800314e:	4917      	ldr	r1, [pc, #92]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003150:	4313      	orrs	r3, r2
 8003152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003156:	4b15      	ldr	r3, [pc, #84]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003158:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800315c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003164:	4911      	ldr	r1, [pc, #68]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800316c:	4b0f      	ldr	r3, [pc, #60]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a0e      	ldr	r2, [pc, #56]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003176:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003178:	f7fd ffbe 	bl	80010f8 <HAL_GetTick>
 800317c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800317e:	e008      	b.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003180:	f7fd ffba 	bl	80010f8 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	2b64      	cmp	r3, #100	@ 0x64
 800318c:	d901      	bls.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e007      	b.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003192:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800319a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800319e:	d1ef      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3720      	adds	r7, #32
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80031ce:	f040 80a4 	bne.w	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80031d2:	4ba6      	ldr	r3, [pc, #664]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80031d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80031d8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80031e0:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031e8:	f000 808a 	beq.w	8003300 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80031f2:	f200 8091 	bhi.w	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031fc:	d07d      	beq.n	80032fa <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003204:	f200 8088 	bhi.w	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d004      	beq.n	8003218 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003214:	d039      	beq.n	800328a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003216:	e07f      	b.n	8003318 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003218:	4b94      	ldr	r3, [pc, #592]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d108      	bne.n	8003236 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003224:	4b91      	ldr	r3, [pc, #580]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800322c:	4a90      	ldr	r2, [pc, #576]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800322e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e007      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003236:	4b8d      	ldr	r3, [pc, #564]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800323e:	4a8c      	ldr	r2, [pc, #560]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003240:	fbb2 f3f3 	udiv	r3, r2, r3
 8003244:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003246:	4b89      	ldr	r3, [pc, #548]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324c:	0e1b      	lsrs	r3, r3, #24
 800324e:	f003 030f 	and.w	r3, r3, #15
 8003252:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8003254:	4b85      	ldr	r3, [pc, #532]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800325a:	099b      	lsrs	r3, r3, #6
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	fb03 f202 	mul.w	r2, r3, r2
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800326e:	4b7f      	ldr	r3, [pc, #508]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003270:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003274:	0a1b      	lsrs	r3, r3, #8
 8003276:	f003 031f 	and.w	r3, r3, #31
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	617b      	str	r3, [r7, #20]
        break;
 8003288:	e047      	b.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800328a:	4b78      	ldr	r3, [pc, #480]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d108      	bne.n	80032a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003296:	4b75      	ldr	r3, [pc, #468]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800329e:	4a74      	ldr	r2, [pc, #464]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80032a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	e007      	b.n	80032b8 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80032a8:	4b70      	ldr	r3, [pc, #448]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032b0:	4a6f      	ldr	r2, [pc, #444]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80032b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b6:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80032b8:	4b6c      	ldr	r3, [pc, #432]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80032ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032be:	0e1b      	lsrs	r3, r3, #24
 80032c0:	f003 030f 	and.w	r3, r3, #15
 80032c4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80032c6:	4b69      	ldr	r3, [pc, #420]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80032cc:	099b      	lsrs	r3, r3, #6
 80032ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	fb03 f202 	mul.w	r2, r3, r2
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	fbb2 f3f3 	udiv	r3, r2, r3
 80032de:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80032e0:	4b62      	ldr	r3, [pc, #392]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80032e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80032e6:	f003 031f 	and.w	r3, r3, #31
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f6:	617b      	str	r3, [r7, #20]
        break;
 80032f8:	e00f      	b.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        frequency = EXTERNAL_CLOCK_VALUE;
 80032fa:	4b5e      	ldr	r3, [pc, #376]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80032fc:	617b      	str	r3, [r7, #20]
        break;
 80032fe:	e00c      	b.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003300:	4b5a      	ldr	r3, [pc, #360]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d102      	bne.n	8003312 <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = HSI_VALUE;
 800330c:	4b58      	ldr	r3, [pc, #352]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800330e:	617b      	str	r3, [r7, #20]
        break;
 8003310:	e003      	b.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
          frequency = HSE_VALUE;
 8003312:	4b57      	ldr	r3, [pc, #348]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003314:	617b      	str	r3, [r7, #20]
        break;
 8003316:	e000      	b.n	800331a <HAL_RCCEx_GetPeriphCLKFreq+0x16a>
        break;
 8003318:	bf00      	nop
      }
    }
  }

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003320:	f040 80ab 	bne.w	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
  {
    saiclocksource = RCC->DCKCFGR1;
 8003324:	4b51      	ldr	r3, [pc, #324]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003326:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800332a:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8003332:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800333a:	f000 808a 	beq.w	8003452 <HAL_RCCEx_GetPeriphCLKFreq+0x2a2>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003344:	f200 8098 	bhi.w	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800334e:	d07d      	beq.n	800344c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003356:	f200 808f 	bhi.w	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
 800335a:	68bb      	ldr	r3, [r7, #8]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d004      	beq.n	800336a <HAL_RCCEx_GetPeriphCLKFreq+0x1ba>
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003366:	d039      	beq.n	80033dc <HAL_RCCEx_GetPeriphCLKFreq+0x22c>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8003368:	e086      	b.n	8003478 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800336a:	4b40      	ldr	r3, [pc, #256]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d108      	bne.n	8003388 <HAL_RCCEx_GetPeriphCLKFreq+0x1d8>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003376:	4b3d      	ldr	r3, [pc, #244]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800337e:	4a3c      	ldr	r2, [pc, #240]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003380:	fbb2 f3f3 	udiv	r3, r2, r3
 8003384:	613b      	str	r3, [r7, #16]
 8003386:	e007      	b.n	8003398 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8003388:	4b38      	ldr	r3, [pc, #224]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003390:	4a37      	ldr	r2, [pc, #220]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003392:	fbb2 f3f3 	udiv	r3, r2, r3
 8003396:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8003398:	4b34      	ldr	r3, [pc, #208]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800339a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800339e:	0e1b      	lsrs	r3, r3, #24
 80033a0:	f003 030f 	and.w	r3, r3, #15
 80033a4:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80033a6:	4b31      	ldr	r3, [pc, #196]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033ac:	099b      	lsrs	r3, r3, #6
 80033ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	fb03 f202 	mul.w	r2, r3, r2
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80033c0:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80033c6:	0a1b      	lsrs	r3, r3, #8
 80033c8:	f003 031f 	and.w	r3, r3, #31
 80033cc:	3301      	adds	r3, #1
 80033ce:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d8:	617b      	str	r3, [r7, #20]
        break;
 80033da:	e04e      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80033dc:	4b23      	ldr	r3, [pc, #140]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80033e8:	4b20      	ldr	r3, [pc, #128]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80033f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f6:	613b      	str	r3, [r7, #16]
 80033f8:	e007      	b.n	800340a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80033fa:	4b1c      	ldr	r3, [pc, #112]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003402:	4a1b      	ldr	r2, [pc, #108]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800340a:	4b18      	ldr	r3, [pc, #96]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800340c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003410:	0e1b      	lsrs	r3, r3, #24
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8003418:	4b14      	ldr	r3, [pc, #80]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800341a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800341e:	099b      	lsrs	r3, r3, #6
 8003420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003424:	693a      	ldr	r2, [r7, #16]
 8003426:	fb03 f202 	mul.w	r2, r3, r2
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8003432:	4b0e      	ldr	r3, [pc, #56]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003434:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	3301      	adds	r3, #1
 800343e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	fbb2 f3f3 	udiv	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]
        break;
 800344a:	e016      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        frequency = EXTERNAL_CLOCK_VALUE;
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800344e:	617b      	str	r3, [r7, #20]
        break;
 8003450:	e013      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d102      	bne.n	8003464 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>
          frequency = HSI_VALUE;
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003460:	617b      	str	r3, [r7, #20]
        break;
 8003462:	e00a      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
          frequency = HSE_VALUE;
 8003464:	4b02      	ldr	r3, [pc, #8]	@ (8003470 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8003466:	617b      	str	r3, [r7, #20]
        break;
 8003468:	e007      	b.n	800347a <HAL_RCCEx_GetPeriphCLKFreq+0x2ca>
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	00bb8000 	.word	0x00bb8000
        break;
 8003478:	bf00      	nop
      }
    }
  }

  return frequency;
 800347a:	697b      	ldr	r3, [r7, #20]
}
 800347c:	4618      	mov	r0, r3
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 8003494:	2300      	movs	r3, #0
 8003496:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d101      	bne.n	80034a6 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e156      	b.n	8003754 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d106      	bne.n	80034c0 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7fd fc64 	bl	8000d88 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2202      	movs	r2, #2
 80034c4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fc51 	bl	8003d70 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d00c      	beq.n	80034f0 <HAL_SAI_Init+0x68>
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d80d      	bhi.n	80034f6 <HAL_SAI_Init+0x6e>
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_SAI_Init+0x5c>
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d003      	beq.n	80034ea <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80034e2:	e008      	b.n	80034f6 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	61fb      	str	r3, [r7, #28]
      break;
 80034e8:	e006      	b.n	80034f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80034ea:	2310      	movs	r3, #16
 80034ec:	61fb      	str	r3, [r7, #28]
      break;
 80034ee:	e003      	b.n	80034f8 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80034f0:	2320      	movs	r3, #32
 80034f2:	61fb      	str	r3, [r7, #28]
      break;
 80034f4:	e000      	b.n	80034f8 <HAL_SAI_Init+0x70>
      break;
 80034f6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b03      	cmp	r3, #3
 80034fe:	d81e      	bhi.n	800353e <HAL_SAI_Init+0xb6>
 8003500:	a201      	add	r2, pc, #4	@ (adr r2, 8003508 <HAL_SAI_Init+0x80>)
 8003502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003506:	bf00      	nop
 8003508:	08003519 	.word	0x08003519
 800350c:	0800351f 	.word	0x0800351f
 8003510:	08003527 	.word	0x08003527
 8003514:	0800352f 	.word	0x0800352f
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
    }
    break;
 800351c:	e010      	b.n	8003540 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800351e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003522:	617b      	str	r3, [r7, #20]
    }
    break;
 8003524:	e00c      	b.n	8003540 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8003526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800352a:	617b      	str	r3, [r7, #20]
    }
    break;
 800352c:	e008      	b.n	8003540 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800352e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003532:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f043 0301 	orr.w	r3, r3, #1
 800353a:	61fb      	str	r3, [r7, #28]
    }
    break;
 800353c:	e000      	b.n	8003540 <HAL_SAI_Init+0xb8>
    default:
      break;
 800353e:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a85      	ldr	r2, [pc, #532]	@ (800375c <HAL_SAI_Init+0x2d4>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d004      	beq.n	8003554 <HAL_SAI_Init+0xcc>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a84      	ldr	r2, [pc, #528]	@ (8003760 <HAL_SAI_Init+0x2d8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d103      	bne.n	800355c <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 8003554:	4a83      	ldr	r2, [pc, #524]	@ (8003764 <HAL_SAI_Init+0x2dc>)
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e002      	b.n	8003562 <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 800355c:	4a82      	ldr	r2, [pc, #520]	@ (8003768 <HAL_SAI_Init+0x2e0>)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d04c      	beq.n	8003604 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 800356a:	2300      	movs	r3, #0
 800356c:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a7a      	ldr	r2, [pc, #488]	@ (800375c <HAL_SAI_Init+0x2d4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_SAI_Init+0xfa>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a78      	ldr	r2, [pc, #480]	@ (8003760 <HAL_SAI_Init+0x2d8>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d104      	bne.n	800358c <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8003582:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003586:	f7ff fe13 	bl	80031b0 <HAL_RCCEx_GetPeriphCLKFreq>
 800358a:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a76      	ldr	r2, [pc, #472]	@ (800376c <HAL_SAI_Init+0x2e4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_SAI_Init+0x118>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a75      	ldr	r2, [pc, #468]	@ (8003770 <HAL_SAI_Init+0x2e8>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d104      	bne.n	80035aa <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80035a0:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80035a4:	f7ff fe04 	bl	80031b0 <HAL_RCCEx_GetPeriphCLKFreq>
 80035a8:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	461a      	mov	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	025b      	lsls	r3, r3, #9
 80035bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80035c0:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a6b      	ldr	r2, [pc, #428]	@ (8003774 <HAL_SAI_Init+0x2ec>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	08da      	lsrs	r2, r3, #3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 80035d0:	68f9      	ldr	r1, [r7, #12]
 80035d2:	4b68      	ldr	r3, [pc, #416]	@ (8003774 <HAL_SAI_Init+0x2ec>)
 80035d4:	fba3 2301 	umull	r2, r3, r3, r1
 80035d8:	08da      	lsrs	r2, r3, #3
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	1aca      	subs	r2, r1, r3
 80035e4:	2a08      	cmp	r2, #8
 80035e6:	d904      	bls.n	80035f2 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d104      	bne.n	8003604 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	085a      	lsrs	r2, r3, #1
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_SAI_Init+0x18c>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d109      	bne.n	8003628 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003618:	2b01      	cmp	r3, #1
 800361a:	d101      	bne.n	8003620 <HAL_SAI_Init+0x198>
 800361c:	2300      	movs	r3, #0
 800361e:	e001      	b.n	8003624 <HAL_SAI_Init+0x19c>
 8003620:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003624:	61bb      	str	r3, [r7, #24]
 8003626:	e008      	b.n	800363a <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d102      	bne.n	8003636 <HAL_SAI_Init+0x1ae>
 8003630:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003634:	e000      	b.n	8003638 <HAL_SAI_Init+0x1b0>
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	6819      	ldr	r1, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	4b4c      	ldr	r3, [pc, #304]	@ (8003778 <HAL_SAI_Init+0x2f0>)
 8003646:	400b      	ands	r3, r1
 8003648:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6819      	ldr	r1, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685a      	ldr	r2, [r3, #4]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003658:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800365e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003664:	431a      	orrs	r2, r3
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                               \
 8003672:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800367e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a1b      	ldr	r3, [r3, #32]
 8003684:	051b      	lsls	r3, r3, #20
 8003686:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	6859      	ldr	r1, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	4b38      	ldr	r3, [pc, #224]	@ (800377c <HAL_SAI_Init+0x2f4>)
 800369c:	400b      	ands	r3, r1
 800369e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036ae:	431a      	orrs	r2, r3
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6899      	ldr	r1, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003780 <HAL_SAI_Init+0x2f8>)
 80036ca:	400b      	ands	r3, r1
 80036cc:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d8:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80036de:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80036e4:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80036ea:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036f0:	3b01      	subs	r3, #1
 80036f2:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80036f4:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	430a      	orrs	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	68d9      	ldr	r1, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800370c:	400b      	ands	r3, r1
 800370e:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68d9      	ldr	r1, [r3, #12]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800371e:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800372c:	3b01      	subs	r3, #1
 800372e:	021b      	lsls	r3, r3, #8
 8003730:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2200      	movs	r2, #0
 800373e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3720      	adds	r7, #32
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	40015804 	.word	0x40015804
 8003760:	40015824 	.word	0x40015824
 8003764:	40015800 	.word	0x40015800
 8003768:	40015c00 	.word	0x40015c00
 800376c:	40015c04 	.word	0x40015c04
 8003770:	40015c24 	.word	0x40015c24
 8003774:	cccccccd 	.word	0xcccccccd
 8003778:	ff05c010 	.word	0xff05c010
 800377c:	ffff1ff0 	.word	0xffff1ff0
 8003780:	fff88000 	.word	0xfff88000

08003784 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_SAI_Abort+0x1a>
 800379a:	2302      	movs	r3, #2
 800379c:	e072      	b.n	8003884 <HAL_SAI_Abort+0x100>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fae2 	bl	8003d70 <SAI_Disable>

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037ba:	d149      	bne.n	8003850 <HAL_SAI_Abort+0xcc>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80037ca:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01c      	beq.n	800380e <HAL_SAI_Abort+0x8a>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b12      	cmp	r3, #18
 80037de:	d116      	bne.n	800380e <HAL_SAI_Abort+0x8a>
    {
      if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fed7 	bl	8001598 <HAL_DMA_Abort>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00e      	beq.n	800380e <HAL_SAI_Abort+0x8a>
      {
        /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	2b80      	cmp	r3, #128	@ 0x80
 80037f8:	d009      	beq.n	800380e <HAL_SAI_Abort+0x8a>
        {
          status = HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003804:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01c      	beq.n	8003850 <HAL_SAI_Abort+0xcc>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b22      	cmp	r3, #34	@ 0x22
 8003820:	d116      	bne.n	8003850 <HAL_SAI_Abort+0xcc>
    {
      if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003826:	4618      	mov	r0, r3
 8003828:	f7fd feb6 	bl	8001598 <HAL_DMA_Abort>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00e      	beq.n	8003850 <HAL_SAI_Abort+0xcc>
      {
        /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
        if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003838:	2b80      	cmp	r3, #128	@ 0x80
 800383a:	d009      	beq.n	8003850 <HAL_SAI_Abort+0xcc>
        {
          status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	73fb      	strb	r3, [r7, #15]
          hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003846:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        }
      }
    }
  }
  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2200      	movs	r2, #0
 8003856:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f042 0208 	orr.w	r2, r2, #8
 8003870:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8003882:	7bfb      	ldrb	r3, [r7, #15]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	4613      	mov	r3, r2
 8003898:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d002      	beq.n	80038a6 <HAL_SAI_Receive_DMA+0x1a>
 80038a0:	88fb      	ldrh	r3, [r7, #6]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	e074      	b.n	8003994 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d16d      	bne.n	8003992 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_SAI_Receive_DMA+0x38>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e067      	b.n	8003994 <HAL_SAI_Receive_DMA+0x108>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	88fa      	ldrh	r2, [r7, #6]
 80038de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2222      	movs	r2, #34	@ 0x22
 80038ee:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f6:	4a29      	ldr	r2, [pc, #164]	@ (800399c <HAL_SAI_Receive_DMA+0x110>)
 80038f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038fe:	4a28      	ldr	r2, [pc, #160]	@ (80039a0 <HAL_SAI_Receive_DMA+0x114>)
 8003900:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003906:	4a27      	ldr	r2, [pc, #156]	@ (80039a4 <HAL_SAI_Receive_DMA+0x118>)
 8003908:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390e:	2200      	movs	r2, #0
 8003910:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	331c      	adds	r3, #28
 800391c:	4619      	mov	r1, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003922:	461a      	mov	r2, r3
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800392a:	f7fd fdd5 	bl	80014d8 <HAL_DMA_Start_IT>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e029      	b.n	8003994 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003940:	2100      	movs	r1, #0
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 f9de 	bl	8003d04 <SAI_InterruptFlag>
 8003948:	4601      	mov	r1, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8003966:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d107      	bne.n	8003986 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8003984:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800398e:	2300      	movs	r3, #0
 8003990:	e000      	b.n	8003994 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8003992:	2302      	movs	r3, #2
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	08003e41 	.word	0x08003e41
 80039a0:	08003de1 	.word	0x08003de1
 80039a4:	08003e5d 	.word	0x08003e5d

080039a8 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b086      	sub	sp, #24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8192 	beq.w	8003ce2 <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	691b      	ldr	r3, [r3, #16]
 80039cc:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred ------------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d009      	beq.n	80039f4 <HAL_SAI_IRQHandler+0x4c>
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	f003 0308 	and.w	r3, r3, #8
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
 80039f2:	e176      	b.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01e      	beq.n	8003a3c <HAL_SAI_IRQHandler+0x94>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d019      	beq.n	8003a3c <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b22      	cmp	r3, #34	@ 0x22
 8003a1a:	d101      	bne.n	8003a20 <HAL_SAI_IRQHandler+0x78>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e000      	b.n	8003a22 <HAL_SAI_IRQHandler+0x7a>
 8003a20:	2302      	movs	r3, #2
 8003a22:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	431a      	orrs	r2, r3
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 f95b 	bl	8003cf0 <HAL_SAI_ErrorCallback>
 8003a3a:	e152      	b.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f003 0302 	and.w	r3, r3, #2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d011      	beq.n	8003a6a <HAL_SAI_IRQHandler+0xc2>
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00c      	beq.n	8003a6a <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2202      	movs	r2, #2
 8003a56:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != (SAIcallback)NULL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 8140 	beq.w	8003ce2 <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a66:	4798      	blx	r3
      if (hsai->mutecallback != (SAIcallback)NULL)
 8003a68:	e13b      	b.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d057      	beq.n	8003b24 <HAL_SAI_IRQHandler+0x17c>
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d052      	beq.n	8003b24 <HAL_SAI_IRQHandler+0x17c>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	2220      	movs	r2, #32
 8003a84:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a8c:	f043 0204 	orr.w	r2, r3, #4
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d03a      	beq.n	8003b16 <HAL_SAI_IRQHandler+0x16e>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d018      	beq.n	8003ada <HAL_SAI_IRQHandler+0x132>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aac:	4a8f      	ldr	r2, [pc, #572]	@ (8003cec <HAL_SAI_IRQHandler+0x344>)
 8003aae:	651a      	str	r2, [r3, #80]	@ 0x50

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd fddf 	bl	8001678 <HAL_DMA_Abort_IT>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	f000 810b 	beq.w	8003cd8 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ac8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f90c 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003ad8:	e0fe      	b.n	8003cd8 <HAL_SAI_IRQHandler+0x330>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        else if (hsai->hdmarx != NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 80fa 	beq.w	8003cd8 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ae8:	4a80      	ldr	r2, [pc, #512]	@ (8003cec <HAL_SAI_IRQHandler+0x344>)
 8003aea:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003af0:	4618      	mov	r0, r3
 8003af2:	f7fd fdc1 	bl	8001678 <HAL_DMA_Abort_IT>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80ed 	beq.w	8003cd8 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b04:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 f8ee 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003b14:	e0e0      	b.n	8003cd8 <HAL_SAI_IRQHandler+0x330>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7ff fe34 	bl	8003784 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 f8e7 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003b22:	e0d9      	b.n	8003cd8 <HAL_SAI_IRQHandler+0x330>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d057      	beq.n	8003bde <HAL_SAI_IRQHandler+0x236>
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d052      	beq.n	8003bde <HAL_SAI_IRQHandler+0x236>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2240      	movs	r2, #64	@ 0x40
 8003b3e:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b46:	f043 0208 	orr.w	r2, r3, #8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d03a      	beq.n	8003bd0 <HAL_SAI_IRQHandler+0x228>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d018      	beq.n	8003b94 <HAL_SAI_IRQHandler+0x1ec>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b66:	4a61      	ldr	r2, [pc, #388]	@ (8003cec <HAL_SAI_IRQHandler+0x344>)
 8003b68:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd fd82 	bl	8001678 <HAL_DMA_Abort_IT>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80b0 	beq.w	8003cdc <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f8af 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003b92:	e0a3      	b.n	8003cdc <HAL_SAI_IRQHandler+0x334>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
        }
        else if (hsai->hdmarx != NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 809f 	beq.w	8003cdc <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba2:	4a52      	ldr	r2, [pc, #328]	@ (8003cec <HAL_SAI_IRQHandler+0x344>)
 8003ba4:	651a      	str	r2, [r3, #80]	@ 0x50
          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fd fd64 	bl	8001678 <HAL_DMA_Abort_IT>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8092 	beq.w	8003cdc <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bbe:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f891 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003bce:	e085      	b.n	8003cdc <HAL_SAI_IRQHandler+0x334>
        }
      }
      else
      {
        /* Abort SAI */
        HAL_SAI_Abort(hsai);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7ff fdd7 	bl	8003784 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f88a 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003bdc:	e07e      	b.n	8003cdc <HAL_SAI_IRQHandler+0x334>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d05d      	beq.n	8003ca4 <HAL_SAI_IRQHandler+0x2fc>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d058      	beq.n	8003ca4 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2204      	movs	r2, #4
 8003bf8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c00:	f043 0220 	orr.w	r2, r3, #32
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Abort the SAI DMA Streams */
      if (hsai->hdmatx != NULL)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d017      	beq.n	8003c42 <HAL_SAI_IRQHandler+0x29a>
      {
        /* Set the DMA Tx abort callback */
        hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c16:	4a35      	ldr	r2, [pc, #212]	@ (8003cec <HAL_SAI_IRQHandler+0x344>)
 8003c18:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fd fd2a 	bl	8001678 <HAL_DMA_Abort_IT>
 8003c24:	4603      	mov	r3, r0
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d05a      	beq.n	8003ce0 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f858 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8003c40:	e04e      	b.n	8003ce0 <HAL_SAI_IRQHandler+0x338>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
          }
      }
      else if (hsai->hdmarx != NULL)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d017      	beq.n	8003c7a <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Set the DMA Rx abort callback */
        hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c4e:	4a27      	ldr	r2, [pc, #156]	@ (8003cec <HAL_SAI_IRQHandler+0x344>)
 8003c50:	651a      	str	r2, [r3, #80]	@ 0x50
        /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fd fd0e 	bl	8001678 <HAL_DMA_Abort_IT>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d03e      	beq.n	8003ce0 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c68:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f83c 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8003c78:	e032      	b.n	8003ce0 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f04f 32ff 	mov.w	r2, #4294967295
 8003c8a:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f827 	bl	8003cf0 <HAL_SAI_ErrorCallback>
      if (hsai->hdmatx != NULL)
 8003ca2:	e01d      	b.n	8003ce0 <HAL_SAI_IRQHandler+0x338>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0310 	and.w	r3, r3, #16
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d019      	beq.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d014      	beq.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc6:	f043 0210 	orr.w	r2, r3, #16
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f000 f80d 	bl	8003cf0 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003cd6:	e004      	b.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003cd8:	bf00      	nop
 8003cda:	e002      	b.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HAL_SAI_IRQHandler+0x33a>
      if (hsai->hdmatx != NULL)
 8003ce0:	bf00      	nop
}
 8003ce2:	bf00      	nop
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	08003ec3 	.word	0x08003ec3

08003cf0 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8003cf8:	bf00      	nop
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b085      	sub	sp, #20
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d103      	bne.n	8003d20 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f043 0308 	orr.w	r3, r3, #8
 8003d1e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d10b      	bne.n	8003d40 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8003d2c:	2b03      	cmp	r3, #3
 8003d2e:	d003      	beq.n	8003d38 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d103      	bne.n	8003d40 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f043 0310 	orr.w	r3, r3, #16
 8003d3e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d003      	beq.n	8003d50 <SAI_InterruptFlag+0x4c>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d104      	bne.n	8003d5a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	e003      	b.n	8003d62 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f043 0304 	orr.w	r3, r3, #4
 8003d60:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b085      	sub	sp, #20
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8003d78:	4b17      	ldr	r3, [pc, #92]	@ (8003dd8 <SAI_Disable+0x68>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a17      	ldr	r2, [pc, #92]	@ (8003ddc <SAI_Disable+0x6c>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0b1b      	lsrs	r3, r3, #12
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003d9a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	1e5a      	subs	r2, r3, #1
 8003da0:	60fa      	str	r2, [r7, #12]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10a      	bne.n	8003dbc <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	72fb      	strb	r3, [r7, #11]
      break;
 8003dba:	e006      	b.n	8003dca <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e8      	bne.n	8003d9c <SAI_Disable+0x2c>

  return status;
 8003dca:	7afb      	ldrb	r3, [r7, #11]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	20000000 	.word	0x20000000
 8003ddc:	95cbec1b 	.word	0x95cbec1b

08003de0 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dec:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df6:	d01c      	beq.n	8003e32 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003e06:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8003e10:	2100      	movs	r1, #0
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f7ff ff76 	bl	8003d04 <SAI_InterruptFlag>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	43d9      	mvns	r1, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	691a      	ldr	r2, [r3, #16]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	400a      	ands	r2, r1
 8003e28:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7fc fe62 	bl	8000afc <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7fc fdee 	bl	8000a30 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003e54:	bf00      	nop
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e68:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d004      	beq.n	8003e8e <SAI_DMAError+0x32>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d112      	bne.n	8003eb4 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003e9c:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff ff66 	bl	8003d70 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f7ff ff1b 	bl	8003cf0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003eba:	bf00      	nop
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b084      	sub	sp, #16
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8003ede:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef0:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003ef8:	2b20      	cmp	r3, #32
 8003efa:	d00a      	beq.n	8003f12 <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8003efc:	68f8      	ldr	r0, [r7, #12]
 8003efe:	f7ff ff37 	bl	8003d70 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0208 	orr.w	r2, r2, #8
 8003f10:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fee4 	bl	8003cf0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8003f28:	bf00      	nop
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e040      	b.n	8003fc4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d106      	bne.n	8003f58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7fc fe7e 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2224      	movs	r2, #36	@ 0x24
 8003f5c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fe34 	bl	8004be4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fbcd 	bl	800471c <UART_SetConfig>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e01b      	b.n	8003fc4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 feb3 	bl	8004d28 <UART_CheckIdleState>
 8003fc2:	4603      	mov	r3, r0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3708      	adds	r7, #8
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b08a      	sub	sp, #40	@ 0x28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	4613      	mov	r3, r2
 8003fd8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fde:	2b20      	cmp	r3, #32
 8003fe0:	d165      	bne.n	80040ae <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_UART_Transmit_DMA+0x22>
 8003fe8:	88fb      	ldrh	r3, [r7, #6]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e05e      	b.n	80040b0 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	68ba      	ldr	r2, [r7, #8]
 8003ff6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	88fa      	ldrh	r2, [r7, #6]
 8003ffc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	88fa      	ldrh	r2, [r7, #6]
 8004004:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2221      	movs	r2, #33	@ 0x21
 8004014:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800401a:	2b00      	cmp	r3, #0
 800401c:	d027      	beq.n	800406e <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	4a25      	ldr	r2, [pc, #148]	@ (80040b8 <HAL_UART_Transmit_DMA+0xec>)
 8004024:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800402a:	4a24      	ldr	r2, [pc, #144]	@ (80040bc <HAL_UART_Transmit_DMA+0xf0>)
 800402c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004032:	4a23      	ldr	r2, [pc, #140]	@ (80040c0 <HAL_UART_Transmit_DMA+0xf4>)
 8004034:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800403a:	2200      	movs	r2, #0
 800403c:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004046:	4619      	mov	r1, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	3328      	adds	r3, #40	@ 0x28
 800404e:	461a      	mov	r2, r3
 8004050:	88fb      	ldrh	r3, [r7, #6]
 8004052:	f7fd fa41 	bl	80014d8 <HAL_DMA_Start_IT>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d008      	beq.n	800406e <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2210      	movs	r2, #16
 8004060:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e020      	b.n	80040b0 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2240      	movs	r2, #64	@ 0x40
 8004074:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3308      	adds	r3, #8
 800407c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	e853 3f00 	ldrex	r3, [r3]
 8004084:	613b      	str	r3, [r7, #16]
   return(result);
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800408c:	627b      	str	r3, [r7, #36]	@ 0x24
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3308      	adds	r3, #8
 8004094:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004096:	623a      	str	r2, [r7, #32]
 8004098:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409a:	69f9      	ldr	r1, [r7, #28]
 800409c:	6a3a      	ldr	r2, [r7, #32]
 800409e:	e841 2300 	strex	r3, r2, [r1]
 80040a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1e5      	bne.n	8004076 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3728      	adds	r7, #40	@ 0x28
 80040b4:	46bd      	mov	sp, r7
 80040b6:	bd80      	pop	{r7, pc}
 80040b8:	08005067 	.word	0x08005067
 80040bc:	080050fd 	.word	0x080050fd
 80040c0:	08005119 	.word	0x08005119

080040c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b0ba      	sub	sp, #232	@ 0xe8
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	69db      	ldr	r3, [r3, #28]
 80040d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80040ee:	f640 030f 	movw	r3, #2063	@ 0x80f
 80040f2:	4013      	ands	r3, r2
 80040f4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80040f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d115      	bne.n	800412c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b00      	cmp	r3, #0
 800410a:	d00f      	beq.n	800412c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800410c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004110:	f003 0320 	and.w	r3, r3, #32
 8004114:	2b00      	cmp	r3, #0
 8004116:	d009      	beq.n	800412c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 82c6 	beq.w	80046ae <HAL_UART_IRQHandler+0x5ea>
      {
        huart->RxISR(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	4798      	blx	r3
      }
      return;
 800412a:	e2c0      	b.n	80046ae <HAL_UART_IRQHandler+0x5ea>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800412c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8117 	beq.w	8004364 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004136:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004142:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004146:	4b85      	ldr	r3, [pc, #532]	@ (800435c <HAL_UART_IRQHandler+0x298>)
 8004148:	4013      	ands	r3, r2
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 810a 	beq.w	8004364 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004150:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d011      	beq.n	8004180 <HAL_UART_IRQHandler+0xbc>
 800415c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2201      	movs	r2, #1
 800416e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004176:	f043 0201 	orr.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d011      	beq.n	80041b0 <HAL_UART_IRQHandler+0xec>
 800418c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004190:	f003 0301 	and.w	r3, r3, #1
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00b      	beq.n	80041b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2202      	movs	r2, #2
 800419e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041a6:	f043 0204 	orr.w	r2, r3, #4
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80041b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d011      	beq.n	80041e0 <HAL_UART_IRQHandler+0x11c>
 80041bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00b      	beq.n	80041e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2204      	movs	r2, #4
 80041ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d6:	f043 0202 	orr.w	r2, r3, #2
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041e4:	f003 0308 	and.w	r3, r3, #8
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d017      	beq.n	800421c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041f0:	f003 0320 	and.w	r3, r3, #32
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004200:	2b00      	cmp	r3, #0
 8004202:	d00b      	beq.n	800421c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2208      	movs	r2, #8
 800420a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004212:	f043 0208 	orr.w	r2, r3, #8
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800421c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004220:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004224:	2b00      	cmp	r3, #0
 8004226:	d012      	beq.n	800424e <HAL_UART_IRQHandler+0x18a>
 8004228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800422c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00c      	beq.n	800424e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800423c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004244:	f043 0220 	orr.w	r2, r3, #32
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 822c 	beq.w	80046b2 <HAL_UART_IRQHandler+0x5ee>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800425a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800425e:	f003 0320 	and.w	r3, r3, #32
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00d      	beq.n	8004282 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d007      	beq.n	8004282 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004288:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004296:	2b40      	cmp	r3, #64	@ 0x40
 8004298:	d005      	beq.n	80042a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800429a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800429e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d04f      	beq.n	8004346 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 fe79 	bl	8004f9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042b6:	2b40      	cmp	r3, #64	@ 0x40
 80042b8:	d141      	bne.n	800433e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	3308      	adds	r3, #8
 80042c0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80042c8:	e853 3f00 	ldrex	r3, [r3]
 80042cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80042d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80042d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042d8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	3308      	adds	r3, #8
 80042e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80042e6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80042ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80042f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80042f6:	e841 2300 	strex	r3, r2, [r1]
 80042fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80042fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1d9      	bne.n	80042ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800430a:	2b00      	cmp	r3, #0
 800430c:	d013      	beq.n	8004336 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004312:	4a13      	ldr	r2, [pc, #76]	@ (8004360 <HAL_UART_IRQHandler+0x29c>)
 8004314:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800431a:	4618      	mov	r0, r3
 800431c:	f7fd f9ac 	bl	8001678 <HAL_DMA_Abort_IT>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d017      	beq.n	8004356 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800432a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004330:	4610      	mov	r0, r2
 8004332:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	e00f      	b.n	8004356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f9d0 	bl	80046dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800433c:	e00b      	b.n	8004356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f9cc 	bl	80046dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004344:	e007      	b.n	8004356 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f9c8 	bl	80046dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8004354:	e1ad      	b.n	80046b2 <HAL_UART_IRQHandler+0x5ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004356:	bf00      	nop
    return;
 8004358:	e1ab      	b.n	80046b2 <HAL_UART_IRQHandler+0x5ee>
 800435a:	bf00      	nop
 800435c:	04000120 	.word	0x04000120
 8004360:	08005197 	.word	0x08005197

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004368:	2b01      	cmp	r3, #1
 800436a:	f040 8166 	bne.w	800463a <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800436e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004372:	f003 0310 	and.w	r3, r3, #16
 8004376:	2b00      	cmp	r3, #0
 8004378:	f000 815f 	beq.w	800463a <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800437c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 8158 	beq.w	800463a <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2210      	movs	r2, #16
 8004390:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	2b40      	cmp	r3, #64	@ 0x40
 800439e:	f040 80d0 	bne.w	8004542 <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	f000 80ab 	beq.w	800450e <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80043be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043c2:	429a      	cmp	r2, r3
 80043c4:	f080 80a3 	bcs.w	800450e <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043ce:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d6:	69db      	ldr	r3, [r3, #28]
 80043d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043dc:	f000 8086 	beq.w	80044ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80043ec:	e853 3f00 	ldrex	r3, [r3]
 80043f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80043f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80043f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80043fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	461a      	mov	r2, r3
 8004406:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800440a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800440e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004412:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004416:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800441a:	e841 2300 	strex	r3, r2, [r1]
 800441e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004422:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1da      	bne.n	80043e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	3308      	adds	r3, #8
 8004430:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004432:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004434:	e853 3f00 	ldrex	r3, [r3]
 8004438:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800443a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800443c:	f023 0301 	bic.w	r3, r3, #1
 8004440:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	3308      	adds	r3, #8
 800444a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800444e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004452:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004456:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004460:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e1      	bne.n	800442a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3308      	adds	r3, #8
 800446c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004476:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004478:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800447c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3308      	adds	r3, #8
 8004486:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800448a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800448c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004490:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004498:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e3      	bne.n	8004466 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044b4:	e853 3f00 	ldrex	r3, [r3]
 80044b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044bc:	f023 0310 	bic.w	r3, r3, #16
 80044c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	461a      	mov	r2, r3
 80044ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80044ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80044d0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80044d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80044dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e4      	bne.n	80044ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd f856 	bl	8001598 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2202      	movs	r2, #2
 80044f0:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80044fe:	b29b      	uxth	r3, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	b29b      	uxth	r3, r3
 8004504:	4619      	mov	r1, r3
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f8f2 	bl	80046f0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800450c:	e0d3      	b.n	80046b6 <HAL_UART_IRQHandler+0x5f2>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004514:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004518:	429a      	cmp	r2, r3
 800451a:	f040 80cc 	bne.w	80046b6 <HAL_UART_IRQHandler+0x5f2>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004528:	f040 80c5 	bne.w	80046b6 <HAL_UART_IRQHandler+0x5f2>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004538:	4619      	mov	r1, r3
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f8d8 	bl	80046f0 <HAL_UARTEx_RxEventCallback>
      return;
 8004540:	e0b9      	b.n	80046b6 <HAL_UART_IRQHandler+0x5f2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800454e:	b29b      	uxth	r3, r3
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	f000 80ab 	beq.w	80046ba <HAL_UART_IRQHandler+0x5f6>
          && (nb_rx_data > 0U))
 8004564:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004568:	2b00      	cmp	r3, #0
 800456a:	f000 80a6 	beq.w	80046ba <HAL_UART_IRQHandler+0x5f6>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004576:	e853 3f00 	ldrex	r3, [r3]
 800457a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800457c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800457e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	461a      	mov	r2, r3
 800458c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004590:	647b      	str	r3, [r7, #68]	@ 0x44
 8004592:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004594:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004598:	e841 2300 	strex	r3, r2, [r1]
 800459c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800459e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e4      	bne.n	800456e <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3308      	adds	r3, #8
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	623b      	str	r3, [r7, #32]
   return(result);
 80045b4:	6a3b      	ldr	r3, [r7, #32]
 80045b6:	f023 0301 	bic.w	r3, r3, #1
 80045ba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3308      	adds	r3, #8
 80045c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045c8:	633a      	str	r2, [r7, #48]	@ 0x30
 80045ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80045ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80045d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e3      	bne.n	80045a4 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	e853 3f00 	ldrex	r3, [r3]
 80045fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f023 0310 	bic.w	r3, r3, #16
 8004604:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004612:	61fb      	str	r3, [r7, #28]
 8004614:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	69b9      	ldr	r1, [r7, #24]
 8004618:	69fa      	ldr	r2, [r7, #28]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	617b      	str	r3, [r7, #20]
   return(result);
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e4      	bne.n	80045f0 <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2202      	movs	r2, #2
 800462a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800462c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004630:	4619      	mov	r1, r3
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f85c 	bl	80046f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004638:	e03f      	b.n	80046ba <HAL_UART_IRQHandler+0x5f6>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800463a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800463e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00e      	beq.n	8004664 <HAL_UART_IRQHandler+0x5a0>
 8004646:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800464a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_UART_IRQHandler+0x5a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800465a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f853 	bl	8004708 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004662:	e02d      	b.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00e      	beq.n	800468e <HAL_UART_IRQHandler+0x5ca>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004678:	2b00      	cmp	r3, #0
 800467a:	d008      	beq.n	800468e <HAL_UART_IRQHandler+0x5ca>
  {
    if (huart->TxISR != NULL)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01c      	beq.n	80046be <HAL_UART_IRQHandler+0x5fa>
    {
      huart->TxISR(huart);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
    }
    return;
 800468c:	e017      	b.n	80046be <HAL_UART_IRQHandler+0x5fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800468e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004696:	2b00      	cmp	r3, #0
 8004698:	d012      	beq.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
 800469a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00c      	beq.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
  {
    UART_EndTransmit_IT(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fd87 	bl	80051ba <UART_EndTransmit_IT>
    return;
 80046ac:	e008      	b.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
      return;
 80046ae:	bf00      	nop
 80046b0:	e006      	b.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
    return;
 80046b2:	bf00      	nop
 80046b4:	e004      	b.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
      return;
 80046b6:	bf00      	nop
 80046b8:	e002      	b.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
      return;
 80046ba:	bf00      	nop
 80046bc:	e000      	b.n	80046c0 <HAL_UART_IRQHandler+0x5fc>
    return;
 80046be:	bf00      	nop
  }

}
 80046c0:	37e8      	adds	r7, #232	@ 0xe8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop

080046c8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80046d0:	bf00      	nop
 80046d2:	370c      	adds	r7, #12
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80046e4:	bf00      	nop
 80046e6:	370c      	adds	r7, #12
 80046e8:	46bd      	mov	sp, r7
 80046ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ee:	4770      	bx	lr

080046f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	460b      	mov	r3, r1
 80046fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	431a      	orrs	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4313      	orrs	r3, r2
 800473e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4ba6      	ldr	r3, [pc, #664]	@ (80049e0 <UART_SetConfig+0x2c4>)
 8004748:	4013      	ands	r3, r2
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	6979      	ldr	r1, [r7, #20]
 8004750:	430b      	orrs	r3, r1
 8004752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a1b      	ldr	r3, [r3, #32]
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	4313      	orrs	r3, r2
 8004778:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	430a      	orrs	r2, r1
 800478c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a94      	ldr	r2, [pc, #592]	@ (80049e4 <UART_SetConfig+0x2c8>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d120      	bne.n	80047da <UART_SetConfig+0xbe>
 8004798:	4b93      	ldr	r3, [pc, #588]	@ (80049e8 <UART_SetConfig+0x2cc>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479e:	f003 0303 	and.w	r3, r3, #3
 80047a2:	2b03      	cmp	r3, #3
 80047a4:	d816      	bhi.n	80047d4 <UART_SetConfig+0xb8>
 80047a6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ac <UART_SetConfig+0x90>)
 80047a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ac:	080047bd 	.word	0x080047bd
 80047b0:	080047c9 	.word	0x080047c9
 80047b4:	080047c3 	.word	0x080047c3
 80047b8:	080047cf 	.word	0x080047cf
 80047bc:	2301      	movs	r3, #1
 80047be:	77fb      	strb	r3, [r7, #31]
 80047c0:	e150      	b.n	8004a64 <UART_SetConfig+0x348>
 80047c2:	2302      	movs	r3, #2
 80047c4:	77fb      	strb	r3, [r7, #31]
 80047c6:	e14d      	b.n	8004a64 <UART_SetConfig+0x348>
 80047c8:	2304      	movs	r3, #4
 80047ca:	77fb      	strb	r3, [r7, #31]
 80047cc:	e14a      	b.n	8004a64 <UART_SetConfig+0x348>
 80047ce:	2308      	movs	r3, #8
 80047d0:	77fb      	strb	r3, [r7, #31]
 80047d2:	e147      	b.n	8004a64 <UART_SetConfig+0x348>
 80047d4:	2310      	movs	r3, #16
 80047d6:	77fb      	strb	r3, [r7, #31]
 80047d8:	e144      	b.n	8004a64 <UART_SetConfig+0x348>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a83      	ldr	r2, [pc, #524]	@ (80049ec <UART_SetConfig+0x2d0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d132      	bne.n	800484a <UART_SetConfig+0x12e>
 80047e4:	4b80      	ldr	r3, [pc, #512]	@ (80049e8 <UART_SetConfig+0x2cc>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ea:	f003 030c 	and.w	r3, r3, #12
 80047ee:	2b0c      	cmp	r3, #12
 80047f0:	d828      	bhi.n	8004844 <UART_SetConfig+0x128>
 80047f2:	a201      	add	r2, pc, #4	@ (adr r2, 80047f8 <UART_SetConfig+0xdc>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800482d 	.word	0x0800482d
 80047fc:	08004845 	.word	0x08004845
 8004800:	08004845 	.word	0x08004845
 8004804:	08004845 	.word	0x08004845
 8004808:	08004839 	.word	0x08004839
 800480c:	08004845 	.word	0x08004845
 8004810:	08004845 	.word	0x08004845
 8004814:	08004845 	.word	0x08004845
 8004818:	08004833 	.word	0x08004833
 800481c:	08004845 	.word	0x08004845
 8004820:	08004845 	.word	0x08004845
 8004824:	08004845 	.word	0x08004845
 8004828:	0800483f 	.word	0x0800483f
 800482c:	2300      	movs	r3, #0
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e118      	b.n	8004a64 <UART_SetConfig+0x348>
 8004832:	2302      	movs	r3, #2
 8004834:	77fb      	strb	r3, [r7, #31]
 8004836:	e115      	b.n	8004a64 <UART_SetConfig+0x348>
 8004838:	2304      	movs	r3, #4
 800483a:	77fb      	strb	r3, [r7, #31]
 800483c:	e112      	b.n	8004a64 <UART_SetConfig+0x348>
 800483e:	2308      	movs	r3, #8
 8004840:	77fb      	strb	r3, [r7, #31]
 8004842:	e10f      	b.n	8004a64 <UART_SetConfig+0x348>
 8004844:	2310      	movs	r3, #16
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e10c      	b.n	8004a64 <UART_SetConfig+0x348>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a68      	ldr	r2, [pc, #416]	@ (80049f0 <UART_SetConfig+0x2d4>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d120      	bne.n	8004896 <UART_SetConfig+0x17a>
 8004854:	4b64      	ldr	r3, [pc, #400]	@ (80049e8 <UART_SetConfig+0x2cc>)
 8004856:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800485a:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800485e:	2b30      	cmp	r3, #48	@ 0x30
 8004860:	d013      	beq.n	800488a <UART_SetConfig+0x16e>
 8004862:	2b30      	cmp	r3, #48	@ 0x30
 8004864:	d814      	bhi.n	8004890 <UART_SetConfig+0x174>
 8004866:	2b20      	cmp	r3, #32
 8004868:	d009      	beq.n	800487e <UART_SetConfig+0x162>
 800486a:	2b20      	cmp	r3, #32
 800486c:	d810      	bhi.n	8004890 <UART_SetConfig+0x174>
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <UART_SetConfig+0x15c>
 8004872:	2b10      	cmp	r3, #16
 8004874:	d006      	beq.n	8004884 <UART_SetConfig+0x168>
 8004876:	e00b      	b.n	8004890 <UART_SetConfig+0x174>
 8004878:	2300      	movs	r3, #0
 800487a:	77fb      	strb	r3, [r7, #31]
 800487c:	e0f2      	b.n	8004a64 <UART_SetConfig+0x348>
 800487e:	2302      	movs	r3, #2
 8004880:	77fb      	strb	r3, [r7, #31]
 8004882:	e0ef      	b.n	8004a64 <UART_SetConfig+0x348>
 8004884:	2304      	movs	r3, #4
 8004886:	77fb      	strb	r3, [r7, #31]
 8004888:	e0ec      	b.n	8004a64 <UART_SetConfig+0x348>
 800488a:	2308      	movs	r3, #8
 800488c:	77fb      	strb	r3, [r7, #31]
 800488e:	e0e9      	b.n	8004a64 <UART_SetConfig+0x348>
 8004890:	2310      	movs	r3, #16
 8004892:	77fb      	strb	r3, [r7, #31]
 8004894:	e0e6      	b.n	8004a64 <UART_SetConfig+0x348>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a56      	ldr	r2, [pc, #344]	@ (80049f4 <UART_SetConfig+0x2d8>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d120      	bne.n	80048e2 <UART_SetConfig+0x1c6>
 80048a0:	4b51      	ldr	r3, [pc, #324]	@ (80049e8 <UART_SetConfig+0x2cc>)
 80048a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80048aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80048ac:	d013      	beq.n	80048d6 <UART_SetConfig+0x1ba>
 80048ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80048b0:	d814      	bhi.n	80048dc <UART_SetConfig+0x1c0>
 80048b2:	2b80      	cmp	r3, #128	@ 0x80
 80048b4:	d009      	beq.n	80048ca <UART_SetConfig+0x1ae>
 80048b6:	2b80      	cmp	r3, #128	@ 0x80
 80048b8:	d810      	bhi.n	80048dc <UART_SetConfig+0x1c0>
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d002      	beq.n	80048c4 <UART_SetConfig+0x1a8>
 80048be:	2b40      	cmp	r3, #64	@ 0x40
 80048c0:	d006      	beq.n	80048d0 <UART_SetConfig+0x1b4>
 80048c2:	e00b      	b.n	80048dc <UART_SetConfig+0x1c0>
 80048c4:	2300      	movs	r3, #0
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e0cc      	b.n	8004a64 <UART_SetConfig+0x348>
 80048ca:	2302      	movs	r3, #2
 80048cc:	77fb      	strb	r3, [r7, #31]
 80048ce:	e0c9      	b.n	8004a64 <UART_SetConfig+0x348>
 80048d0:	2304      	movs	r3, #4
 80048d2:	77fb      	strb	r3, [r7, #31]
 80048d4:	e0c6      	b.n	8004a64 <UART_SetConfig+0x348>
 80048d6:	2308      	movs	r3, #8
 80048d8:	77fb      	strb	r3, [r7, #31]
 80048da:	e0c3      	b.n	8004a64 <UART_SetConfig+0x348>
 80048dc:	2310      	movs	r3, #16
 80048de:	77fb      	strb	r3, [r7, #31]
 80048e0:	e0c0      	b.n	8004a64 <UART_SetConfig+0x348>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a44      	ldr	r2, [pc, #272]	@ (80049f8 <UART_SetConfig+0x2dc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d125      	bne.n	8004938 <UART_SetConfig+0x21c>
 80048ec:	4b3e      	ldr	r3, [pc, #248]	@ (80049e8 <UART_SetConfig+0x2cc>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048fa:	d017      	beq.n	800492c <UART_SetConfig+0x210>
 80048fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004900:	d817      	bhi.n	8004932 <UART_SetConfig+0x216>
 8004902:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004906:	d00b      	beq.n	8004920 <UART_SetConfig+0x204>
 8004908:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800490c:	d811      	bhi.n	8004932 <UART_SetConfig+0x216>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <UART_SetConfig+0x1fe>
 8004912:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004916:	d006      	beq.n	8004926 <UART_SetConfig+0x20a>
 8004918:	e00b      	b.n	8004932 <UART_SetConfig+0x216>
 800491a:	2300      	movs	r3, #0
 800491c:	77fb      	strb	r3, [r7, #31]
 800491e:	e0a1      	b.n	8004a64 <UART_SetConfig+0x348>
 8004920:	2302      	movs	r3, #2
 8004922:	77fb      	strb	r3, [r7, #31]
 8004924:	e09e      	b.n	8004a64 <UART_SetConfig+0x348>
 8004926:	2304      	movs	r3, #4
 8004928:	77fb      	strb	r3, [r7, #31]
 800492a:	e09b      	b.n	8004a64 <UART_SetConfig+0x348>
 800492c:	2308      	movs	r3, #8
 800492e:	77fb      	strb	r3, [r7, #31]
 8004930:	e098      	b.n	8004a64 <UART_SetConfig+0x348>
 8004932:	2310      	movs	r3, #16
 8004934:	77fb      	strb	r3, [r7, #31]
 8004936:	e095      	b.n	8004a64 <UART_SetConfig+0x348>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2f      	ldr	r2, [pc, #188]	@ (80049fc <UART_SetConfig+0x2e0>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d125      	bne.n	800498e <UART_SetConfig+0x272>
 8004942:	4b29      	ldr	r3, [pc, #164]	@ (80049e8 <UART_SetConfig+0x2cc>)
 8004944:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004948:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800494c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004950:	d017      	beq.n	8004982 <UART_SetConfig+0x266>
 8004952:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004956:	d817      	bhi.n	8004988 <UART_SetConfig+0x26c>
 8004958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800495c:	d00b      	beq.n	8004976 <UART_SetConfig+0x25a>
 800495e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004962:	d811      	bhi.n	8004988 <UART_SetConfig+0x26c>
 8004964:	2b00      	cmp	r3, #0
 8004966:	d003      	beq.n	8004970 <UART_SetConfig+0x254>
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800496c:	d006      	beq.n	800497c <UART_SetConfig+0x260>
 800496e:	e00b      	b.n	8004988 <UART_SetConfig+0x26c>
 8004970:	2301      	movs	r3, #1
 8004972:	77fb      	strb	r3, [r7, #31]
 8004974:	e076      	b.n	8004a64 <UART_SetConfig+0x348>
 8004976:	2302      	movs	r3, #2
 8004978:	77fb      	strb	r3, [r7, #31]
 800497a:	e073      	b.n	8004a64 <UART_SetConfig+0x348>
 800497c:	2304      	movs	r3, #4
 800497e:	77fb      	strb	r3, [r7, #31]
 8004980:	e070      	b.n	8004a64 <UART_SetConfig+0x348>
 8004982:	2308      	movs	r3, #8
 8004984:	77fb      	strb	r3, [r7, #31]
 8004986:	e06d      	b.n	8004a64 <UART_SetConfig+0x348>
 8004988:	2310      	movs	r3, #16
 800498a:	77fb      	strb	r3, [r7, #31]
 800498c:	e06a      	b.n	8004a64 <UART_SetConfig+0x348>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1b      	ldr	r2, [pc, #108]	@ (8004a00 <UART_SetConfig+0x2e4>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d138      	bne.n	8004a0a <UART_SetConfig+0x2ee>
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <UART_SetConfig+0x2cc>)
 800499a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800499e:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80049a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049a6:	d017      	beq.n	80049d8 <UART_SetConfig+0x2bc>
 80049a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80049ac:	d82a      	bhi.n	8004a04 <UART_SetConfig+0x2e8>
 80049ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b2:	d00b      	beq.n	80049cc <UART_SetConfig+0x2b0>
 80049b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80049b8:	d824      	bhi.n	8004a04 <UART_SetConfig+0x2e8>
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <UART_SetConfig+0x2aa>
 80049be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c2:	d006      	beq.n	80049d2 <UART_SetConfig+0x2b6>
 80049c4:	e01e      	b.n	8004a04 <UART_SetConfig+0x2e8>
 80049c6:	2300      	movs	r3, #0
 80049c8:	77fb      	strb	r3, [r7, #31]
 80049ca:	e04b      	b.n	8004a64 <UART_SetConfig+0x348>
 80049cc:	2302      	movs	r3, #2
 80049ce:	77fb      	strb	r3, [r7, #31]
 80049d0:	e048      	b.n	8004a64 <UART_SetConfig+0x348>
 80049d2:	2304      	movs	r3, #4
 80049d4:	77fb      	strb	r3, [r7, #31]
 80049d6:	e045      	b.n	8004a64 <UART_SetConfig+0x348>
 80049d8:	2308      	movs	r3, #8
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e042      	b.n	8004a64 <UART_SetConfig+0x348>
 80049de:	bf00      	nop
 80049e0:	efff69f3 	.word	0xefff69f3
 80049e4:	40011000 	.word	0x40011000
 80049e8:	40023800 	.word	0x40023800
 80049ec:	40004400 	.word	0x40004400
 80049f0:	40004800 	.word	0x40004800
 80049f4:	40004c00 	.word	0x40004c00
 80049f8:	40005000 	.word	0x40005000
 80049fc:	40011400 	.word	0x40011400
 8004a00:	40007800 	.word	0x40007800
 8004a04:	2310      	movs	r3, #16
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e02c      	b.n	8004a64 <UART_SetConfig+0x348>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a72      	ldr	r2, [pc, #456]	@ (8004bd8 <UART_SetConfig+0x4bc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d125      	bne.n	8004a60 <UART_SetConfig+0x344>
 8004a14:	4b71      	ldr	r3, [pc, #452]	@ (8004bdc <UART_SetConfig+0x4c0>)
 8004a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a1a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004a1e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a22:	d017      	beq.n	8004a54 <UART_SetConfig+0x338>
 8004a24:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004a28:	d817      	bhi.n	8004a5a <UART_SetConfig+0x33e>
 8004a2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a2e:	d00b      	beq.n	8004a48 <UART_SetConfig+0x32c>
 8004a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a34:	d811      	bhi.n	8004a5a <UART_SetConfig+0x33e>
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d003      	beq.n	8004a42 <UART_SetConfig+0x326>
 8004a3a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004a3e:	d006      	beq.n	8004a4e <UART_SetConfig+0x332>
 8004a40:	e00b      	b.n	8004a5a <UART_SetConfig+0x33e>
 8004a42:	2300      	movs	r3, #0
 8004a44:	77fb      	strb	r3, [r7, #31]
 8004a46:	e00d      	b.n	8004a64 <UART_SetConfig+0x348>
 8004a48:	2302      	movs	r3, #2
 8004a4a:	77fb      	strb	r3, [r7, #31]
 8004a4c:	e00a      	b.n	8004a64 <UART_SetConfig+0x348>
 8004a4e:	2304      	movs	r3, #4
 8004a50:	77fb      	strb	r3, [r7, #31]
 8004a52:	e007      	b.n	8004a64 <UART_SetConfig+0x348>
 8004a54:	2308      	movs	r3, #8
 8004a56:	77fb      	strb	r3, [r7, #31]
 8004a58:	e004      	b.n	8004a64 <UART_SetConfig+0x348>
 8004a5a:	2310      	movs	r3, #16
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e001      	b.n	8004a64 <UART_SetConfig+0x348>
 8004a60:	2310      	movs	r3, #16
 8004a62:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a6c:	d15b      	bne.n	8004b26 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004a6e:	7ffb      	ldrb	r3, [r7, #31]
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	d828      	bhi.n	8004ac6 <UART_SetConfig+0x3aa>
 8004a74:	a201      	add	r2, pc, #4	@ (adr r2, 8004a7c <UART_SetConfig+0x360>)
 8004a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a7a:	bf00      	nop
 8004a7c:	08004aa1 	.word	0x08004aa1
 8004a80:	08004aa9 	.word	0x08004aa9
 8004a84:	08004ab1 	.word	0x08004ab1
 8004a88:	08004ac7 	.word	0x08004ac7
 8004a8c:	08004ab7 	.word	0x08004ab7
 8004a90:	08004ac7 	.word	0x08004ac7
 8004a94:	08004ac7 	.word	0x08004ac7
 8004a98:	08004ac7 	.word	0x08004ac7
 8004a9c:	08004abf 	.word	0x08004abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004aa0:	f7fd ff36 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8004aa4:	61b8      	str	r0, [r7, #24]
        break;
 8004aa6:	e013      	b.n	8004ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa8:	f7fd ff46 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8004aac:	61b8      	str	r0, [r7, #24]
        break;
 8004aae:	e00f      	b.n	8004ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ab0:	4b4b      	ldr	r3, [pc, #300]	@ (8004be0 <UART_SetConfig+0x4c4>)
 8004ab2:	61bb      	str	r3, [r7, #24]
        break;
 8004ab4:	e00c      	b.n	8004ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ab6:	f7fd fe1b 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004aba:	61b8      	str	r0, [r7, #24]
        break;
 8004abc:	e008      	b.n	8004ad0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004abe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ac2:	61bb      	str	r3, [r7, #24]
        break;
 8004ac4:	e004      	b.n	8004ad0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	77bb      	strb	r3, [r7, #30]
        break;
 8004ace:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d074      	beq.n	8004bc0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	005a      	lsls	r2, r3, #1
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	085b      	lsrs	r3, r3, #1
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b0f      	cmp	r3, #15
 8004af0:	d916      	bls.n	8004b20 <UART_SetConfig+0x404>
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004af8:	d212      	bcs.n	8004b20 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	f023 030f 	bic.w	r3, r3, #15
 8004b02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	085b      	lsrs	r3, r3, #1
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f003 0307 	and.w	r3, r3, #7
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	89fb      	ldrh	r3, [r7, #14]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	89fa      	ldrh	r2, [r7, #14]
 8004b1c:	60da      	str	r2, [r3, #12]
 8004b1e:	e04f      	b.n	8004bc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	77bb      	strb	r3, [r7, #30]
 8004b24:	e04c      	b.n	8004bc0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b26:	7ffb      	ldrb	r3, [r7, #31]
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d828      	bhi.n	8004b7e <UART_SetConfig+0x462>
 8004b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <UART_SetConfig+0x418>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	08004b7f 	.word	0x08004b7f
 8004b44:	08004b6f 	.word	0x08004b6f
 8004b48:	08004b7f 	.word	0x08004b7f
 8004b4c:	08004b7f 	.word	0x08004b7f
 8004b50:	08004b7f 	.word	0x08004b7f
 8004b54:	08004b77 	.word	0x08004b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b58:	f7fd feda 	bl	8002910 <HAL_RCC_GetPCLK1Freq>
 8004b5c:	61b8      	str	r0, [r7, #24]
        break;
 8004b5e:	e013      	b.n	8004b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b60:	f7fd feea 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8004b64:	61b8      	str	r0, [r7, #24]
        break;
 8004b66:	e00f      	b.n	8004b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b68:	4b1d      	ldr	r3, [pc, #116]	@ (8004be0 <UART_SetConfig+0x4c4>)
 8004b6a:	61bb      	str	r3, [r7, #24]
        break;
 8004b6c:	e00c      	b.n	8004b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b6e:	f7fd fdbf 	bl	80026f0 <HAL_RCC_GetSysClockFreq>
 8004b72:	61b8      	str	r0, [r7, #24]
        break;
 8004b74:	e008      	b.n	8004b88 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b7a:	61bb      	str	r3, [r7, #24]
        break;
 8004b7c:	e004      	b.n	8004b88 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	77bb      	strb	r3, [r7, #30]
        break;
 8004b86:	bf00      	nop
    }

    if (pclk != 0U)
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d018      	beq.n	8004bc0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	085a      	lsrs	r2, r3, #1
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	441a      	add	r2, r3
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ba0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b0f      	cmp	r3, #15
 8004ba6:	d909      	bls.n	8004bbc <UART_SetConfig+0x4a0>
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bae:	d205      	bcs.n	8004bbc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	b29a      	uxth	r2, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	60da      	str	r2, [r3, #12]
 8004bba:	e001      	b.n	8004bc0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004bcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3720      	adds	r7, #32
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	40007c00 	.word	0x40007c00
 8004bdc:	40023800 	.word	0x40023800
 8004be0:	00f42400 	.word	0x00f42400

08004be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d00a      	beq.n	8004c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d00a      	beq.n	8004c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d00a      	beq.n	8004c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	430a      	orrs	r2, r1
 8004c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	f003 0304 	and.w	r3, r3, #4
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	430a      	orrs	r2, r1
 8004c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c78:	f003 0310 	and.w	r3, r3, #16
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00a      	beq.n	8004c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	430a      	orrs	r2, r1
 8004c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	430a      	orrs	r2, r1
 8004cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d01a      	beq.n	8004cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ce2:	d10a      	bne.n	8004cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00a      	beq.n	8004d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	605a      	str	r2, [r3, #4]
  }
}
 8004d1c:	bf00      	nop
 8004d1e:	370c      	adds	r7, #12
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b098      	sub	sp, #96	@ 0x60
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d38:	f7fc f9de 	bl	80010f8 <HAL_GetTick>
 8004d3c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0308 	and.w	r3, r3, #8
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	d12e      	bne.n	8004daa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d50:	9300      	str	r3, [sp, #0]
 8004d52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d54:	2200      	movs	r2, #0
 8004d56:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f88c 	bl	8004e78 <UART_WaitOnFlagUntilTimeout>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d021      	beq.n	8004daa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d6e:	e853 3f00 	ldrex	r3, [r3]
 8004d72:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d86:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d88:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d8c:	e841 2300 	strex	r3, r2, [r1]
 8004d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e6      	bne.n	8004d66 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2220      	movs	r2, #32
 8004d9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2200      	movs	r2, #0
 8004da2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e062      	b.n	8004e70 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 0304 	and.w	r3, r3, #4
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d149      	bne.n	8004e4c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004db8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f856 	bl	8004e78 <UART_WaitOnFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d03c      	beq.n	8004e4c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dda:	e853 3f00 	ldrex	r3, [r3]
 8004dde:	623b      	str	r3, [r7, #32]
   return(result);
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004df6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004df8:	e841 2300 	strex	r3, r2, [r1]
 8004dfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1e6      	bne.n	8004dd2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	3308      	adds	r3, #8
 8004e0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	3308      	adds	r3, #8
 8004e22:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e24:	61fa      	str	r2, [r7, #28]
 8004e26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	69b9      	ldr	r1, [r7, #24]
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	617b      	str	r3, [r7, #20]
   return(result);
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2220      	movs	r2, #32
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e011      	b.n	8004e70 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2220      	movs	r2, #32
 8004e50:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3758      	adds	r7, #88	@ 0x58
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b084      	sub	sp, #16
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	603b      	str	r3, [r7, #0]
 8004e84:	4613      	mov	r3, r2
 8004e86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e88:	e04f      	b.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e90:	d04b      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e92:	f7fc f931 	bl	80010f8 <HAL_GetTick>
 8004e96:	4602      	mov	r2, r0
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	1ad3      	subs	r3, r2, r3
 8004e9c:	69ba      	ldr	r2, [r7, #24]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d302      	bcc.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ea8:	2303      	movs	r3, #3
 8004eaa:	e04e      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0304 	and.w	r3, r3, #4
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d037      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	2b80      	cmp	r3, #128	@ 0x80
 8004ebe:	d034      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	d031      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69db      	ldr	r3, [r3, #28]
 8004ecc:	f003 0308 	and.w	r3, r3, #8
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d110      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2208      	movs	r2, #8
 8004eda:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004edc:	68f8      	ldr	r0, [r7, #12]
 8004ede:	f000 f85e 	bl	8004f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2208      	movs	r2, #8
 8004ee6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e029      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f04:	d111      	bne.n	8004f2a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004f0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f000 f844 	bl	8004f9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e00f      	b.n	8004f4a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	4013      	ands	r3, r2
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	bf0c      	ite	eq
 8004f3a:	2301      	moveq	r3, #1
 8004f3c:	2300      	movne	r3, #0
 8004f3e:	b2db      	uxtb	r3, r3
 8004f40:	461a      	mov	r2, r3
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d0a0      	beq.n	8004e8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b089      	sub	sp, #36	@ 0x24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	e853 3f00 	ldrex	r3, [r3]
 8004f66:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	461a      	mov	r2, r3
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7c:	6979      	ldr	r1, [r7, #20]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	e841 2300 	strex	r3, r2, [r1]
 8004f84:	613b      	str	r3, [r7, #16]
   return(result);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1e6      	bne.n	8004f5a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004f92:	bf00      	nop
 8004f94:	3724      	adds	r7, #36	@ 0x24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b095      	sub	sp, #84	@ 0x54
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fae:	e853 3f00 	ldrex	r3, [r3]
 8004fb2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fb6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004fba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fc4:	643b      	str	r3, [r7, #64]	@ 0x40
 8004fc6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004fca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004fcc:	e841 2300 	strex	r3, r2, [r1]
 8004fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1e6      	bne.n	8004fa6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	3308      	adds	r3, #8
 8004fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	e853 3f00 	ldrex	r3, [r3]
 8004fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f023 0301 	bic.w	r3, r3, #1
 8004fee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3308      	adds	r3, #8
 8004ff6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ff8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005000:	e841 2300 	strex	r3, r2, [r1]
 8005004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1e5      	bne.n	8004fd8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005010:	2b01      	cmp	r3, #1
 8005012:	d118      	bne.n	8005046 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	60bb      	str	r3, [r7, #8]
   return(result);
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	f023 0310 	bic.w	r3, r3, #16
 8005028:	647b      	str	r3, [r7, #68]	@ 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	461a      	mov	r2, r3
 8005030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005032:	61bb      	str	r3, [r7, #24]
 8005034:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6979      	ldr	r1, [r7, #20]
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	613b      	str	r3, [r7, #16]
   return(result);
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e6      	bne.n	8005014 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2220      	movs	r2, #32
 800504a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2200      	movs	r2, #0
 8005058:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800505a:	bf00      	nop
 800505c:	3754      	adds	r7, #84	@ 0x54
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr

08005066 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b090      	sub	sp, #64	@ 0x40
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005072:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	69db      	ldr	r3, [r3, #28]
 8005078:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800507c:	d037      	beq.n	80050ee <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800507e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005080:	2200      	movs	r2, #0
 8005082:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	3308      	adds	r3, #8
 800508c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800508e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005090:	e853 3f00 	ldrex	r3, [r3]
 8005094:	623b      	str	r3, [r7, #32]
   return(result);
 8005096:	6a3b      	ldr	r3, [r7, #32]
 8005098:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800509c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800509e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	3308      	adds	r3, #8
 80050a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80050a6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e5      	bne.n	8005086 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	617b      	str	r3, [r7, #20]
   return(result);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80050ec:	e002      	b.n	80050f4 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80050ee:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80050f0:	f7fb fd70 	bl	8000bd4 <HAL_UART_TxCpltCallback>
}
 80050f4:	bf00      	nop
 80050f6:	3740      	adds	r7, #64	@ 0x40
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}

080050fc <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fadc 	bl	80046c8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005110:	bf00      	nop
 8005112:	3710      	adds	r7, #16
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}

08005118 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b086      	sub	sp, #24
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005124:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800512a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005132:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800513e:	2b80      	cmp	r3, #128	@ 0x80
 8005140:	d109      	bne.n	8005156 <UART_DMAError+0x3e>
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	2b21      	cmp	r3, #33	@ 0x21
 8005146:	d106      	bne.n	8005156 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	2200      	movs	r2, #0
 800514c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8005150:	6978      	ldr	r0, [r7, #20]
 8005152:	f7ff fefe 	bl	8004f52 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005160:	2b40      	cmp	r3, #64	@ 0x40
 8005162:	d109      	bne.n	8005178 <UART_DMAError+0x60>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b22      	cmp	r3, #34	@ 0x22
 8005168:	d106      	bne.n	8005178 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	2200      	movs	r2, #0
 800516e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8005172:	6978      	ldr	r0, [r7, #20]
 8005174:	f7ff ff13 	bl	8004f9e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800517e:	f043 0210 	orr.w	r2, r3, #16
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005188:	6978      	ldr	r0, [r7, #20]
 800518a:	f7ff faa7 	bl	80046dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800518e:	bf00      	nop
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	2200      	movs	r2, #0
 80051a8:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f7ff fa95 	bl	80046dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051b2:	bf00      	nop
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b088      	sub	sp, #32
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	e853 3f00 	ldrex	r3, [r3]
 80051ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e4:	6979      	ldr	r1, [r7, #20]
 80051e6:	69ba      	ldr	r2, [r7, #24]
 80051e8:	e841 2300 	strex	r3, r2, [r1]
 80051ec:	613b      	str	r3, [r7, #16]
   return(result);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e6      	bne.n	80051c2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2220      	movs	r2, #32
 80051f8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fb fce7 	bl	8000bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005206:	bf00      	nop
 8005208:	3720      	adds	r7, #32
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}

0800520e <memset>:
 800520e:	4402      	add	r2, r0
 8005210:	4603      	mov	r3, r0
 8005212:	4293      	cmp	r3, r2
 8005214:	d100      	bne.n	8005218 <memset+0xa>
 8005216:	4770      	bx	lr
 8005218:	f803 1b01 	strb.w	r1, [r3], #1
 800521c:	e7f9      	b.n	8005212 <memset+0x4>
	...

08005220 <__libc_init_array>:
 8005220:	b570      	push	{r4, r5, r6, lr}
 8005222:	4d0d      	ldr	r5, [pc, #52]	@ (8005258 <__libc_init_array+0x38>)
 8005224:	4c0d      	ldr	r4, [pc, #52]	@ (800525c <__libc_init_array+0x3c>)
 8005226:	1b64      	subs	r4, r4, r5
 8005228:	10a4      	asrs	r4, r4, #2
 800522a:	2600      	movs	r6, #0
 800522c:	42a6      	cmp	r6, r4
 800522e:	d109      	bne.n	8005244 <__libc_init_array+0x24>
 8005230:	4d0b      	ldr	r5, [pc, #44]	@ (8005260 <__libc_init_array+0x40>)
 8005232:	4c0c      	ldr	r4, [pc, #48]	@ (8005264 <__libc_init_array+0x44>)
 8005234:	f000 f818 	bl	8005268 <_init>
 8005238:	1b64      	subs	r4, r4, r5
 800523a:	10a4      	asrs	r4, r4, #2
 800523c:	2600      	movs	r6, #0
 800523e:	42a6      	cmp	r6, r4
 8005240:	d105      	bne.n	800524e <__libc_init_array+0x2e>
 8005242:	bd70      	pop	{r4, r5, r6, pc}
 8005244:	f855 3b04 	ldr.w	r3, [r5], #4
 8005248:	4798      	blx	r3
 800524a:	3601      	adds	r6, #1
 800524c:	e7ee      	b.n	800522c <__libc_init_array+0xc>
 800524e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005252:	4798      	blx	r3
 8005254:	3601      	adds	r6, #1
 8005256:	e7f2      	b.n	800523e <__libc_init_array+0x1e>
 8005258:	080052a8 	.word	0x080052a8
 800525c:	080052a8 	.word	0x080052a8
 8005260:	080052a8 	.word	0x080052a8
 8005264:	080052ac 	.word	0x080052ac

08005268 <_init>:
 8005268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526a:	bf00      	nop
 800526c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800526e:	bc08      	pop	{r3}
 8005270:	469e      	mov	lr, r3
 8005272:	4770      	bx	lr

08005274 <_fini>:
 8005274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005276:	bf00      	nop
 8005278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800527a:	bc08      	pop	{r3}
 800527c:	469e      	mov	lr, r3
 800527e:	4770      	bx	lr
